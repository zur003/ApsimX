{
  "$type": "Models.Core.Simulations, Models",
  "ExplorerWidth": 354,
  "Version": 100,
  "ApsimVersion": "0.0.0.0",
  "Name": "Simulations",
  "Children": [
    {
      "$type": "Models.Memo, Models",
      "Text": "# Report Model Documentation and Examples\n\n*Dean Holzworth (CSIRO, Australia) and Val Snow (AgResearch, New Zealand)*\n\n(Text last updated 24 October 2019)\n\n**Report** is the model in APSIM that is used to generate columns of simulation outputs for further analysis. \n\nThe simulations in this example are to show examples of the different reporting capabilities and to provide a test that they continue to produce the correct results.\n\nThe intention is that this documentation is read alongside the simulation that produced it to see the detail of the examples. The simulation is to be found under the \"Examples\" button as Report.apsim.\n\n\n   \n\n\n\n\n",
      "Name": "About this example",
      "Children": [],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "Children": [],
      "IncludeInDocumentation": false,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "IsRunning": false,
      "Name": "SimpleReportingSim",
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "Start": "1980-01-01T00:00:00",
          "End": "1990-12-31T00:00:00",
          "Name": "Clock",
          "Children": [],
          "IncludeInDocumentation": false,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "CaptureErrors": true,
          "CaptureWarnings": true,
          "CaptureSummaryText": true,
          "Name": "SummaryFile",
          "Children": [],
          "IncludeInDocumentation": false,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Weather, Models",
          "FileName": "%root%\\Examples\\WeatherFiles\\Dalby.met",
          "ExcelWorkSheetName": "",
          "Name": "Weather",
          "Children": [],
          "IncludeInDocumentation": false,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "SoilArbitrator",
          "Children": [],
          "IncludeInDocumentation": false,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Field",
          "Children": [
            {
              "$type": "Models.Manager, Models",
              "Code": "using APSIM.Shared.Utilities;\r\nusing Models.Utilities;\r\nusing Models.Soils.Nutrients;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Core;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock Clock;\r\n        [Link] Fertiliser Fertiliser;\r\n        [Link] Summary Summary;\r\n        [Link(ByName = true)] Plant Wheat;\r\n        [Link] Soil Soil; \r\n        Accumulator accumulatedRain;\r\n        \r\n        [Description(\"Start of sowing window (d-mmm)\")]\r\n        public string StartDate { get; set;}\r\n        [Description(\"End of sowing window (d-mmm)\")]\r\n        public string EndDate { get; set;}\r\n        [Description(\"Minimum extractable soil water for sowing (mm)\")]\r\n        public double MinESW { get; set;}\r\n        [Description(\"Accumulated rainfall required for sowing (mm)\")]\r\n        public double MinRain { get; set;}\r\n        [Description(\"Duration of rainfall accumulation (d)\")]\r\n        public int RainDays { get; set;}\r\n        [Description(\"Cultivar to be sown\")]\r\n        [Display(Type=DisplayType.CultivarName, PlantName = \"Wheat\")]\r\n        public string CultivarName { get; set;}\r\n        [Description(\"Sowing depth (mm)\")]\r\n        public double SowingDepth { get; set;}        \r\n        [Description(\"Row spacing (mm)\")]\r\n        public double RowSpacing { get; set;}    \r\n        [Description(\"Plant population (/m2)\")]\r\n        public double Population { get; set;}    \r\n        \r\n        \r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n            accumulatedRain = new Accumulator(this, \"[Weather].Rain\", RainDays);\r\n        }\r\n        \r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            accumulatedRain.Update();\r\n            \r\n            if (DateUtilities.WithinDates(StartDate,Clock.Today,EndDate) &&\r\n                !Wheat.IsAlive &&\r\n                MathUtilities.Sum(Soil.SoilWater.ESW) > MinESW &&\r\n                accumulatedRain.Sum > MinRain)\r\n            {\r\n               Wheat.Sow(population:Population, cultivar:CultivarName, depth:SowingDepth, rowSpacing:RowSpacing);    \r\n            }\r\n        \r\n        }\r\n        \r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "StartDate",
                  "Value": "1-may"
                },
                {
                  "Key": "EndDate",
                  "Value": "10-jul"
                },
                {
                  "Key": "MinESW",
                  "Value": "100"
                },
                {
                  "Key": "MinRain",
                  "Value": "25"
                },
                {
                  "Key": "RainDays",
                  "Value": "7"
                },
                {
                  "Key": "CultivarName",
                  "Value": "Hartog"
                },
                {
                  "Key": "SowingDepth",
                  "Value": "30"
                },
                {
                  "Key": "RowSpacing",
                  "Value": "250"
                },
                {
                  "Key": "Population",
                  "Value": "120"
                }
              ],
              "Name": "Sowing",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using Models.PMF;\r\nusing Models.Core;\r\nusing System;\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock Clock;\r\n        [Link] Fertiliser Fertiliser;\r\n        [Link] Summary Summary;\r\n\r\n        [Description(\"Crop to be fertilised\")]\r\n        public IPlant Crop { get; set; }\r\n\r\n        [Description(\"Type of fertiliser to apply? \")] public Fertiliser.Types FertiliserType { get; set; }\r\n\r\n    \r\n        [Description(\"Amount of fertiliser to be applied (kg/ha)\")]\r\n        public double Amount { get; set; }\r\n        \r\n        [EventSubscribe(\"Sowing\")]\r\n        private void OnSowing(object sender, EventArgs e)\r\n        {\r\n            Model crop = sender as Model;\r\n            if (Crop != null && crop.Name.ToLower() == (Crop as IModel).Name.ToLower())\r\n            {\r\n                Summary.WriteMessage(this, \"Sowing fertilsier\");\r\n                Fertiliser.Apply(Amount: Amount, Type: FertiliserType);\r\n            }\r\n        }\r\n        \r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "Crop",
                  "Value": "[Wheat]"
                },
                {
                  "Key": "FertiliserType",
                  "Value": "UreaN"
                },
                {
                  "Key": "Amount",
                  "Value": "160"
                }
              ],
              "Name": "Fertilise at sowing",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using APSIM.Shared.Utilities;\r\nusing Models.Utilities;\r\nusing Models.Soils.Nutrients;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Core;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link(ByName = true)] Plant Wheat;\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            if (Wheat.IsReadyForHarvesting)\r\n            {\r\n               Wheat.Harvest();\r\n               Wheat.EndCrop();    \r\n            }\r\n        \r\n        }\r\n        \r\n    }\r\n}\r\n",
              "Parameters": [],
              "Name": "Harvest",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using APSIM.Shared.Utilities;\r\nusing System.Xml.Serialization;\r\nusing Models;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Text;\r\nusing System.Collections.Generic;\r\nusing Models.Core;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    public class Script : Model\r\n    {\r\n        public double FASW { get; set; }\r\n        public double WaterDeficit  { get; set; }\r\n    \r\n        [Link] Zone zone;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Soil soil;\r\n        \r\n        [Description(\"Auto irrigation on?\")]\r\n        public bool AutoIrrigationOn { get; set; }\r\n\r\n        [Description(\"Threshold fraction available water (0-1)\")]\r\n        public double FASWThreshold { get; set; }\r\n\r\n        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]\r\n        public double FASWDepth { get; set; }\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            CalculateFASW();\r\n            if (AutoIrrigationOn)\r\n            {\r\n                if (FASW < FASWThreshold)\r\n                {\r\n                    double amount = 10;\r\n                    irrigation.Apply(WaterDeficit, depth: 0);\r\n                }\r\n            }\r\n        }\r\n        \r\n        private void CalculateFASW()\r\n        {\r\n            double[] LL15 = MathUtilities.Multiply(soil.LL15, soil.Thickness);\r\n            double[] DUL = MathUtilities.Multiply(soil.DUL, soil.Thickness);\r\n        \r\n            int nlayr = GetLayerIndex();\r\n            double cumdep = MathUtilities.Sum(soil.Thickness, 0, nlayr, 0.0);\r\n\r\n            double excess_fr = MathUtilities.Divide((cumdep - FASWDepth), soil.Thickness[nlayr], 0.0);\r\n\r\n            // note that results may be strange if swdep < ll15\r\n            double avail_sw = (MathUtilities.Sum(soil.Water, 0, nlayr, 0.0)\r\n                              - excess_fr * soil.Water[nlayr])\r\n                              - (MathUtilities.Sum(LL15, 0, nlayr, 0.0)\r\n                              - excess_fr * LL15[nlayr]);\r\n\r\n\r\n            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0)\r\n                                  - excess_fr * DUL[nlayr])\r\n                                  - (MathUtilities.Sum(LL15, 0, nlayr, 0.0)\r\n                                  - excess_fr * LL15[nlayr]);\r\n\r\n            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);\r\n            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);\r\n        }\r\n\r\n        private int GetLayerIndex()\r\n        {\r\n            double[] cumThickness = soil.ThicknessCumulative;\r\n            for (int i = 1; i < cumThickness.Length; i++)\r\n            {\r\n                if (FASWDepth < cumThickness[i])\r\n                    return i - 1;\r\n            }\r\n            \r\n            return cumThickness.Length - 1;\r\n        }\r\n\r\n    }\r\n}\r\n       \r\n",
              "Parameters": [
                {
                  "Key": "FASW",
                  "Value": "0"
                },
                {
                  "Key": "WaterDeficit",
                  "Value": "0"
                },
                {
                  "Key": "AutoIrrigationOn",
                  "Value": "True"
                },
                {
                  "Key": "FASWThreshold",
                  "Value": "0.75"
                },
                {
                  "Key": "FASWDepth",
                  "Value": "600"
                }
              ],
              "Name": "AutoIrrig",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using APSIM.Shared.Utilities;\r\nusing System.Xml.Serialization;\r\nusing Models;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Text;\r\nusing System.Collections.Generic;\r\nusing Models.Core;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock clock;\r\n        [Link] Zone zone;\r\n        [Link] Summary summary;\r\n\r\n        [Separator(\"NOTE - all dates or date strings are entered with comma-separation and no spaces\")]\r\n        [Separator(\"NOTE - this component should be at the bottom of the list of Managers\")]\r\n        [Separator(\"   \")]\r\n        [Separator(\"Example for reporting in particular days but the same days every year\")]\r\n\r\n        //ReportOnSpecificDaysEveryYear\r\n        [Description(\"Name of the Report model for reporting on below dates every year: \")] \r\n        [Display(Type=DisplayType.Model, ModelType = typeof(Report))]\r\n        public Report ReportEveryYear_Name { get; set; } \r\n\r\n        [Description(\"Enter one or more dates (as dd-mmm) for reporting : \")] \r\n        public string[] ReportEveryYear_Dates { get; set; } \r\n\r\n        [Separator(\"Example for reporting on absolute dates\")]\r\n\r\n        [Description(\"Name of the Report model for reporting on completely specified dates: \")] \r\n        [Display(Type=DisplayType.Model, ModelType = typeof(Report))]\r\n        public Report ReportSpecificDates_Name { get; set; } \r\n\r\n        [Description(\"Enter one or more dates (as dd-mmm-yyyy) for reporting : \")] \r\n        public DateTime[] ReportSpecificDates_Dates { get; set; } \r\n\r\n\r\n\r\n        [EventSubscribe(\"DoManagementCalculations\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n\r\n            // example for reporting on irregular dates but the same dates every year\r\n            if (ReportEveryYear_Dates != null)\r\n                foreach (string ddMMM in ReportEveryYear_Dates)\r\n                    if (DateUtilities.DatesEqual(ddMMM, clock.Today))\r\n                        ReportEveryYear_Name.DoOutput();\r\n\r\n            // example for reporting on fully-specified dates that are not necessarily the same dates every year\r\n            if (ReportSpecificDates_Dates != null)\r\n                foreach (DateTime ddMMMyy in ReportSpecificDates_Dates)\r\n                    if (DateUtilities.Equals(ddMMMyy, clock.Today))\r\n                        ReportSpecificDates_Name.DoOutput();\r\n\r\n\r\n\r\n\r\n            /*if (ReportSpecificDates_Dates != null)\r\n            {\r\n                foreach (DateTime ddMMMyy in ReportSpecificDates_Dates)\r\n                {\r\n                    if (DateUtilities.Equals(ddMMMyy, clock.Today))\r\n                    {\r\n                        Models.Report myReport = Apsim.Find(zone, ReportSpecificDates_Name) as Models.Report;\r\n                        if (myReport == null)\r\n                            throw new Exception(string.Format(\"Unable to locate report {0}.\", ReportSpecificDates_Name));\r\n                        myReport.DoOutput();\r\n                    }\r\n                }\r\n            }*/\r\n\r\n        }\r\n        \r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "ReportEveryYear_Name",
                  "Value": "[ReportOnSpecificDaysEveryYear]"
                },
                {
                  "Key": "ReportEveryYear_Dates",
                  "Value": "21-mar,23-nov,11-aug"
                },
                {
                  "Key": "ReportSpecificDates_Name",
                  "Value": "[ReportOnSpecificDates]"
                },
                {
                  "Key": "ReportSpecificDates_Dates",
                  "Value": "03/27/1980 00:00:00,08/15/1981 00:00:00"
                }
              ],
              "Name": "ReportHelper",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Irrigation, Models",
              "Name": "Irrigation",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 1.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "soil_albedo": 0.3,
              "SoilHeatFluxFraction": 0.4,
              "MinimumHeightDiffForNewLayer": 0.0,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "ResourceName": "Wheat",
              "Name": "Wheat",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "InitialResidueName": "wheat_stubble",
              "InitialResidueType": "wheat",
              "InitialResidueMass": 500.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 100.0,
              "ResourceName": "SurfaceOrganicMatter",
              "Name": "SurfaceOrganicMatter",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": "Vertosol",
              "ASCSubOrder": "Black",
              "SoilType": "Clay",
              "LocalName": null,
              "Site": "Norwin",
              "NearestTown": "Norwin",
              "Region": "Darling Downs and Granite Belt",
              "State": "Queensland",
              "Country": "Australia",
              "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
              "ApsoilNumber": "900",
              "Latitude": -27.581836,
              "Longitude": 151.320206,
              "LocationAccuracy": " +/- 20m",
              "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
              "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
              "Name": "Soil",
              "Children": [
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "ParticleSizeClay": null,
                  "ParticleSizeSand": null,
                  "ParticleSizeSilt": null,
                  "BD": [
                    1.01056473311131,
                    1.07145631083388,
                    1.09393858528057,
                    1.15861335018721,
                    1.17301160318016,
                    1.16287303586874,
                    1.18749547755906
                  ],
                  "AirDry": [
                    0.130250054518252,
                    0.198689390775399,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "LL15": [
                    0.260500109036505,
                    0.248361738469248,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "DUL": [
                    0.52100021807301,
                    0.496723476938497,
                    0.488437607673005,
                    0.480296969355493,
                    0.471583596524955,
                    0.457070570557793,
                    0.452331759845006
                  ],
                  "SAT": [
                    0.588654817693846,
                    0.565676863836273,
                    0.557192986686577,
                    0.532787415023694,
                    0.527354112007486,
                    0.531179986464627,
                    0.521888499034317
                  ],
                  "KS": [
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0
                  ],
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "Name": "Physical",
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.06,
                        0.06,
                        0.06,
                        0.04,
                        0.04,
                        0.02,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "WheatSoil",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 5.0,
                  "SummerCona": 5.0,
                  "WinterDate": "1-Apr",
                  "WinterU": 5.0,
                  "WinterCona": 5.0,
                  "DiffusConst": 40.0,
                  "DiffusSlope": 16.0,
                  "Salb": 0.12,
                  "CN2Bare": 73.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "Slope": "NaN",
                  "DischargeWidth": "NaN",
                  "CatchmentArea": "NaN",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "SWCON": [
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3
                  ],
                  "KLAT": null,
                  "ResourceName": "WaterBalance",
                  "Name": "SoilWater",
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    1.2,
                    0.96,
                    0.6,
                    0.3,
                    0.18,
                    0.12,
                    0.12
                  ],
                  "SoilCNRatio": [
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0
                  ],
                  "FBiom": [
                    0.04,
                    0.02,
                    0.02,
                    0.02,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "FInert": [
                    0.4,
                    0.6,
                    0.8,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "FOM": [
                    347.12903231275641,
                    270.3443621919937,
                    163.97214434990104,
                    99.454132887040629,
                    60.321980831124677,
                    36.587130828674873,
                    22.1912165985086
                  ],
                  "Name": "Organic",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "NO3N": [
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "NH4N": [
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1
                  ],
                  "PH": [
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0
                  ],
                  "CL": null,
                  "EC": null,
                  "ESP": null,
                  "Name": "Chemical",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.InitialWater, Models",
                  "PercentMethod": 1,
                  "FractionFull": 1.0,
                  "DepthWetSoil": "NaN",
                  "RelativeTo": null,
                  "Name": "InitialWater",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Sample, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "NO3N": null,
                  "NH4N": null,
                  "SW": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "OC": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "EC": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "CL": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "ESP": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "PH": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "SWUnits": 0,
                  "OCUnits": 0,
                  "PHUnits": 0,
                  "Name": "InitialN",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "CERESSoilTemperature",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Nutrients.Nutrient, Models",
                  "ResourceName": "Nutrient",
                  "Name": "Nutrient",
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Weather].Rain as DailyRainfall",
                "[Wheat].Grain.Total.Wt",
                "[Sowing].Script.SowingDepth",
                "[Weather].MaxT as MaxT",
                "Min of [Weather].MaxT from [ReportSimple].DayAfterLastOutput to [Clock].Today as TestMaxT"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "GroupByVariableName": null,
              "Name": "ReportSimple",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Wheat].AboveGroundLive.Wt",
                "Sum([Soil].Nutrient.MineralN)",
                "[Wheat].Phenology.CurrentPhaseName",
                "[Irrigation].IrrigationApplied",
                "[Fertiliser].NitrogenApplied"
              ],
              "EventNames": [
                "[Wheat].Sowing",
                "[Wheat].Flowering",
                "[Wheat].Harvesting",
                "[Wheat].Phenology.PhaseChanged",
                "[Irrigation].Irrigated",
                "[Fertiliser].Fertilised"
              ],
              "GroupByVariableName": null,
              "Name": "ReportOnEvents",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Wheat].AboveGroundLive.Wt"
              ],
              "EventNames": [
                ""
              ],
              "GroupByVariableName": null,
              "Name": "ReportOnSpecificDaysEveryYear",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Wheat].AboveGroundLive.Wt  "
              ],
              "EventNames": [
                ""
              ],
              "GroupByVariableName": null,
              "Name": "ReportOnSpecificDates",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "Sum([Soil].Thickness[1:3]) as DepthToBottomOfLayer3",
                "Sum([Soil].SoilWater.SWmm) as TotalWaterStored",
                "Sum([Soil].SoilWater.SWmm[1:2]) as WaterStoredTop2Layers",
                "Sum([Soil].SoilWater.SWmm[1:3]) as WaterStoredTop3Layers",
                "Sum([Soil].SoilWater.SWmm[4:]) as WaterStoredLayer4AndBelow",
                "Sum([Soil].SoilWater.SWmm[:6]) as WaterStoredDowntoLayer6",
                "Mean([Soil].Nutrient.NO3.ppm[1:4]) as MeanNO3ppmTop4Layers",
                "Min([Soil].Nutrient.NO3.ppm[1:4]) as MinNO3ppmTop4Layers",
                "Max([Soil].Nutrient.NO3.ppm[1:4]) as MaxNO3ppmTop4Layers",
                "Sum([Soil].Nutrient.Urea.kgha[1:3] + [Soil].Nutrient.NH4.kgha[1:3] + [Soil].Nutrient.NO3.kgha[1:3]) as MineralN",
                "Sum([Soil].Nutrient.Urea.kgha[1:3] + [Soil].Nutrient.NH4.kgha[1:3] + [Soil].Nutrient.NO3.kgha[1:3]) * 1000 / Sum([Soil].Thickness[1:3] ) as KgMinN_PerSoilMeter"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "GroupByVariableName": null,
              "Name": "ReportArrays",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "Sum of [Weather].MaxT from [ReportDaily].DayAfterLastOutput to [Clock].Today as SumDailyMaxT",
                "Mean of [Weather].MaxT from [ReportDaily].DayAfterLastOutput to [Clock].Today as MeanDailyMaxT ",
                "Min of [Weather].MaxT from [ReportDaily].DayAfterLastOutput to [Clock].Today as MinDailyMaxT",
                "Max of [Weather].MaxT from [ReportDaily].DayAfterLastOutput to [Clock].Today as MaxDailyMaxT",
                "First of [Weather].MaxT from [ReportDaily].DayAfterLastOutput to [Clock].Today as FirstDailyMaxT",
                "Last of [Weather].MaxT from [ReportDaily].DayAfterLastOutput to [Clock].Today as LastDailyMaxT",
                "Diff of [Weather].MaxT from [ReportDaily].DayAfterLastOutput to [Clock].Today as DiffDailyMaxT"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "GroupByVariableName": null,
              "Name": "ReportDaily",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "Sum of [Weather].MaxT from [ReportWeekly].DayAfterLastOutput to [Clock].Today as SumWeeklyMaxT",
                "Mean of [Weather].MaxT from [ReportWeekly].DayAfterLastOutput to [Clock].Today as MeanWeeklyMaxT",
                "Min of [Weather].MaxT from [ReportWeekly].DayAfterLastOutput to [Clock].Today as MinWeeklyMaxT",
                "Max of [Weather].MaxT from [ReportWeekly].DayAfterLastOutput to [Clock].Today as MaxWeeklyMaxT",
                "First of [Weather].MaxT from [ReportWeekly].DayAfterLastOutput to [Clock].Today as FirstWeeklyMaxT",
                "Last of [Weather].MaxT from [ReportWeekly].DayAfterLastOutput to [Clock].Today as LastWeeklyMaxT",
                "Diff of [Weather].MaxT from [ReportWeekly].DayAfterLastOutput to [Clock].Today as DiffWeeklyMaxT"
              ],
              "EventNames": [
                "[Clock].EndOfWeek"
              ],
              "GroupByVariableName": null,
              "Name": "ReportWeekly",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "Sum of [Weather].MaxT from [ReportMonthly].DayAfterLastOutput to [Clock].Today as SumMonthlyMaxT",
                "Mean of [Weather].MaxT from [ReportMonthly].DayAfterLastOutput to [Clock].Today as MeanMonthlyMaxT",
                "Min of [Weather].MaxT from [ReportMonthly].DayAfterLastOutput to [Clock].Today as MinMonthlyMaxT",
                "Max of [Weather].MaxT from [ReportMonthly].DayAfterLastOutput to [Clock].Today as MaxMonthlyMaxT",
                "First of [Weather].MaxT from [ReportMonthly].DayAfterLastOutput to [Clock].Today as FirstMonthlyMaxT",
                "Last of [Weather].MaxT from [ReportMonthly].DayAfterLastOutput to [Clock].Today as LastMonthlyMaxT",
                "Diff of [Weather].MaxT from [ReportMonthly].DayAfterLastOutput to [Clock].Today as DiffMonthlyMaxT"
              ],
              "EventNames": [
                "[Clock].EndOfMonth"
              ],
              "GroupByVariableName": null,
              "Name": "ReportMonthly",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "Sum of [Weather].MaxT from [ReportYearly].DayAfterLastOutput to [Clock].Today as SumYearlyMaxT",
                "Mean of [Weather].MaxT from [ReportYearly].DayAfterLastOutput to [Clock].Today as MeanYearlyMaxT",
                "Min of [Weather].MaxT from [ReportYearly].DayAfterLastOutput to [Clock].Today as MinYearlyMaxT",
                "Max of [Weather].MaxT from [ReportYearly].DayAfterLastOutput to [Clock].Today as MaxYearlyMaxT",
                "First of [Weather].MaxT from [ReportYearly].DayAfterLastOutput to [Clock].Today as FirstYearlyMaxT",
                "Last of [Weather].MaxT from [ReportYearly].DayAfterLastOutput to [Clock].Today as LastYearlyMaxT",
                "Diff of [Weather].MaxT from [ReportYearly].DayAfterLastOutput to [Clock].Today as DiffYearlyMaxT"
              ],
              "EventNames": [
                "[Clock].EndOfYear"
              ],
              "GroupByVariableName": null,
              "Name": "ReportYearly",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "Sum of [Weather].MaxT from [ReportSimulation].DayAfterLastOutput to [Clock].Today as SumSimulationMaxT",
                "Mean of [Weather].MaxT from [ReportSimulation].DayAfterLastOutput to [Clock].Today as MeanSimulationMaxT",
                "Min of [Weather].MaxT from [ReportSimulation].DayAfterLastOutput to [Clock].Today as MinSimulationMaxT",
                "Max of [Weather].MaxT from [ReportSimulation].DayAfterLastOutput to [Clock].Today as MaxSimulationMaxT",
                "First of [Weather].MaxT from [ReportSimulation].DayAfterLastOutput to [Clock].Today as FirstSimulationMaxT",
                "Last of [Weather].MaxT from [ReportSimulation].DayAfterLastOutput to [Clock].Today as LastSimulationMaxT",
                "Diff of [Weather].MaxT from [ReportSimulation].DayAfterLastOutput to [Clock].Today as DiffSimulationMaxT"
              ],
              "EventNames": [
                "[Clock].EndOfSimulation"
              ],
              "GroupByVariableName": null,
              "Name": "ReportSimulation",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": false,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": false,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowPageOfGraphs": true,
      "Name": "Reporting Basics",
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "\nSetting up outputs from a simulation requires describing **what** to output and **when** that should be done. \n\n## Properties - setting up what should be reported\n\nFigure 1 shows a screen capture of a simple report. The upper box (Properties) holds descriptions of what should be reported. The general syntax is:\n\n\t\t\t[Model].Variable\nThe first part, \"[Model]\" just above, gives the name of a model in the simulation. Models are almost any component in the simulation - e.g. Clock, Weather, Wheat, Irrigation - including Manager scripts (although these are a slightly special case and more on that below). The name of the model must be in square brackets. As with Manager scripts, Properties uses Intellisense to assist with constructing the output descriptors. For example, see row 1 of Figure 1. After typing \"[Clock]\" once a \".\" is typed a drop-down list of possible variables will appear as hints and in Figure 1 the choice from the list was \"Today\" which gives the date of the simulation output. \n\n*Note that model and variable names are case-sensitive. Capitalisation in the right places is important.*\n\nThe component \"ReportSimple\" shows four output examples (see also below). The second row (see also below) shows an example of relabelling the output (the \"as DairyRainfall\" text) - this simply allows the user to give a more relevant label for the output in the output file. \n\n\t\t\t[Weather].Rain as DailyRainfall\n\nThe third row shows that it may be necessary to work through several layers to get to the output wanted. In each case a \".\" after the variable name gives a list with hints for outputs.\n\n\t\t\t[Wheat].Grain.Total.Wt\n\nThe fourth row (also below) shows the special case of reporting an output from a Manager script. The first part (\"[SowingRule]\") is the name of the Manager script (so the output text needs to say current with any name changes you might make). Outputs from Managers always need a \".Script\" before Intellisense will show the possible outputs.\n\n\t\t\t[SowingRule].Script.SowingDepth\n\n## Reporting frequency - setting up when reports should happen\n\nAlso needed is a specification of *when* an output should be made. The instruction for when to report is in the form of:\n\n\t\t\t[Model].Event or Date(s)\n### Event\nAn Event is something that happens, like a stage of the day or a management action. The most-used example of a reporting frequency is:\n\n\t\t\t[Clock].EndOfDay\nand this creates an output for every \"EndOfDay\" event - \"EndOfDay\" is an event created by Clock every day after all the models have done their calculations. Any (almost) event can be used to control the frequency of reporting such as:\n\n\t\t\t[Wheat].Sowing\n\t\t\t[Wheat].Flowering\n\t\t\t[Wheat].Harvesting\n\t\t\t[Wheat].PlantEnding\n\t\t\t[Irrigation].Irrigated\n\t\t\t[Fertiliser].Fertilised\nwhere “Wheat” might be any crop. This also shows that multiple triggers for reporting can be used.\n \nIt is worth noting that when an event is used to trigger reporting, the output happens immediately rather than at the end of the simulation day. If you are getting strange outputs then consider this as a possible reason. To understand more about what order models do their calculations see https://apsimnextgeneration.netlify.com/development.\n\n### Dates\n\nIn addition to specifying events, you can also specify one or more dates in the frequency window. Dates can be specified one per line at be in either dd-mmm or dd-mmm-yyyy form e.g.\n\n\t\t1-jul\n\t\t1-jul-1980\n\nNote that there can be a mixture of events and dates.\n\n## Reporting at irregular intervals or specific dates\n\nIf reporting is needed for particular days (e.g. to compare against measurements in an experiment) a combination of a Manager and a Report component will do the trick. An example of such a Manager (**ReportHelper**) and two Report components (**ReportOnSpecificDaysEveryYear** and **ReportOnSpecificDates**) are included in this example. Note that when using a Manager to control reporting, the Report frequency in the Report component should be left blank.\n\n[Note that an Operations component could also be used to trigger irregular reporting dates.]\n\n\n",
          "Name": "Reporting Basics",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowPageOfGraphs": true,
      "Name": "Dealing with outputs that have layers",
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "\nSeveral of the outputs from APSIM are arrays - water content in the soil layers is a good example of this - and there are some features that make reporting arrays easier in APSIM.\n\nTo report all elements of an array, the syntax is the same as reporting a single variable. See for example in Row 2 of \"ReportArrays the text\n\n\t\t\t[Soil].SoilWater.SWmm\nproduces one column of output for each element (soil layer) in the array. When a particular layer is wanted then specify that in square brackets so the \"[1]\" is the top (closest to the soil surface) layer. For example,\n\n\t\t\t[Soil].SoilWater.SWmm[1] as TopLayerWater_mm\n\nMore often some sort of aggregation is in the array is wanted and for this it is necessary to specify both which elements of the array are to be aggregated and what type of aggregation is wanted. \n\nThere are four options for specifying how the array elements should be aggregated - Sum, Mean, Min and Max - the meaning of these is self-evident. These are applied to the array as, for example Mean(x) where the x is the output to be averaged. Use round brackets, capitalise the aggregation type and no spaces.\n\nFor specifying how the aggregation is to work there are several options. Giving no layer information at all includes all of the array. A range is specified as, for example [3:6] for the third to sixth (inclusive, here meaning four layers) layers. Giving the colon but no numerical value means from the first (e.g. [:5]) or to the last (e.g. [2:]) elements. Report will not indicate the depth of the layers but the user can either get this information from the Soil input or can output the data using [Soil].Thickness which is an array giving the thickness of each layer in mm.\n\nSome examples of possible array outputs to show the syntax are:\n\n\t\t\tSum([Soil].Thickness[1:3]) as DepthToBottomOfLayer3\n\t\t\tSum([Soil].SoilWater.SWmm) as TotalWaterStored\n\t\t\tSum([Soil].SoilWater.SWmm[1:2]) as WaterStoredTop2Layers\n\t\t\tSum([Soil].SoilWater.SWmm[1:3]) as WaterStoredTop3Layers\n\t\t\tSum([Soil].SoilWater.SWmm[4:]) as WaterStoredLayer4AndBelow\n\t\t\tSum([Soil].SoilWater.SWmm[:6]) as WaterStoredDowntoLayer6\n\t\t\tMean([Soil].Nutrient.NO3.ppm[1:4]) as MeanNO3ppmTop4Layers\n\t\t\tMin([Soil].Nutrient.NO3.ppm[1:4]) as MinNO3ppmTop4Layers\n\t\t\tMax([Soil].Nutrient.NO3.ppm[1:4]) as MaxNO3ppmTop4Layers\n\nSimple, element-by-element, array operations can be included in the specification. For example\n\n\t\t\t[Soil].Nutrient.Urea.kgha + [Soil].Nutrient.NH4.kgha + [Soil].Nutrient.NO3.kgha\nwill produce one column of data for each soil layer with the total of the amount of N as Urea, NH4 and NO3. Inserting\n\n\t\t\tSum([Soil].Nutrient.Urea.kgha[1:3] + [Soil].Nutrient.NH4.kgha[1:3] + [Soil].Nutrient.NO3.kgha[1:3]) as MineralN\nwill give a single column of data with the total of Urea-N, NH4-N and NO3-N dfrom the surface the the bottom of the third layer. These expressions can get more complex as in:\n\n\t\t\tSum([Soil].Nutrient.Urea.kgha[1:3] + [Soil].Nutrient.NH4.kgha[1:3] + [Soil].Nutrient.NO3.kgha[1:3]) * 1000 / Sum([Soil].Thickness[1:3] ) as KgMinN_PerSoilMeter\nwhich would give s single (somewhat nonsensical) output of the accumulation in mineral N with depth in the soil. \n",
          "Name": "Reporting Arrays",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowPageOfGraphs": true,
      "Name": "Reporting at Intervals Beyond Every Day",
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "***Note well** – reporting at aggregations other than every day can become complex. It is recommended that the results be critically evaluated to ensure that the reporting specified is as intended.*\n\nAPSIM allows reporting at various intervals. Several of these methods have been described above. In addition to the usual [Clock].EndOfDay for daily reporting, [Clock] also has events of EndOfWeek, EndOfMonth, EndOfYear and EndOfSimulation. When the reporting is not every day then it is necessary to consider what the aggregation of the output should be. Some variables would usually be reported as their value on the day – many state variables (e.g. plant biomass) are like this. Others are almost always wanted to be summed over the interval since the last report – drainage and evaporation are good examples here. \n\nAPSIM provides several ways to construct the aggregations. Not all the aggregations will be sensible for all outputs and it is up to the user to ensure the sensibility of the instructions to Report. For example, it makes no physical sense to sum the biomass of a plant in a monthly aggregation. It would make sense to report the value at the end of the month or to report the increase (difference) in biomass from the start to the end and it might make sense to report an average biomass. These issues must be considered when constructing more complex Report specifications. The general syntax of aggregated reporting is:\n\n\t\t\tAggregationType of [Model].Variable from Start to End as Label\n\nThe new elements here are *AggregationType*, *Start* and *End*.\n\n##AggregationType\nAggregationType can be any of:\n\n-\tSum of\n\n-\tMean of\n\n-\tMin of \n\n-\tMax of\n\n-\tFirst of\n\n-\tLast of \n\n-\tDiff of\n\nMost of these are self-evident. First and Last are chronological values. Diff is the increase in the output variable over the reporting interval – if the variable decreases then it will have a negative value.\n\n##Start\nThe most useful form of *Start* is *[ReportName].DateOfLastOutput* where the first part is the name of the current Report component. *DateOfLastOutput* is pretty much as stated. Other *Start* constructs might be a general, e.g. *1-jan*, or specific, e.g. *1-jan-1982*, date. *Start* can also be an event, e.g. *[Wheat].sowing* or *[Clock].StartOfYear*. When *Start* is a Clock or Report event the aggregation always starts at the start of the day. For events created by crop or other models the event can happen at any point of the day and it is not always clear without careful examination if the current-day calculations and updates will be included or excluded. This is user-beware.\n\n##End\n*[Clock].Today* is the most useful *End* specification. This means that the end of the aggregation will be controlled by the Report frequency. *End* can also be an event, e.g. *[Wheat].Harvesting* or a general or specific date. As with *Start* and events, treat these with caution. Always consider the interaction between the aggregation interval and the report frequency. For example if the report frequency is *[Clock].EndOfMonth*:\n\t\t\t\n\t\t\tSum of [Weather].Rain from [Report].DateOfLastOutput to [Clock].Today \nwill produce a monthly rainfall total while\n\t\t\t\n\t\t\tSum of [Weather].Rain from 1-jan to [Clock].Today \nwill produce a cumulative rainfall as the months of the year progress and the accumulation will reset again on the next 1-Jan.\n\n##Some examples\nThe figures below show some aggregation examples of daily, weekly, monthly and annual aggregation reporting maximum temperature in various ways. Note that an aggregation to the end of the simulation is also possible. See the accompanying example *Report.apsimx* for details of these aggregations.\n\n\n",
          "Name": "Reporting that is Aggregated in Time",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": "At present at least Max MaxT f",
          "Axis": [
            {
              "$type": "Models.Axis, Models",
              "Type": 3,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": true,
              "CrossesAtZero": false
            },
            {
              "$type": "Models.Axis, Models",
              "Type": 0,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": false,
              "CrossesAtZero": false
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Maximum Temperatures with Varying Aggregation",
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -990142,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "ReportDaily",
              "XFieldName": "Clock.Today",
              "YFieldName": "MaxDailyMaxT",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Daily MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 1,
              "LineThickness": 0,
              "TableName": "ReportWeekly",
              "XFieldName": "Clock.Today",
              "YFieldName": "MaxWeeklyMaxT",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Weekly Maximum MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -2793984,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "ReportMonthly",
              "XFieldName": "Clock.Today",
              "YFieldName": "MaxMonthlyMaxT",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Monthly Maximum MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "ReportYearly",
              "XFieldName": "Clock.Today",
              "YFieldName": "MaxYearlyMaxT",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Yearly Maximum MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "Models.Axis, Models",
              "Type": 3,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": true,
              "CrossesAtZero": false
            },
            {
              "$type": "Models.Axis, Models",
              "Type": 0,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": false,
              "CrossesAtZero": false
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Minimum Temperatures with Varying Aggregation",
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -990142,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "ReportDaily",
              "XFieldName": "Clock.Today",
              "YFieldName": "MinDailyMaxT",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Daily MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 1,
              "LineThickness": 0,
              "TableName": "ReportWeekly",
              "XFieldName": "Clock.Today",
              "YFieldName": "MinWeeklyMaxT",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Weekly Minimum MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -2793984,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "ReportMonthly",
              "XFieldName": "Clock.Today",
              "YFieldName": "MinMonthlyMaxT",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Monthly Minimum MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "ReportYearly",
              "XFieldName": "Clock.Today",
              "YFieldName": "MinYearlyMaxT",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Yearly Minimum MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowPageOfGraphs": true,
      "Name": "More Reporting Examples",
      "Children": [
        {
          "$type": "Models.Core.Folder, Models",
          "ShowPageOfGraphs": true,
          "Name": "Perennial Crop Example",
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "The simulation in this section (titled \"Annual Reporting In June\") is a multi-year pasture cutting trial simulation. The Report components provide some examples of ways to get useful outputs from a simulation. See the generated documentation but also look at the output specifications in the Reports components.\n\nNote that in the documentation, many of the output specifications are broken over two or more lines. This is only to show then text in the generated PDF. In a Report component, all the text would be on a single line.\n",
              "Name": "Memo",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Simulation, Models",
              "IsRunning": false,
              "Name": "Annual Reporting In June",
              "Children": [
                {
                  "$type": "Models.Clock, Models",
                  "Start": "1980-07-01T00:00:00",
                  "End": "1989-06-30T00:00:00",
                  "Name": "Clock",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Weather, Models",
                  "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
                  "ExcelWorkSheetName": null,
                  "Name": "Weather",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                  "Name": "SoilArbitrator",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Summary, Models",
                  "CaptureErrors": true,
                  "CaptureWarnings": true,
                  "CaptureSummaryText": true,
                  "Name": "Summary",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Field",
                  "Children": [
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\r\n// currenty defoliates the amount specified by spreading evenly over the specified period\r\n\r\nusing Models.Interfaces;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Core;\r\nusing System.Xml.Serialization;\r\nusing System.Collections.Generic;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        // - Links to APSIM models\r\n        [Link] Zone myZone;\r\n        [Link] Clock Clock;\r\n        [Link] Fertiliser fertiliser;\r\n        [Link(ByName = true)] ISolute no3;\r\n        [Link] Soil mySoil;\r\n        [Link] ISummary summary = null;\r\n        \r\n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\r\n        \r\n        // - Paramters for this manager\r\n        [Description(\"Allow this manager to control defoliation? \")]\r\n        public yesnoType AllowControl { get; set; }\r\n        [Description(\"Date to begin the rotation: \")]\r\n        public DateTime CutRotationStartDate { get; set; }\r\n        [Description(\"Date to finish the rotation: \")]\r\n        public DateTime CutRotationEndDate { get; set; }\r\n        [Description(\"How the interval is defined: \")]\r\n        public rotationIntervalTypes IntervalType { get; set; }\r\n        [Description(\"Rotation interval (days): \")]\r\n        public int CutInterval { get; set; }\r\n        [Description(\"Duration of each event (days): \")]\r\n        public int DurationOfCut { get; set; }\r\n        [Description(\"What amount is being defined: \")]\r\n        public removeAmountTypes RemoveAmountType { get; set; }\r\n        [Description(\"Amount to use (kg/ha): \")]\r\n        public double AmountGiven { get; set; }\r\n        [Description(\"How much of DM is removed from the field: \")]\r\n        public removeDMTypes DMRemoveType { get; set; }\r\n        [Description(\"Fraction of N that is removed from the field (0-1): \")]\r\n        public double FractionN2Remove { get; set; }\r\n        [Description(\"How defoliated material is returned to the field? \")]\r\n        public returnTypes ReturnType { get; set; }\r\n        [Description(\"How the partition of N to dung and urine are defined:\")]\r\n        public dungNContentTypes NDungType { get; set; }\r\n        [Description(\"Proportion of returned N that goes to dung (0-1): \")]\r\n        public double ProportionN2Dung { get; set; }\r\n        [Description(\"The C:N of dung (typically around 20): \")]\r\n        public double CNRatioDung { get; set; }\r\n        [Description(\"Depth down to which urine is applied (mm): \")]\r\n        public double UrineDepth { get; set; }\r\n\r\n        // - Outputs from this manager\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today\r\n        public double DefoliatedWt { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today\r\n        public double DefoliatedN { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today\r\n        public double HarvestedWt { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today\r\n        public double HarvestedN { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field\r\n        public double RemovedWt { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field\r\n        public double RemovedN { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field\r\n        public double ReturnedWt { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field\r\n        public double ReturnedN { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)\r\n        public double NReturnedInDung { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)\r\n        public double NReturnedInUrine { get; set; }\r\n        [XmlIgnore][Units(\"day\")]// Description: Number of days after last defoliation\r\n        public int DaysAfterCut { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut\r\n        public double PreHarvestDM { get; set; }\r\n        [XmlIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut\r\n        public double PostHarvestDM { get; set; }\r\n        \r\n        // - Internal variables\r\n        // fraction of harvested Dm to actually remove from field\r\n        private double fractionDM2Remove = 1.0;\r\n        // number of days for each defoliation event\r\n        private int cuttingDuration = 0;\r\n        // counter for day within each defoliation\r\n        private int daysCutting = 0;\r\n        // total existing DM harvestable\r\n        private double existingDM;\r\n        // total herbage to remove in g/m2 per day\r\n        private double herbageToRemove;\r\n        // type of DM amount (ResidualDM or DMToRemove)\r\n        private string amountType;\r\n        // auxiliary flag for defoliation\r\n        private bool aCutHasHappened = false;\r\n        // fraction of urine that is applied to each layer\r\n        private double[] fractionUrine;\r\n        // number of layer in the soil\r\n        private int nLayers;\r\n\r\n        // - Event to add residue or dung to surface OM\r\n        public event BiomassRemovedDelegate BiomassRemoved;\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n            foreach (AgPasture.PastureSpecies species in Apsim.Children(myZone, typeof(AgPasture.PastureSpecies)))\r\n                Pasture.Add(species);\r\n\r\n            // reset variables\r\n            DaysAfterCut = 0;\r\n            resetVariables();\r\n            cuttingDuration = DurationOfCut;\r\n            \r\n            // get the type of amount given\r\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\r\n                amountType = \"SetResidueAmount\";\r\n            else\r\n                amountType = \"SetRemoveAmount\";\r\n\r\n            // make sure that rotation start when startDate < simulationStartDay\r\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\r\n                CutRotationStartDate = Clock.Today;\r\n                \r\n            // set the fraction of urine for each layer\r\n            nLayers = mySoil.Thickness.Length;\r\n            fractionUrine = new double[nLayers];\r\n            double soilDepth = 0.0;\r\n            double distFactor = 1.5;\r\n            if (ReturnType == returnTypes.AsDungUrine)\r\n            {\r\n                double atZ0;\r\n                double atZ1;\r\n                double totalProp = UrineDepth * Math.Pow(1.0, distFactor) / (distFactor + 1.0);\r\n                \r\n                atZ1 = (UrineDepth - soilDepth) * Math.Pow(1.0 - soilDepth / UrineDepth, distFactor) / (distFactor + 1.0);\r\n                for (int z = 0; z < nLayers; z++)\r\n                {\r\n                    atZ0 = atZ1;\r\n                    soilDepth += mySoil.Thickness[z];\r\n                    atZ1 = (UrineDepth - soilDepth) * Math.Pow(1.0 - soilDepth / UrineDepth, distFactor) / (distFactor + 1);\r\n                    if (1.0 - (soilDepth / UrineDepth) < 0.0)\r\n                        atZ1 = 0;\r\n                    fractionUrine[z] = (atZ0 - atZ1) / totalProp;\r\n                }\r\n            }\r\n        }\r\n        \r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            // Check whether defoliation is allowed at all\r\n            if (AllowControl == yesnoType.yes)\r\n            {\r\n                // Check whether defoliation can start\r\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate))\r\n                {\r\n                    if (Clock.Today == CutRotationStartDate)\r\n                        DaysAfterCut = CutInterval;\r\n    \r\n                    // Check whether we should start a defoliation\r\n                    if ((Pasture[0].IsAlive) && (DaysAfterCut >= (CutInterval - 1)))\r\n                        StartDefoliation(AmountGiven, amountType, DurationOfCut);\r\n                }\r\n            }\r\n            //// Note: Only the code above should be limited by 'AllowControl'. So the rest of the code\r\n            ////  can be used by being called from another manager or a schedulle thingy\r\n\r\n\r\n            // Check whether we need to continue cutting\r\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\r\n            {\r\n                // reset outputs\r\n                resetVariables();\r\n\r\n                defoliatePasture(herbageToRemove);\r\n                if (ReturnType == returnTypes.AsResidue)\r\n                    returnResidues();\r\n                else\r\n                    returnExcreta();\r\n                daysCutting += 1;\r\n                if (daysCutting == cuttingDuration)\r\n                {\r\n                    PostHarvestDM = 0.0;\r\n                    foreach (AgPasture.PastureSpecies species in Pasture)\r\n                        PostHarvestDM += species.Standing.Wt;\r\n                }\r\n            }\r\n\r\n            // reset outputs\r\n            if (daysCutting < 0)\r\n            {\r\n                resetVariables();\r\n                daysCutting = 0;\r\n            }\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagementCalculations\")]\r\n        private void OnDoManagementCalculations(object sender, EventArgs e)\r\n        {\r\n            // Check whether a cutting has finished\r\n            if (daysCutting == cuttingDuration)\r\n            {\r\n                aCutHasHappened = true;\r\n                daysCutting = -1;\r\n            }\r\n\r\n            // Increase the counter for days after cutting\r\n            if (aCutHasHappened && (daysCutting == 0))\r\n                DaysAfterCut += 1;\r\n        }\r\n\r\n        // Resets the values of all outputs\r\n        private void resetVariables()\r\n        {\r\n            DefoliatedWt = 0.0;\r\n            DefoliatedN = 0.0;\r\n            HarvestedWt = 0.0;\r\n            HarvestedN = 0.0;\r\n            RemovedWt = 0.0;\r\n            RemovedN = 0.0;\r\n            ReturnedWt = 0.0;\r\n            ReturnedN = 0.0;\r\n            NReturnedInDung = 0.0;\r\n            NReturnedInUrine = 0.0;\r\n        }\r\n\r\n        // Description: Perform the basic calculations for defoliation\r\n        public void StartDefoliation(double amountDM, string amountType, int duration)\r\n        {\r\n            // Get the existing plant amount\r\n            existingDM = 0.0;\r\n            PreHarvestDM = 0.0;\r\n            foreach (AgPasture.PastureSpecies species in Pasture)\r\n            {\r\n                PreHarvestDM += species.Standing.Wt;\r\n                existingDM += species.Harvestable.Wt;\r\n            }\r\n            \r\n            // Check the amount to remove and print some info\r\n            if ((amountType == \"SetRemoveAmount\") && (existingDM >= amountDM / duration))\r\n            {\r\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\");\r\n                herbageToRemove = amountDM / duration;\r\n            }\r\n            else if ((amountType == \"SetResidueAmount\") && (existingDM >= amountDM))\r\n            {\r\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\");\r\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\r\n            }\r\n            else\r\n            {\r\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\");\r\n                if (IntervalType == rotationIntervalTypes.FixedInterval)\r\n                    DaysAfterCut = -duration;\r\n                return;\r\n            }\r\n\r\n            // Start defoliation\r\n            cuttingDuration = duration;\r\n            defoliatePasture(herbageToRemove);\r\n            if (ReturnType == returnTypes.AsResidue)\r\n                returnResidues();\r\n            else\r\n                returnExcreta();\r\n                \r\n            daysCutting = 1;\r\n            DaysAfterCut = 0;\r\n            if (daysCutting == cuttingDuration)\r\n            {\r\n                PostHarvestDM = 0.0;\r\n                foreach (AgPasture.PastureSpecies species in Pasture)\r\n                    PostHarvestDM += species.Standing.Wt;\r\n            }\r\n        }\r\n\r\n        // Do the DM removal\r\n        private void defoliatePasture(double removeAmount)\r\n        {\r\n            // Remove a proportion of required DM from each species\r\n            DefoliatedWt = 0.0;\r\n            DefoliatedN = 0.0;\r\n            foreach (AgPasture.PastureSpecies species in Pasture)\r\n            {\r\n                double amountToRemove = removeAmount * species.Harvestable.Wt / existingDM;\r\n                species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\r\n                DefoliatedWt += species.HarvestedWt;\r\n                DefoliatedN += species.HarvestedN;\r\n            }\r\n            \r\n            // total harvested is equal total defoliated, for now\r\n            HarvestedWt = DefoliatedWt;\r\n            HarvestedN = DefoliatedN;\r\n\r\n            // get amounts actually removed from field and that to be returned (dung/urine)\r\n            if (DMRemoveType == removeDMTypes.RemoveAll)\r\n                fractionDM2Remove = 1.0;\r\n            else if (DMRemoveType == removeDMTypes.RemoveNone)\r\n                fractionDM2Remove = 0.0;\r\n            else\r\n            {\r\n                fractionDM2Remove = 0.0;\r\n                foreach (AgPasture.PastureSpecies species in Pasture)\r\n                    fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;\r\n                fractionDM2Remove /= removeAmount;\r\n            }\r\n            \r\n            RemovedWt = HarvestedWt * fractionDM2Remove;\r\n            RemovedN = HarvestedN * FractionN2Remove;\r\n            ReturnedWt = HarvestedWt - RemovedWt;\r\n            ReturnedN = HarvestedN - RemovedN;\r\n\r\n            if (ReturnType == returnTypes.AsDungUrine)\r\n            {\r\n                if (NDungType == dungNContentTypes.DefineProportion)\r\n                    NReturnedInDung = ReturnedN * ProportionN2Dung;\r\n                else\r\n                    NReturnedInDung = Math.Min(ReturnedN, ReturnedWt * 0.4 / CNRatioDung);\r\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\r\n            }\r\n            else\r\n            {\r\n                NReturnedInDung = 0.0;\r\n                NReturnedInUrine = 0.0;\r\n            }\r\n        }\r\n        \r\n        // Return dung and urine\r\n        private void returnExcreta()\r\n        {\r\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\r\n            {\r\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\r\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\r\n                float[] dltdm = new float[] { (Single)ReturnedWt };\r\n                float[] dltn = new float[] { (Single)NReturnedInDung };\r\n                float[] dltp = new float[] { 0 };\r\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\r\n\r\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\r\n                BiomassDung.dm_type = type;\r\n                BiomassDung.dlt_crop_dm = dltdm;\r\n                BiomassDung.dlt_dm_n = dltn;\r\n                BiomassDung.dlt_dm_p = dltp;\r\n                BiomassDung.fraction_to_residue = fraction;\r\n                BiomassRemoved.Invoke(BiomassDung);\r\n            }\r\n\r\n            if (NReturnedInUrine > 0.0)\r\n            {\r\n                double[] myUrineDeposition = new double[nLayers];\r\n                for (int z = 0; z < nLayers; z++)\r\n                    myUrineDeposition[z] = NReturnedInUrine * fractionUrine[z];\r\n\r\n                no3.AddKgHaDelta(SoluteSetterType.Fertiliser, myUrineDeposition);\r\n                //fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\r\n            }\r\n        }\r\n\r\n        // Return pasture residues\r\n        private void returnResidues()\r\n        {\r\n            if ((ReturnedWt > 0.0) || (ReturnedN > 0.0))\r\n            {\r\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\r\n                string[] type = new string[] { \"Grass\" };\r\n                float[] dltdm = new float[] { (Single)ReturnedWt };\r\n                float[] dltn = new float[] { (Single)ReturnedN };\r\n                float[] dltp = new float[] { 0 };\r\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\r\n\r\n                BiomassDung.crop_type = \"Grass\";\r\n                BiomassDung.dm_type = type;\r\n                BiomassDung.dlt_crop_dm = dltdm;\r\n                BiomassDung.dlt_dm_n = dltn;\r\n                BiomassDung.dlt_dm_p = dltp;\r\n                BiomassDung.fraction_to_residue = fraction;\r\n                BiomassRemoved.Invoke(BiomassDung);\r\n            }\r\n        }\r\n        \r\n        // Auxiliary bits and pieces  - - - - - - - - - - - - - - - - - - - - - - - -  - - - - -  - -\r\n\r\n        public enum yesnoType\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n        public enum removeAmountTypes\r\n        {\r\n            /// <summary>Setting DM amount to remove</summary>\r\n            DMToRemove,\r\n            /// <summary>Setting residual DM amount</summary>\r\n            ResidualDM\r\n        }\r\n\r\n        public enum rotationIntervalTypes\r\n        {\r\n            /// <summary>Setting a fixed interval</summary>\r\n            FixedInterval,\r\n            /// <summary>Setting a target (minimum) inteval</summary>\r\n            TargetInterval\r\n        }\r\n\r\n        public enum removeDMTypes\r\n        {\r\n            /// <summary>Remove all DM</summary>\r\n            RemoveAll,\r\n            /// <summary>Remove no DM</summary>\r\n            RemoveNone,\r\n            /// <summary>Remove a fraction based on digestibility</summary>\r\n            BasedOnDigestibility\r\n        }\r\n        \r\n        public enum returnTypes\r\n        {\r\n            /// <summary>Return plant material as residue</summary>\r\n            AsResidue,\r\n            /// <summary>Return meterial as dung and urine</summary>\r\n            AsDungUrine\r\n        }\r\n\r\n        public enum dungNContentTypes\r\n        {\r\n            /// <summary>Define the proportion of N returned as dung</summary>\r\n            DefineProportion,\r\n            /// <summary>Define the C:N of dung</summary>\r\n            DefineCNratio,\r\n        }\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "AllowControl",
                          "Value": "yes"
                        },
                        {
                          "Key": "CutRotationStartDate",
                          "Value": "01/01/1900 00:00:00"
                        },
                        {
                          "Key": "CutRotationEndDate",
                          "Value": "12/31/2100 00:00:00"
                        },
                        {
                          "Key": "IntervalType",
                          "Value": "FixedInterval"
                        },
                        {
                          "Key": "CutInterval",
                          "Value": "21"
                        },
                        {
                          "Key": "DurationOfCut",
                          "Value": "1"
                        },
                        {
                          "Key": "RemoveAmountType",
                          "Value": "ResidualDM"
                        },
                        {
                          "Key": "AmountGiven",
                          "Value": "1000"
                        },
                        {
                          "Key": "DMRemoveType",
                          "Value": "BasedOnDigestibility"
                        },
                        {
                          "Key": "FractionN2Remove",
                          "Value": "0.75"
                        },
                        {
                          "Key": "ReturnType",
                          "Value": "AsDungUrine"
                        },
                        {
                          "Key": "NDungType",
                          "Value": "DefineProportion"
                        },
                        {
                          "Key": "ProportionN2Dung",
                          "Value": "0.4"
                        },
                        {
                          "Key": "CNRatioDung",
                          "Value": "0"
                        },
                        {
                          "Key": "UrineDepth",
                          "Value": "250"
                        }
                      ],
                      "Name": "CutRotation",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Xml.Serialization;\r\nusing Models.Interfaces;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] private Clock Clock;\r\n        [Link] private Fertiliser fertiliser;\r\n        [Link] private ISummary summary;\r\n        [Link] private Soil Soil;\r\n        private DateTime lastApplicationDate;\r\n        private bool fertiliserIsAllowed;\r\n        private int nLayers;\r\n        [Link(ByName = true)]\r\n        private ISolute NO3;\r\n        [Link(ByName = true)]\r\n        private ISolute NH4;\r\n        [Link(ByName = true)]\r\n        private ISolute Urea;\r\n\r\n        //User inputs from properties tab\r\n        [Description(\"Turn ferliser applications on? \")]\r\n        public yesnoType AllowFertiliser { get; set; }\r\n        \r\n        [Description(\"Depth to calculate available soil N (mm): \")]\r\n        public double Depth2SoilN { get; set; }\r\n\r\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\r\n        public double CriticalSoilN { get; set; }\r\n\r\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\r\n        public double FertNAmount { get; set; }\r\n\r\n        [Description(\"Type of N fertiliser to apply: \")]\r\n        public Fertiliser.Types FertType { get; set; }\r\n\r\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\r\n        public double FertApplicationDepth { get; set; }\r\n       \r\n        [Description(\"Minimum period between applications (days): \")]\r\n        public double FertMinimumDays { get; set; }\r\n       \r\n        public enum yesnoType\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n        [XmlIgnore] public double TopMineralN { get; set; }\r\n        \r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\r\n            nLayers = Soil.Thickness.Length;\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\r\n            \r\n            // get the N stored in the soil\r\n            double depthFromSurface = 0.0;\r\n            double fracLayer = 0.0;\r\n            TopMineralN = 0.0;\r\n            for (int layer = 0; layer < nLayers; layer++)\r\n            {\r\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / Soil.Thickness[layer]);\r\n                TopMineralN += (NO3.kgha[layer]\r\n                + NH4.kgha[layer]\r\n                + Urea.kgha[layer])\r\n                * fracLayer;\r\n                depthFromSurface += Soil.Thickness[layer];\r\n                if (depthFromSurface >= Depth2SoilN)\r\n                    layer = nLayers;\r\n            }\r\n\r\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\r\n            {\r\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\r\n                lastApplicationDate = Clock.Today;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "AllowFertiliser",
                          "Value": "yes"
                        },
                        {
                          "Key": "Depth2SoilN",
                          "Value": "500"
                        },
                        {
                          "Key": "CriticalSoilN",
                          "Value": "5"
                        },
                        {
                          "Key": "FertNAmount",
                          "Value": "25"
                        },
                        {
                          "Key": "FertType",
                          "Value": "UreaN"
                        },
                        {
                          "Key": "FertApplicationDepth",
                          "Value": "1"
                        },
                        {
                          "Key": "FertMinimumDays",
                          "Value": "15"
                        }
                      ],
                      "Name": "AutomaticFertiliser",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using System.Linq;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.PMF;\r\nusing Models.Soils.Nutrients;\r\nusing Models.Soils;\r\nusing Models.Core;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock clock;\r\n        [Link] Fertiliser fertiliser;\r\n        [Link] ISummary summary;\r\n        [Link] Soil soil;\r\n\r\n        private Nutrient nutrient;\r\n        private SoilNitrogen soilN;\r\n\r\n        [Separator(\"Fertiliser will be applied on the date(s) below\")]\r\n        [Description(\"Apply fertiliser on the same day(s) each year? If no, then must include the year of appliaction below\")]\r\n        public bool EachYear { get; set; }\r\n\r\n        [Description(\"Dates for one or more fertiliser applications (dd-mmm or dd-mmm-yyyy) as a list with a comma between dates\")]\r\n        public string[] Dates { get; set; }\r\n\r\n        [Separator(\"Test for the mineral N in the soil and don't apply the fertiliser if greater than X kgN/ha is stored in the soil above a depth of Y mm\")]\r\n        [Description(\"Use a critical soil mineral N to prevent application above a threshold?\")]\r\n        public bool UseCritNThreshold { get; set; }\r\n\r\n        [Description(\"Don't add fertiliser if N in the soil to the depth below exceeds (kg/ha)\")]\r\n        public double CritNThreshold { get; set; }\r\n\r\n        [Description(\"Depth to which the amount of N in the soil should be calculated (mm)\")]\r\n        public double CritNDepth { get; set; }\r\n\r\n        [Separator(\"Fertiliser application details\")]\r\n        [Description(\"Depth at which to apply the fertiliser (mm)\")]\r\n        public double Depth { get; set; }\r\n\r\n        [Description(\"Amount of fertiliser to apply (kg N /ha) per application\")]\r\n        public double Amount { get; set; }\r\n\r\n        [Description(\"Fertiliser type - select from the list\")]\r\n        public Fertiliser.Types FertiliserType { get; set; }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void FindSoilNOrNutrient(object sender, EventArgs e)\r\n        {\r\n            nutrient = Apsim.Find(this, typeof(Nutrient)) as Nutrient;\r\n            soilN = Apsim.Find(this, typeof(SoilNitrogen)) as SoilNitrogen;\r\n\r\n            if (nutrient == null && soilN == null)\r\n                throw new Exception(string.Format(\"Error in script {0}: Unable to find nutrient or soilN.\", Name));\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            if (OnApplicationDate())\r\n            {\r\n                if (NContentBelowThreshold())\r\n                    fertiliser.Apply(Amount, FertiliserType, Depth);\r\n                else\r\n                    summary.WriteMessage(this, \"Skipping fertiliser application due to soil mineral N content being above critical threshold.\");\r\n            }\r\n        }\r\n\r\n        /// <summary>Checks if today's date is one of the specified fertiliser application dates.</summary>\r\n        private bool OnApplicationDate()\r\n        {\r\n            if (EachYear)\r\n                return Dates.Any(d => DateUtilities.DatesEqual(d, clock.Today));\r\n            \r\n            DateTime[] dates = Dates.Select(d => DateTime.ParseExact(d, \"d-MMM-yyyy\", null)).ToArray();\r\n            return dates.Any(d => SameDate(d, clock.Today));\r\n        }\r\n\r\n        /// <summary>Checks if N content in soil is below critical threshold.</summary>\r\n        private bool NContentBelowThreshold()\r\n        {\r\n            if (!UseCritNThreshold)\r\n                return true;\r\n            \r\n            double[] weights = GetLayerWeights();\r\n            double cumSoilN = 0;\r\n\r\n            for (int i = 0; i < soil.Thickness.Length; i++)\r\n            {\r\n                if (nutrient != null)\r\n                    cumSoilN += weights[i] * nutrient.MineralN[i];\r\n                else if (soilN != null)\r\n                    cumSoilN += weights[i] * soilN.mineral_n[i];\r\n            }\r\n\r\n            return cumSoilN <= CritNThreshold;\r\n        }\r\n\r\n        private double[] GetLayerWeights()\r\n        {\r\n            double[] weights = new double[soil.Thickness.Length];\r\n            double cumDepth = 0;\r\n\r\n            for (int i = 0; i < soil.Thickness.Length; i++)\r\n            {\r\n                cumDepth += soil.Thickness[i];\r\n                if (cumDepth < CritNDepth)\r\n                    weights[i] = 1;\r\n                else if (cumDepth - soil.Thickness[i] <= CritNDepth)\r\n                    weights[i] = (CritNDepth - (cumDepth - soil.Thickness[i])) / soil.Thickness[i];\r\n                else\r\n                    weights[i] = 0;\r\n            }\r\n\r\n            return weights;\r\n        }\r\n\r\n        private bool SameDate(DateTime d1, DateTime d2)\r\n        {\r\n            return d1.Year == d2.Year && d1.DayOfYear == d2.DayOfYear;\r\n        }\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "EachYear",
                          "Value": "True"
                        },
                        {
                          "Key": "Dates",
                          "Value": "5-jan,5-feb,5-mar,5-apr,5-aug,5-sep,5-oct,5-nov,5-dec"
                        },
                        {
                          "Key": "UseCritNThreshold",
                          "Value": "False"
                        },
                        {
                          "Key": "CritNThreshold",
                          "Value": "50"
                        },
                        {
                          "Key": "CritNDepth",
                          "Value": "75"
                        },
                        {
                          "Key": "Depth",
                          "Value": "50"
                        },
                        {
                          "Key": "Amount",
                          "Value": "25"
                        },
                        {
                          "Key": "FertiliserType",
                          "Value": "UreaN"
                        }
                      ],
                      "Name": "FertiliseOnFixedDates",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using APSIM.Shared.Utilities;\r\nusing System.Xml.Serialization;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Core;\r\nusing System;\r\n\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation Irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil Soil;\r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public bool allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string seasonStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string seasonEnd { get; set; }\r\n        [Description(\"Season allocation (mm)\")]\r\n        public double seasonsAllocation { get; set; }\r\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\r\n        public double triggerDeficit { get; set; }\r\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\r\n        public double targetDeficit { get; set; }\r\n        [Description(\"Minimum days for irrigation to return\")]\r\n        public double returndays { get; set; }\r\n        [Description(\"Maximum irrigation application (mm/day)\")]\r\n        public double maximumAmount { get; set; }\r\n        [Description(\"Depth to calculate PAWC (mm)\")]\r\n        public double depthPAWC { get; set; }\r\n\r\n        //Class members\r\n        [XmlIgnore] public double TopSWdeficit { get; set; }\r\n        [XmlIgnore] public double TopSWC { get; set; }\r\n        [XmlIgnore] public double DaysSinceIrrigation { get; set; }\r\n        [XmlIgnore] public double AmountToApply { get; set; }\r\n        [XmlIgnore] public double SeasonAppliedAmount { get; set; }\r\n        \r\n        private bool IrrigationIsAllowed { get; set; }\r\n        private bool SeasonIsOpen { get; set; }\r\n        private bool CropIsActive { get; set; }\r\n        private bool IrrigatorIsAvailable { get; set; }\r\n        private bool SoilIsDry { get; set; }\r\n\r\n        private DateTime StartDate;\r\n        private DateTime EndDate;\r\n        private double TopDUL;\r\n        private double TopLL;\r\n        private int nLayers;\r\n    \r\n        //Calculate static soil variables\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {   \r\n            //Set the season dates\r\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\r\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\r\n            \r\n            //Can we irrigate at all?\r\n            IrrigationIsAllowed = false; \r\n            if (allowIrrigation)\r\n                IrrigationIsAllowed = true; \r\n\r\n            //Calculate soil water variables\r\n            double depthFromSurface = 0.0;\r\n            double fracLayer = 0.0;\r\n            nLayers = Soil.Thickness.Length;\r\n            for (int layer = 0; layer < nLayers; layer++)\r\n            {\r\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.Thickness[layer]);\r\n                TopLL += Soil.LL15mm[layer] * fracLayer;\r\n                TopDUL += Soil.DULmm[layer] * fracLayer;\r\n                depthFromSurface += Soil.Thickness[layer];\r\n                if (depthFromSurface >= depthPAWC)\r\n                    layer = nLayers;\r\n            }\r\n        }\r\n             \r\n        //Determine daily requirement for irrigation\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            //Can we irrigate today?          \r\n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\r\n\r\n            //Is there a crop in the ground that needs irrigation?\r\n            CropIsActive = false;\r\n            if ((existingCrop != null) && (existingCrop.IsAlive))\r\n                CropIsActive = true;\r\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\r\n          \r\n            //Is the irrigator available?\r\n            IrrigatorIsAvailable = false;\r\n            DaysSinceIrrigation += 1;\r\n            if (DaysSinceIrrigation >= returndays)\r\n                IrrigatorIsAvailable = true;\r\n          \r\n            //Is the soil dry enough to require irrigation?\r\n            SoilIsDry = false;\r\n            double depthFromSurface = 0.0;\r\n            double fracLayer = 0.0;\r\n            TopSWC = 0.0;\r\n            for (int layer = 0; layer < nLayers; layer++)\r\n            //for (int layer = 0; depthFromSurface < depthPAWC + Soil.Thickness[layer]; layer++)\r\n            {\r\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.Thickness[layer]);\r\n                TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;\r\n                depthFromSurface += Soil.Thickness[layer];\r\n                if (depthFromSurface >= depthPAWC)\r\n                    layer = nLayers;\r\n            }\r\n            \r\n            TopSWdeficit = TopSWC - TopDUL;\r\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\r\n                SoilIsDry = true;\r\n                \r\n            //Are all the conditions ratifying irrigation\r\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\r\n            {\r\n                //Lets bloody well irrigate then!!!!\r\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\r\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\r\n                Irrigation.Apply(AmountToApply);\r\n                DaysSinceIrrigation = 0;\r\n                SeasonAppliedAmount += AmountToApply;\r\n            }\r\n        }\r\n        \r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "allowIrrigation",
                          "Value": "True"
                        },
                        {
                          "Key": "seasonStart",
                          "Value": "15-Aug"
                        },
                        {
                          "Key": "seasonEnd",
                          "Value": "30-May"
                        },
                        {
                          "Key": "seasonsAllocation",
                          "Value": "10000"
                        },
                        {
                          "Key": "triggerDeficit",
                          "Value": "75"
                        },
                        {
                          "Key": "targetDeficit",
                          "Value": "99"
                        },
                        {
                          "Key": "returndays",
                          "Value": "1"
                        },
                        {
                          "Key": "maximumAmount",
                          "Value": "30"
                        },
                        {
                          "Key": "depthPAWC",
                          "Value": "300"
                        }
                      ],
                      "Name": "AutomaticIrrigation",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using APSIM.Shared.Utilities;\r\nusing System.Xml.Serialization;\r\nusing Models;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Text;\r\nusing System.Collections.Generic;\r\nusing Models.Core;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock clock;\r\n        [Link] Zone zone;\r\n        [Link] Summary summary;\r\n\r\n        [Separator(\"NOTE - all dates or date strings are entered with comma-separation and no spaces\")]\r\n        [Separator(\"NOTE - this component should be at the bottom of the list of Managers\")]\r\n        [Separator(\"   \")]\r\n        [Separator(\"Example for reporting in particular days but the same days every year\")]\r\n\r\n        //ReportOnSpecificDaysEveryYear\r\n        [Description(\"Name of the Report model for reporting on below dates every year: \")] \r\n        [Display(Type=DisplayType.Model, ModelType = typeof(Report))]\r\n        public Report ReportEveryYear_Name { get; set; } \r\n\r\n        [Description(\"Enter one or more dates (as dd-mmm) for reporting : \")] \r\n        public string[] ReportEveryYear_Dates { get; set; } \r\n\r\n        [Separator(\"Example for reporting on absolute dates\")]\r\n\r\n        [Description(\"Name of the Report model for reporting on completely specified dates: \")] \r\n        [Display(Type=DisplayType.Model, ModelType = typeof(Report))]\r\n        public Report ReportSpecificDates_Name { get; set; } \r\n\r\n        [Description(\"Enter one or more dates (as dd-mmm-yyyy) for reporting : \")] \r\n        public DateTime[] ReportSpecificDates_Dates { get; set; } \r\n\r\n\r\n\r\n        [EventSubscribe(\"DoManagementCalculations\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n\r\n            // example for reporting on irregular dates but the same dates every year\r\n            if (ReportEveryYear_Dates != null)\r\n                foreach (string ddMMM in ReportEveryYear_Dates)\r\n                    if (DateUtilities.DatesEqual(ddMMM, clock.Today))\r\n                        ReportEveryYear_Name.DoOutput();\r\n\r\n            // example for reporting on fully-specified dates that are not necessarily the same dates every year\r\n            if (ReportSpecificDates_Dates != null)\r\n                foreach (DateTime ddMMMyy in ReportSpecificDates_Dates)\r\n                    if (DateUtilities.Equals(ddMMMyy, clock.Today))\r\n                        ReportSpecificDates_Name.DoOutput();\r\n\r\n\r\n\r\n\r\n            /*if (ReportSpecificDates_Dates != null)\r\n            {\r\n                foreach (DateTime ddMMMyy in ReportSpecificDates_Dates)\r\n                {\r\n                    if (DateUtilities.Equals(ddMMMyy, clock.Today))\r\n                    {\r\n                        Models.Report myReport = Apsim.Find(zone, ReportSpecificDates_Name) as Models.Report;\r\n                        if (myReport == null)\r\n                            throw new Exception(string.Format(\"Unable to locate report {0}.\", ReportSpecificDates_Name));\r\n                        myReport.DoOutput();\r\n                    }\r\n                }\r\n            }*/\r\n\r\n        }\r\n        \r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "ReportEveryYear_Name",
                          "Value": "[AnnualReporting]"
                        },
                        {
                          "Key": "ReportEveryYear_Dates",
                          "Value": "30-jun"
                        },
                        {
                          "Key": "ReportSpecificDates_Name",
                          "Value": ""
                        },
                        {
                          "Key": "ReportSpecificDates_Dates",
                          "Value": ""
                        }
                      ],
                      "Name": "ReportHelper",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "soil_albedo": 0.23,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "InitialResidueName": "Sward",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 1000.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": "NZ_Sedimentary",
                      "LocalName": "Lismore",
                      "Site": "Winchmore",
                      "NearestTown": "Ashburton",
                      "Region": "Canterbury",
                      "State": null,
                      "Country": "New Zealand",
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": -48.48,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": [
                            5.0,
                            2.5,
                            1.0,
                            0.75,
                            0.5,
                            0.5,
                            0.5
                          ],
                          "NH4N": [
                            0.1,
                            0.1,
                            0.1,
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "PH": [
                            6.0,
                            6.0,
                            6.0,
                            6.0,
                            6.0,
                            6.0,
                            6.0
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "Name": "Chemical",
                          "Children": [],
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "ParticleSizeClay": [
                            20.0,
                            15.0,
                            12.0,
                            8.0,
                            6.0,
                            5.0,
                            5.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "BD": [
                            1.3,
                            1.35,
                            1.0,
                            0.53,
                            0.31,
                            0.3,
                            0.3
                          ],
                          "AirDry": [
                            0.05,
                            0.12,
                            0.055,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "LL15": [
                            0.15,
                            0.14,
                            0.055,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "DUL": [
                            0.36,
                            0.34,
                            0.19,
                            0.065,
                            0.04,
                            0.03,
                            0.03
                          ],
                          "SAT": [
                            0.45,
                            0.43,
                            0.25,
                            0.15,
                            0.11,
                            0.11,
                            0.11
                          ],
                          "KS": [
                            5000.0,
                            2500.0,
                            3000.0,
                            10000.0,
                            17500.0,
                            20000.0,
                            20000.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.15,
                                0.14,
                                0.06,
                                0.02,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.08,
                                0.04,
                                0.01,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "IncludeInDocumentation": false,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.15,
                                0.14,
                                0.06,
                                0.02,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.08,
                                0.04,
                                0.01,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "IncludeInDocumentation": false,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 2.0,
                          "WinterCona": 2.0,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "Slope": 0.0,
                          "DischargeWidth": 0.0,
                          "CatchmentArea": 0.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "SWCON": [
                            0.5,
                            0.52,
                            0.55,
                            0.6,
                            0.65,
                            0.65,
                            0.65
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "ResourceName": "WaterBalance",
                          "Name": "SoilWater",
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "IncludeInDocumentation": false,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "IncludeInDocumentation": false,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "IncludeInDocumentation": false,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                              "Name": "PlantAvailableNO3",
                              "Children": [],
                              "IncludeInDocumentation": false,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                              "Name": "PlantAvailableNH4",
                              "Children": [],
                              "IncludeInDocumentation": false,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "Carbon": [
                            3.0,
                            1.0,
                            0.6,
                            0.4,
                            0.25,
                            0.15,
                            0.1
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.04,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.5,
                            0.7,
                            0.83,
                            0.9,
                            0.95,
                            0.99,
                            0.99
                          ],
                          "FOM": [
                            331.337020409173,
                            245.46050190550559,
                            164.53709493722965,
                            121.89207790753734,
                            73.931282427002344,
                            40.574348067292682,
                            22.267674346259405
                          ],
                          "Name": "Organic",
                          "Children": [],
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 1,
                          "FractionFull": 0.95,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Sample, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": null,
                          "NH4N": null,
                          "SW": null,
                          "OC": null,
                          "EC": null,
                          "CL": null,
                          "ESP": null,
                          "PH": null,
                          "SWUnits": 0,
                          "OCUnits": 0,
                          "PHUnits": 0,
                          "Name": "Initial nitrogen",
                          "Children": [],
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "CERESSoilTemperature",
                          "Children": [],
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 500.0,
                      "InitialRootDM": 150.0,
                      "InitialRootDepth": 350.0,
                      "ResourceName": "AGPWhiteClover",
                      "Name": "AGPWhiteClover",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "Sum of ([AGPRyegrass].NetGrowthWt + [AGPWhiteClover].NetGrowthWt) from [AnnualReporting].DayAfterLastOutput to [Clock].Today as SumYearlyNetGrowth",
                        "Sum([Soil].SoilNitrogen.TotalC)/1000 as SoilCarbonToday_tonnesPerHa",
                        "Diff of Sum([Soil].SoilNitrogen.TotalC) from [Clock].StartOfSimulation to [Clock].Today as ChangeInSoilCarbon  // this is a duplicate of that below as an example - this is more generic and will be valid if the start date is changed",
                        "Diff of Sum([Soil].SoilNitrogen.TotalC) from 01-jul-1980 to [Clock].Today as ChangeInSoilCarbon1               // the simulation starts on 1-7-80 so this gives the same output as above",
                        "Diff of Sum([Soil].SoilNitrogen.TotalC) from 01-jul to [Clock].Today as AnnualChangeInSoilCarbon"
                      ],
                      "EventNames": [
                        ""
                      ],
                      "GroupByVariableName": null,
                      "Name": "AnnualReporting",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "Sum of ([AGPRyegrass].NetGrowthWt + [AGPWhiteClover].NetGrowthWt) from 1-Jul to [Clock].Today as CumulativeAnnualNetGrowth",
                        "Mean of [Soil].SoilWater.Drainage from [MonthlyReporting].DayAfterLastOutput to [Clock].Today as MeanDrainage_mmPerDay",
                        "Sum of [Soil].SoilWater.LeachNO3 from [MonthlyReporting].DayAfterLastOutput to [Clock].Today as SumLeaching_kgPerHa",
                        "Sum of [Soil].SoilWater.LeachNO3 from 1-Jan to [Clock].Today as CumulativeAnnualLeaching"
                      ],
                      "EventNames": [
                        "[Clock].EndOfMonth"
                      ],
                      "GroupByVariableName": null,
                      "Name": "MonthlyReporting",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[Soil].SoilWater.LeachNO3",
                        "[Soil].SoilWater.Drainage",
                        "Sum([Soil].SoilNitrogen.NO3.kgha)",
                        " "
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "DailyReporting",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Folder, Models",
              "ShowPageOfGraphs": true,
              "Name": "Getting Annual Patterns of Herbage Accumulation",
              "Children": [
                {
                  "$type": "Models.Memo, Models",
                  "Text": "When working with perennial crops that are harvested or grazed frequently, often an output that plots the accumulation of growth during a year is wanted. That output should be zeroed between years. If simulating a site in the Southern Hemisphere, usually the end of the year will be in June or July (winter). Here this is achieved as \"CumulativeAnnualNetGrowth\" using reporting at the end of the month (see in MonthlyReporting) and:\n\n\t\tSum of ([Ryegrass].NetGrowthWt + [WhiteClover].NetGrowthWt) \n\t\t\tfrom 1-Jul to [Clock].Today as CumulativeAnnualNetGrowth\n\nwith the output shown as the orange line below. Note that here it is necessary to calculate the output summing ryegrass and white clover. For comparison, the pattern of accumulation is plotted against the annual total (green line) and that was specified in AnnualReporting using:\n\n\t\tSum of ([Ryegrass].NetGrowthWt + [WhiteClover].NetGrowthWt) \n\t\t\tfrom [AnnualReporting].DayAfterLastOutput to [Clock].Today \n\t\t\tas SumYearlyNetGrowth\n",
                  "Name": "Memo",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Graph, Models",
                  "Caption": null,
                  "Axis": [
                    {
                      "$type": "Models.Axis, Models",
                      "Type": 3,
                      "Title": null,
                      "Inverted": false,
                      "Minimum": "NaN",
                      "Maximum": "NaN",
                      "Interval": "NaN",
                      "DateTimeAxis": true,
                      "CrossesAtZero": false
                    },
                    {
                      "$type": "Models.Axis, Models",
                      "Type": 0,
                      "Title": null,
                      "Inverted": false,
                      "Minimum": 0.0,
                      "Maximum": "NaN",
                      "Interval": "NaN",
                      "DateTimeAxis": false,
                      "CrossesAtZero": false
                    }
                  ],
                  "LegendPosition": 1,
                  "LegendOrientation": 0,
                  "DisabledSeries": [],
                  "LegendOutsideGraph": false,
                  "Name": "Annual Accumulation of Pasture Growth Reported in June",
                  "Children": [
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -1663232,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 1,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "MonthlyReporting",
                      "XFieldName": "Date",
                      "YFieldName": "CumulativeAnnualNetGrowth",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "ReportedMonthly",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -16736653,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 0,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "AnnualReporting",
                      "XFieldName": "Date",
                      "YFieldName": "SumYearlyNetGrowth",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "ReportedAnnually",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Folder, Models",
              "ShowPageOfGraphs": true,
              "Name": "Working with Soil Carbon",
              "Children": [
                {
                  "$type": "Models.Memo, Models",
                  "Text": "When working with soil carbon (or organic nitrogen), gradual changes can hide systematic changes because the totals are so large and while the changes are small, they become important. In this example, using annual reporting only, there are three examples of reporting soil carbon.\n\nThe green line is the total soil carbon and is the most basic output. The specification is:\n\n\t\tSum([Soil].SoilNitrogen.TotalC)/1000 as SoilCarbonToday_tonnesPerHa\nwhere the \"/1000\" converts the standard output from kg /ha to tonnes /ha. The output is plotted against the right-hand axis and shows little change.\n\nThe orange line is the annual **change** in soil carbon (plotted against the left-hand axis) was created using:\n\n\tDiff of Sum([Soil].SoilNitrogen.TotalC) from [Clock].StartOfSimulation \n\t\t\t\tto [Clock].Today as ChangeInSoilCarbon\n\nThis clearly shows that soil carbon is increasing most years but that the increase is diminishing towards the end of the simulation. Note that for this simulation the line could also have been created using:\n\n\tDiff of Sum([Soil].SoilNitrogen.TotalC) \n\t\tfrom 01-jul-1980 to [Clock].Today as ChangeInSoilCarbon\n\nbut the first version is more generic in that if the start date of the simulation is changed it will still be valid. The second version can be more useful where there is an initial spin-up period of several years before changes in soil carbon are of interest. Another form of soil carbon output that can be useful is the change within any year. That (the blue line) shows even more clearly the slow stabilisation of the total carbon and is specified using: \n\n\tDiff of Sum([Soil].SoilNitrogen.TotalC) \n\t\tfrom 01-jul to [Clock].Today as AnnualChangeInSoilCarbon\n",
                  "Name": "Memo",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Graph, Models",
                  "Caption": null,
                  "Axis": [
                    {
                      "$type": "Models.Axis, Models",
                      "Type": 3,
                      "Title": null,
                      "Inverted": false,
                      "Minimum": "NaN",
                      "Maximum": "NaN",
                      "Interval": "NaN",
                      "DateTimeAxis": true,
                      "CrossesAtZero": false
                    },
                    {
                      "$type": "Models.Axis, Models",
                      "Type": 2,
                      "Title": null,
                      "Inverted": false,
                      "Minimum": 0.0,
                      "Maximum": "NaN",
                      "Interval": "NaN",
                      "DateTimeAxis": false,
                      "CrossesAtZero": false
                    },
                    {
                      "$type": "Models.Axis, Models",
                      "Type": 0,
                      "Title": null,
                      "Inverted": false,
                      "Minimum": "NaN",
                      "Maximum": "NaN",
                      "Interval": "NaN",
                      "DateTimeAxis": false,
                      "CrossesAtZero": false
                    }
                  ],
                  "LegendPosition": 1,
                  "LegendOrientation": 0,
                  "DisabledSeries": [],
                  "LegendOutsideGraph": false,
                  "Name": "Change In Soil Carbon",
                  "Children": [
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 2,
                      "ColourArgb": -16736653,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 0,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "AnnualReporting",
                      "XFieldName": "Date",
                      "YFieldName": "SoilCarbonToday_tonnesPerHa",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "TotalC_tonnes",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -1663232,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 1,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "AnnualReporting",
                      "XFieldName": "Date",
                      "YFieldName": "ChangeInSoilCarbon",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "CumulativeChangeInTotalC",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -11094807,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 3,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "AnnualReporting",
                      "XFieldName": "Date",
                      "YFieldName": "AnnualChangeInSoilCarbon",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "AnnualChangeInTotalC",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Folder, Models",
              "ShowPageOfGraphs": true,
              "Name": "Daily and Monthly Leaching",
              "Children": [
                {
                  "$type": "Models.Memo, Models",
                  "Text": "The example below shows daily, monthly, and cumulative annual leaching. The daily output is from \"DailyReporting\" and is simply:\n\n\t\t[Soil].SoilWater.LeachNO3\nThe other two outputs are both calculated in \"MonthlyReporting\" as:\n\n\t\tSum of [Soil].SoilWater.LeachNO3 from [MonthlyReporting].DayAfterLastOutput \n\t\t\tto [Clock].Today as SumLeaching_kgPerHa\nand\n\n\t\tSum of [Soil].SoilWater.LeachNO3 \n\t\t\tfrom 1-Jan to [Clock].Today as CumLeaching_kgPerHa\n\n",
                  "Name": "Memo",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Graph, Models",
                  "Caption": null,
                  "Axis": [
                    {
                      "$type": "Models.Axis, Models",
                      "Type": 3,
                      "Title": null,
                      "Inverted": false,
                      "Minimum": "NaN",
                      "Maximum": "NaN",
                      "Interval": "NaN",
                      "DateTimeAxis": true,
                      "CrossesAtZero": false
                    },
                    {
                      "$type": "Models.Axis, Models",
                      "Type": 0,
                      "Title": null,
                      "Inverted": false,
                      "Minimum": "NaN",
                      "Maximum": "NaN",
                      "Interval": "NaN",
                      "DateTimeAxis": false,
                      "CrossesAtZero": false
                    }
                  ],
                  "LegendPosition": 1,
                  "LegendOrientation": 0,
                  "DisabledSeries": [],
                  "LegendOutsideGraph": false,
                  "Name": "Daily and Monthly Leaching",
                  "Children": [
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -16736653,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 11,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "DailyReporting",
                      "XFieldName": "Date",
                      "YFieldName": "Soil.SoilWater.LeachNO3",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "DailyLeaching",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -1663232,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 11,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "MonthlyReporting",
                      "XFieldName": "Date",
                      "YFieldName": "SumLeaching_kgPerHa",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "MonthlyLeaching",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -16777216,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 1,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "MonthlyReporting",
                      "XFieldName": "Date",
                      "YFieldName": "CumulativeAnnualLeaching",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "Cumulative Annual Leaching",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowPageOfGraphs": true,
          "Name": "Annual Crop Example",
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "In annual cropping simulations, users often want to know the values of outputs only during the period that the crop is in the ground with the outputs summarised over the interval between sowing and harvesting. The examples in this section show how to do this and also show some results that might be unexpected to look out for.\n\nNote this example also shows and example of specifying dates in the report frequency e.g.\n\n\t\t1-jan\n\t\t1-feb\n\t\t1-mar\n\t\t2-jan-1980\n\nSee ReportSpecificDates report model.",
              "Name": "Memo",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Simulation, Models",
              "IsRunning": false,
              "Name": "ContinuousWheatExample",
              "Children": [
                {
                  "$type": "Models.Clock, Models",
                  "Start": "1980-01-01T00:00:00",
                  "End": "1990-12-31T00:00:00",
                  "Name": "Clock",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Summary, Models",
                  "CaptureErrors": true,
                  "CaptureWarnings": true,
                  "CaptureSummaryText": true,
                  "Name": "SummaryFile",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Weather, Models",
                  "FileName": "%root%\\Examples\\WeatherFiles\\Dalby.met",
                  "ExcelWorkSheetName": "",
                  "Name": "Weather",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                  "Name": "SoilArbitrator",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Field",
                  "Children": [
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using APSIM.Shared.Utilities;\r\nusing Models.Utilities;\r\nusing Models.Soils.Nutrients;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Core;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock Clock;\r\n        [Link] Fertiliser Fertiliser;\r\n        [Link] Summary Summary;\r\n        [Link(ByName = true)] Plant Wheat;\r\n        [Link] Soil Soil; \r\n        Accumulator accumulatedRain;\r\n        \r\n        [Description(\"Start of sowing window (d-mmm)\")]\r\n        public string StartDate { get; set;}\r\n        [Description(\"End of sowing window (d-mmm)\")]\r\n        public string EndDate { get; set;}\r\n        [Description(\"Minimum extractable soil water for sowing (mm)\")]\r\n        public double MinESW { get; set;}\r\n        [Description(\"Accumulated rainfall required for sowing (mm)\")]\r\n        public double MinRain { get; set;}\r\n        [Description(\"Duration of rainfall accumulation (d)\")]\r\n        public int RainDays { get; set;}\r\n        [Description(\"Cultivar to be sown\")]\r\n        [Display(Type=DisplayType.CultivarName, PlantName = \"Wheat\")]\r\n        public string CultivarName { get; set;}\r\n        [Description(\"Sowing depth (mm)\")]\r\n        public double SowingDepth { get; set;}        \r\n        [Description(\"Row spacing (mm)\")]\r\n        public double RowSpacing { get; set;}    \r\n        [Description(\"Plant population (/m2)\")]\r\n        public double Population { get; set;}    \r\n        \r\n        \r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n            accumulatedRain = new Accumulator(this, \"[Weather].Rain\", RainDays);\r\n        }\r\n        \r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            accumulatedRain.Update();\r\n            \r\n            if (DateUtilities.WithinDates(StartDate,Clock.Today,EndDate) &&\r\n                !Wheat.IsAlive &&\r\n                MathUtilities.Sum(Soil.SoilWater.ESW) > MinESW &&\r\n                accumulatedRain.Sum > MinRain)\r\n            {\r\n               Wheat.Sow(population:Population, cultivar:CultivarName, depth:SowingDepth, rowSpacing:RowSpacing);    \r\n            }\r\n        \r\n        }\r\n        \r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "StartDate",
                          "Value": "1-may"
                        },
                        {
                          "Key": "EndDate",
                          "Value": "10-jul"
                        },
                        {
                          "Key": "MinESW",
                          "Value": "100"
                        },
                        {
                          "Key": "MinRain",
                          "Value": "25"
                        },
                        {
                          "Key": "RainDays",
                          "Value": "7"
                        },
                        {
                          "Key": "CultivarName",
                          "Value": "Hartog"
                        },
                        {
                          "Key": "SowingDepth",
                          "Value": "30"
                        },
                        {
                          "Key": "RowSpacing",
                          "Value": "250"
                        },
                        {
                          "Key": "Population",
                          "Value": "120"
                        }
                      ],
                      "Name": "Sowing",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using Models.PMF;\r\nusing Models.Core;\r\nusing System;\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock Clock;\r\n        [Link] Fertiliser Fertiliser;\r\n        [Link] Summary Summary;\r\n\r\n        [Description(\"Crop to be fertilised\")]\r\n        public IPlant Crop { get; set; }\r\n\r\n        [Description(\"Type of fertiliser to apply? \")] public Fertiliser.Types FertiliserType { get; set; }\r\n\r\n    \r\n        [Description(\"Amount of fertiliser to be applied (kg/ha)\")]\r\n        public double Amount { get; set; }\r\n        \r\n        [EventSubscribe(\"Sowing\")]\r\n        private void OnSowing(object sender, EventArgs e)\r\n        {\r\n            Model crop = sender as Model;\r\n            if (Crop != null && crop.Name.ToLower() == (Crop as IModel).Name.ToLower())\r\n            {\r\n                Summary.WriteMessage(this, \"Sowing fertilsier\");\r\n                Fertiliser.Apply(Amount: Amount, Type: FertiliserType);\r\n            }\r\n        }\r\n        \r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "Crop",
                          "Value": "[Wheat]"
                        },
                        {
                          "Key": "FertiliserType",
                          "Value": "UreaN"
                        },
                        {
                          "Key": "Amount",
                          "Value": "80"
                        }
                      ],
                      "Name": "Fertilise at sowing",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using APSIM.Shared.Utilities;\r\nusing Models.Utilities;\r\nusing Models.Soils.Nutrients;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Core;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link(ByName = true)] Plant Wheat;\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            if (Wheat.IsReadyForHarvesting)\r\n            {\r\n               Wheat.Harvest();\r\n               Wheat.EndCrop();    \r\n            }\r\n        \r\n        }\r\n        \r\n    }\r\n}\r\n",
                      "Parameters": [],
                      "Name": "Harvest",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using APSIM.Shared.Utilities;\r\nusing System.Xml.Serialization;\r\nusing Models;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Text;\r\nusing System.Collections.Generic;\r\nusing Models.Core;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock clock;\r\n        [Link] Zone zone;\r\n        [Link] Summary summary;\r\n\r\n        [Separator(\"NOTE - all dates or date strings are entered with comma-separation and no spaces\")]\r\n        [Separator(\"NOTE - this component should be at the bottom of the list of Managers\")]\r\n        [Separator(\"   \")]\r\n        [Separator(\"Example for reporting in particular days but the same days every year\")]\r\n\r\n        //ReportOnSpecificDaysEveryYear\r\n        [Description(\"Name of the Report model for reporting on below dates every year: \")] \r\n        [Display(Type=DisplayType.Model, ModelType = typeof(Report))]\r\n        public Report ReportEveryYear_Name { get; set; } \r\n\r\n        [Description(\"Enter one or more dates (as dd-mmm) for reporting : \")] \r\n        public string[] ReportEveryYear_Dates { get; set; } \r\n\r\n        [Separator(\"Example for reporting on absolute dates\")]\r\n\r\n        [Description(\"Name of the Report model for reporting on completely specified dates: \")] \r\n        [Display(Type=DisplayType.Model, ModelType = typeof(Report))]\r\n        public Report ReportSpecificDates_Name { get; set; } \r\n\r\n        [Description(\"Enter one or more dates (as dd-mmm-yyyy) for reporting : \")] \r\n        public DateTime[] ReportSpecificDates_Dates { get; set; } \r\n\r\n\r\n\r\n        [EventSubscribe(\"DoManagementCalculations\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n\r\n            // example for reporting on irregular dates but the same dates every year\r\n            if (ReportEveryYear_Dates != null)\r\n                foreach (string ddMMM in ReportEveryYear_Dates)\r\n                    if (DateUtilities.DatesEqual(ddMMM, clock.Today))\r\n                        ReportEveryYear_Name.DoOutput();\r\n\r\n            // example for reporting on fully-specified dates that are not necessarily the same dates every year\r\n            if (ReportSpecificDates_Dates != null)\r\n                foreach (DateTime ddMMMyy in ReportSpecificDates_Dates)\r\n                    if (DateUtilities.Equals(ddMMMyy, clock.Today))\r\n                        ReportSpecificDates_Name.DoOutput();\r\n\r\n\r\n\r\n\r\n            /*if (ReportSpecificDates_Dates != null)\r\n            {\r\n                foreach (DateTime ddMMMyy in ReportSpecificDates_Dates)\r\n                {\r\n                    if (DateUtilities.Equals(ddMMMyy, clock.Today))\r\n                    {\r\n                        Models.Report myReport = Apsim.Find(zone, ReportSpecificDates_Name) as Models.Report;\r\n                        if (myReport == null)\r\n                            throw new Exception(string.Format(\"Unable to locate report {0}.\", ReportSpecificDates_Name));\r\n                        myReport.DoOutput();\r\n                    }\r\n                }\r\n            }*/\r\n\r\n        }\r\n        \r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "ReportEveryYear_Name",
                          "Value": ""
                        },
                        {
                          "Key": "ReportEveryYear_Dates",
                          "Value": ""
                        },
                        {
                          "Key": "ReportSpecificDates_Name",
                          "Value": ""
                        },
                        {
                          "Key": "ReportSpecificDates_Dates",
                          "Value": ""
                        }
                      ],
                      "Name": "ReportHelper",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "soil_albedo": 0.3,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.PMF.Plant, Models",
                      "ResourceName": "Wheat",
                      "Name": "Wheat",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "InitialResidueName": "wheat_stubble",
                      "InitialResidueType": "wheat",
                      "InitialResidueMass": 500.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 100.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": "Vertosol",
                      "ASCSubOrder": "Black",
                      "SoilType": "Clay",
                      "LocalName": null,
                      "Site": "Norwin",
                      "NearestTown": "Norwin",
                      "Region": "Darling Downs and Granite Belt",
                      "State": "Queensland",
                      "Country": "Australia",
                      "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
                      "ApsoilNumber": "900",
                      "Latitude": -27.581836,
                      "Longitude": 151.320206,
                      "LocationAccuracy": " +/- 20m",
                      "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
                      "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "ParticleSizeClay": null,
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "BD": [
                            1.01056473311131,
                            1.07145631083388,
                            1.09393858528057,
                            1.15861335018721,
                            1.17301160318016,
                            1.16287303586874,
                            1.18749547755906
                          ],
                          "AirDry": [
                            0.130250054518252,
                            0.198689390775399,
                            0.28,
                            0.28,
                            0.28,
                            0.28,
                            0.28
                          ],
                          "LL15": [
                            0.260500109036505,
                            0.248361738469248,
                            0.28,
                            0.28,
                            0.28,
                            0.28,
                            0.28
                          ],
                          "DUL": [
                            0.52100021807301,
                            0.496723476938497,
                            0.488437607673005,
                            0.480296969355493,
                            0.471583596524955,
                            0.457070570557793,
                            0.452331759845006
                          ],
                          "SAT": [
                            0.588654817693846,
                            0.565676863836273,
                            0.557192986686577,
                            0.532787415023694,
                            0.527354112007486,
                            0.531179986464627,
                            0.521888499034317
                          ],
                          "KS": [
                            20.0,
                            20.0,
                            20.0,
                            20.0,
                            20.0,
                            20.0,
                            20.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.261,
                                0.248,
                                0.28,
                                0.306,
                                0.36,
                                0.392,
                                0.446
                              ],
                              "KL": [
                                0.06,
                                0.06,
                                0.06,
                                0.04,
                                0.04,
                                0.02,
                                0.01
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "WheatSoil",
                              "Children": [],
                              "IncludeInDocumentation": false,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 5.0,
                          "SummerCona": 5.0,
                          "WinterDate": "1-Apr",
                          "WinterU": 5.0,
                          "WinterCona": 5.0,
                          "DiffusConst": 40.0,
                          "DiffusSlope": 16.0,
                          "Salb": 0.12,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "Slope": "NaN",
                          "DischargeWidth": "NaN",
                          "CatchmentArea": "NaN",
                          "Thickness": [
                            150.0,
                            150.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "SWCON": [
                            0.3,
                            0.3,
                            0.3,
                            0.3,
                            0.3,
                            0.3,
                            0.3
                          ],
                          "KLAT": null,
                          "ResourceName": "WaterBalance",
                          "Name": "SoilWater",
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "Carbon": [
                            1.2,
                            0.96,
                            0.6,
                            0.3,
                            0.18,
                            0.12,
                            0.12
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.04,
                            0.02,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "FInert": [
                            0.4,
                            0.6,
                            0.8,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "FOM": [
                            347.12903231275641,
                            270.3443621919937,
                            163.97214434990104,
                            99.454132887040629,
                            60.321980831124677,
                            36.587130828674873,
                            22.1912165985086
                          ],
                          "Name": "Organic",
                          "Children": [],
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "NH4N": [
                            0.1,
                            0.1,
                            0.1,
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "PH": [
                            8.0,
                            8.0,
                            8.0,
                            8.0,
                            8.0,
                            8.0,
                            8.0
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "Name": "Chemical",
                          "Children": [],
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 1,
                          "FractionFull": 1.0,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "InitialWater",
                          "Children": [],
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Sample, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": null,
                          "NH4N": null,
                          "SW": [
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN"
                          ],
                          "OC": [
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN"
                          ],
                          "EC": [
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN"
                          ],
                          "CL": [
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN"
                          ],
                          "ESP": [
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN"
                          ],
                          "PH": [
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN",
                            "NaN"
                          ],
                          "SWUnits": 0,
                          "OCUnits": 0,
                          "PHUnits": 0,
                          "Name": "InitialN",
                          "Children": [],
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "CERESSoilTemperature",
                          "Children": [],
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Nutrients.Nutrient, Models",
                          "ResourceName": "Nutrient",
                          "Name": "Nutrient",
                          "IncludeInDocumentation": false,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[Clock].Today.Year as Year",
                        "Sum of [Weather].Rain from [Wheat].Sowing to [Wheat].Harvesting as InCropRainfall",
                        "Sum of [Weather].Rain from 1-Jan to [Clock].Today as AllYearRainfall",
                        "Mean of Sum([Soil].SoilWater.SWmm) from [Wheat].Sowing to [Wheat].Harvesting as InCropMeanSoilWater",
                        "Mean of Sum([Soil].SoilWater.SWmm[:3]) from [Wheat].Sowing to [Wheat].Harvesting as InCropMeanSoilWaterTopThreeLayers",
                        "Mean of Sum([Soil].SoilWater.SWmm[:3]) from [Wheat].Sowing to [Wheat].Flowering as VegetativeMeanSoilWaterTopThreeLayers",
                        "Mean of Sum([Soil].SoilWater.SWmm[:3]) from [Wheat].Flowering to [Wheat].Harvesting as ReproductiveMeanSoilWaterTopThreeLayers",
                        "Max of ([Wheat].Grain.Wt * 10000 / 1000) from [Wheat].Sowing to [Wheat].Harvesting as FinalYield_kg_Ha // * 10000 / 1000 to convert from g/m2 to kg/ha",
                        "Max of ([Wheat].Grain.Wt * 10000 / 1000) from [ReportInCropAnnually].DayAfterLastOutput to [Wheat].Harvesting as FinalYield_kg_Ha_v1 "
                      ],
                      "EventNames": [
                        "[Clock].EndOfYear"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ReportInCropAnnually",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[Clock].Today.Year as Year",
                        "([Wheat].Grain.Wt * 10000 / 1000) as HarvestedYield_kg_Ha"
                      ],
                      "EventNames": [
                        "[Wheat].Harvesting"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ReportGrainOnHarvesting",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[Clock].Today.Year as Year",
                        "([Wheat].Grain.Wt * 10000 / 1000) as Grain_kg_Ha_Daily // * 10000 / 1000 to convert from g/m2 to kg/ha"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ReportGrainDaily",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[Clock].Today.Year as Year",
                        "([Wheat].Grain.Wt * 10000 / 1000) as Grain_kg_Ha_Daily // * 10000 / 1000 to convert from g/m2 to kg/ha"
                      ],
                      "EventNames": [
                        "1-jan",
                        "1-feb",
                        "1-mar",
                        "2-jan-1980"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ReportSpecificDates",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Folder, Models",
              "ShowPageOfGraphs": true,
              "Name": "Comparing Rainfall during the Crop and All Year",
              "Children": [
                {
                  "$type": "Models.Memo, Models",
                  "Text": "The example below shows, for each calendar year, the amount of rain that fell when the crop was in the ground as compared to the annual rainfall. The Report frequency in \"ReportInCropAnnually\" is {Clock].EndOfYear and the output specifications are:\n\t\n\t\tSum of [Weather].Rain from [Wheat].Sowing \n\t\t\tto [Wheat].Harvesting as InCropRainfall\n\n\t\tSum of [Weather].Rain from 1-Jan to \n\t\t\t[Clock].Today as AllYearRainfall\n",
                  "Name": "Memo",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Graph, Models",
                  "Caption": null,
                  "Axis": [
                    {
                      "$type": "Models.Axis, Models",
                      "Type": 3,
                      "Title": null,
                      "Inverted": false,
                      "Minimum": "NaN",
                      "Maximum": "NaN",
                      "Interval": "NaN",
                      "DateTimeAxis": true,
                      "CrossesAtZero": false
                    },
                    {
                      "$type": "Models.Axis, Models",
                      "Type": 0,
                      "Title": null,
                      "Inverted": false,
                      "Minimum": "NaN",
                      "Maximum": "NaN",
                      "Interval": "NaN",
                      "DateTimeAxis": false,
                      "CrossesAtZero": false
                    }
                  ],
                  "LegendPosition": 1,
                  "LegendOrientation": 0,
                  "DisabledSeries": [],
                  "LegendOutsideGraph": false,
                  "Name": "Rainfall during Crop and All Year",
                  "Children": [
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -16736653,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 11,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "ReportInCropAnnually",
                      "XFieldName": "Date",
                      "YFieldName": "InCropRainfall",
                      "X2FieldName": "AllYearRainfall",
                      "Y2FieldName": "Date",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "Rainfall from sowing to harvest",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -1663232,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 11,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "ReportInCropAnnually",
                      "XFieldName": "Date",
                      "YFieldName": "AllYearRainfall",
                      "X2FieldName": "AllYearRainfall",
                      "Y2FieldName": "Date",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "Rainfall all year",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Folder, Models",
              "ShowPageOfGraphs": true,
              "Name": "Soil Water storage during the Cropping Phase",
              "Children": [
                {
                  "$type": "Models.Memo, Models",
                  "Text": "The next example also uses outputs from \"ReportInCropAnnually\" and shows how to get information about soil conditions during the crop. The output specification:\n\n\t\tMean of Sum([Soil].SoilWater.SWmm) from [Wheat].Sowing \n\t\t\tto [Wheat].Harvesting as InCropMeanSoilWater\ngives the whole-soil profile soil water storage as a mean while the crop is in the ground. The output is reported at the end of the year but is for the period from sowing to harvesting only. If the interest is only in the water storage in the top three layers then the specification would be:\n\n\t\tMean of Sum([Soil].SoilWater.SWmm[:3]) from [Wheat].Sowing \n\t\t\tto [Wheat].Harvesting as InCropMeanSoilWaterTopThreeLayers\nand that produces the black line in the figure below. If the interest was in the water storage during the vegetative stages compared to the reproductive stages then:\n\n\t\tMean of Sum([Soil].SoilWater.SWmm[:3]) from [Wheat].Sowing \n\t\t\tto [Wheat].Flowering as VegetativeMeanSoilWaterTopThreeLayers\nand\n\n\t\tMean of Sum([Soil].SoilWater.SWmm[:3]) from [Wheat].Flowering \n\t\t\tto [Wheat].Harvesting as ReproductiveMeanSoilWaterTopThreeLayers\nproduce the green and red lines to show that there was less water storage during the reproductive stages. Of course other types of aggregation could be reported such as the difference durign the phases, min/max etc.\n",
                  "Name": "Memo",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Graph, Models",
                  "Caption": null,
                  "Axis": [
                    {
                      "$type": "Models.Axis, Models",
                      "Type": 3,
                      "Title": null,
                      "Inverted": false,
                      "Minimum": "NaN",
                      "Maximum": "NaN",
                      "Interval": "NaN",
                      "DateTimeAxis": true,
                      "CrossesAtZero": false
                    },
                    {
                      "$type": "Models.Axis, Models",
                      "Type": 0,
                      "Title": null,
                      "Inverted": false,
                      "Minimum": "NaN",
                      "Maximum": "NaN",
                      "Interval": "NaN",
                      "DateTimeAxis": false,
                      "CrossesAtZero": false
                    }
                  ],
                  "LegendPosition": 1,
                  "LegendOrientation": 0,
                  "DisabledSeries": [],
                  "LegendOutsideGraph": false,
                  "Name": "Soil water stroage",
                  "Children": [
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -3376729,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 11,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "ReportInCropAnnually",
                      "XFieldName": "Date",
                      "YFieldName": "InCropMeanSoilWater",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "Full soil profile",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -16777216,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 11,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "ReportInCropAnnually",
                      "XFieldName": "Date",
                      "YFieldName": "InCropMeanSoilWaterTopThreeLayers",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "Top three layers all crop",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -16736653,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 11,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "ReportInCropAnnually",
                      "XFieldName": "Date",
                      "YFieldName": "VegetativeMeanSoilWaterTopThreeLayers",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "Top three layers vegetative",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -3376729,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 11,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "ReportInCropAnnually",
                      "XFieldName": "Date",
                      "YFieldName": "ReproductiveMeanSoilWaterTopThreeLayers",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "Top three layers reproductive",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Folder, Models",
              "ShowPageOfGraphs": true,
              "Name": "Reporting Yield and When Things Can Seem to Go Wrong",
              "Children": [
                {
                  "$type": "Models.Memo, Models",
                  "Text": "The Report model is a powerful and very useful component to get the information needed from the simulation - but there are some traps that should be noted.\n\nThe example below is primarily based on \"ReportInCropAnnually\" which has a reporting frequency of [Clock].EndOfYear. That Report uses an output specification of: \n\n\t\t\tMax of ([Wheat].Grain.Wt * 10000 / 1000) from [Wheat].Sowing \n\t\t\t\tto [Wheat].Harvesting as FinalYield_kg_Ha \n\t\t\t\t// * 10000 / 1000 to convert from g/m2 to kg/ha\n(note that the double slash, //, denotes a comment which is shown in green in the user interface). This produces the green line in the figure below. It is immediately noticeable that the yeild in late 1984 was exactly the same as the previous year - this should raise red flags. Alternative outputs that might be expected to give the same values are:\n\n\t\t\tMax of ([Wheat].Grain.Wt * 10000 / 1000) \n\t\t\t\tfrom [ReportInCropAnnually].DayAfterLastOutput \n\t\t\t\tto [Wheat].Harvesting as FinalYield_kg_Ha_v1 \nalso at a reporting frequency of [Clock].EndOfYear (the black line), or\n\n\t\t\t([Wheat].Grain.Wt * 10000 / 1000) as HarvestedYield_kg_Ha\nwith a reporting frequency of [Wheat].Harvesting which produced the orange line (see ReportGrainOnHarvesting), or for more detail report the same output on a daily basis (see ReportGrainDaily) which is the blue line. \n\nThe additional reporting clearly shows that there was no grain yield in 1984 and further investigation (the summary file) shows that there was no crop sown because the sowing conditions were not met. The apparent yield in the green line is not an error in Report but is a result of the specification in combination with the possibility that there will not be a crop every year. When Report does its work at the end of 1984 it outputs the maximum grain yield from the last sowing event to the last harvesting event from the Wheat model - and these were the ones from 1983. This has also affected the green line in Section 5.2.1 and all the lines in 5.2.2 but they were not so immediately obvious. The salient message is to consider the output specifications within the context of the management conditions in the simulation.\n\n\n\n",
                  "Name": "Memo",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Graph, Models",
                  "Caption": null,
                  "Axis": [
                    {
                      "$type": "Models.Axis, Models",
                      "Type": 3,
                      "Title": null,
                      "Inverted": false,
                      "Minimum": "NaN",
                      "Maximum": "NaN",
                      "Interval": "NaN",
                      "DateTimeAxis": true,
                      "CrossesAtZero": false
                    },
                    {
                      "$type": "Models.Axis, Models",
                      "Type": 0,
                      "Title": null,
                      "Inverted": false,
                      "Minimum": "NaN",
                      "Maximum": "NaN",
                      "Interval": "NaN",
                      "DateTimeAxis": false,
                      "CrossesAtZero": false
                    }
                  ],
                  "LegendPosition": 1,
                  "LegendOrientation": 0,
                  "DisabledSeries": [],
                  "LegendOutsideGraph": false,
                  "Name": "Final and Harvested Yield",
                  "Children": [
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -1663232,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 3,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "ReportGrainOnHarvesting",
                      "XFieldName": "Date",
                      "YFieldName": "HarvestedYield_kg_Ha",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "Harvested Yield",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -16736653,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 11,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "ReportInCropAnnually",
                      "XFieldName": "Date",
                      "YFieldName": "FinalYield_kg_Ha",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "Final Yield with Error",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -16777216,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 11,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "ReportInCropAnnually",
                      "XFieldName": "Date",
                      "YFieldName": "FinalYield_kg_Ha_v1",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "Final Yield Corrected",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Series, Models",
                      "Type": 1,
                      "XAxis": 3,
                      "YAxis": 0,
                      "ColourArgb": -11094807,
                      "FactorToVaryColours": null,
                      "FactorToVaryMarkers": null,
                      "FactorToVaryLines": null,
                      "Marker": 11,
                      "MarkerSize": 0,
                      "Line": 0,
                      "LineThickness": 0,
                      "TableName": "ReportGrainDaily",
                      "XFieldName": "Date",
                      "YFieldName": "Grain_kg_Ha_Daily",
                      "X2FieldName": "",
                      "Y2FieldName": "",
                      "ShowInLegend": true,
                      "IncludeSeriesNameInLegend": true,
                      "Cumulative": false,
                      "CumulativeX": false,
                      "Filter": null,
                      "Name": "Grain Daily Report",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowPageOfGraphs": true,
      "Name": "Grouping",
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "Report has the ability to produce temporally aggregated variables grouped by another variable. The example in this section has two contrasting reports that summerise variables seaasonally in 2 different ways.\n\n1. The first report (SeasonalOverall) temporally aggregates from start to end of simulation and has a reporting frequency of end of simulation. It also has a 'Group By' of [Weather].Season which, at the end of the simulation, will split each variable into values for each season resulting in multpile rows of output, one for each season (4 rows of output).\n\n2. The second report (SeasonalByYear) has multiple reporting frequencies, one for each end of season. This produces a year x season output table.\n\n**The group by keyword**\n\nTo use the 'Group By' capability, variables need to be aggregated like this:\n\n\t\tfrom [Clock].StartOfSimulation to [Clock].EndOfSimulation\n\nThe reporting frequency must be:\n\n\t\t[Clock].EndOfSimulation\n\nThe 'Group By' variable can be any APSIM variable e.g.\n\n\t\t[Clock].Today.Month\n\t\t[Weather].Season \n\n**The on keyword**\n\nThis simulation also introduces the *on* keyword. This keyword changes the timing of variable collection. By default (as in SeasonalByYear report), the values of variables are collected at the end of each day. When the variable is *[AGPWhiteClover].HarvestedWt* this results in a lot of zeros being collected because HarvestedWt is zero every day except when there is a harvest. This makes the mean calculation very low as it has a lot of zero values for HarvestedWt.\n\nIn the *SeasonalByYearWithOnKeyword* report the *on* keyword is used to specify that the values for HarvestedWt should be collected whenever there is a *[SimpleGrazing].Grazed* event. In other words, a value for HarvestedWt is only collected whenever there is a harvest. Note how the mean values are much higher than the previous report. \n\n",
          "Name": "Memo",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Simulation, Models",
          "IsRunning": false,
          "Name": "Seasonal",
          "Children": [
            {
              "$type": "Models.Clock, Models",
              "Start": "1972-01-01T00:00:00",
              "End": "1973-12-31T00:00:00",
              "Name": "Clock",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Weather, Models",
              "FileName": "%root%\\Examples\\WeatherFiles\\VCS_Ruakura.met",
              "ExcelWorkSheetName": "",
              "Name": "Weather",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using APSIM.Shared.Utilities;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Core;\r\nusing System.Xml.Serialization;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        // - Links to APSIM models\r\n        [Link] Zone zone;\r\n        [Link] Clock Clock;\r\n        [Link] Weather Weather;\r\n        [Link] ISummary summary = null;\r\n\r\n        // - Paramters for this manager\r\n        [Description(\"Enable? Set to 'No' to completely disable this manager\")] public yesnoType AllowControl { get; set; }\r\n\r\n        [Separator(\"General settings\")]\r\n        [Description(\"Start the climate controls beginning on date (dd/mmm/yyyy): \")] public DateTime EnableDate { get; set; }\r\n        [Description(\"Implement climate control only during part of the year?\")] public yesnoType WithinYearControl { get; set; }\r\n        [Description(\"Within each year, the first day to start the climate controls is (dd-mmm)\")] public string ControlStart { get; set; }\r\n        [Description(\"Within each year, end last day of climate control is (dd-mmm)\")] public string ControlEnd { get; set; }\r\n\r\n        [Separator(\"Rainfall\")]\r\n        [Description(\"Rainfall multiplier (-): \")] public double RainfallMultiplier { get; set; }\r\n        [Description(\"Rainfall addition (mm): \")] public double RainfallAddition { get; set; }\r\n\r\n        [Separator(\"Radiation\")]\r\n        [Description(\"Radiation multiplier (-): \")] public double RadiationMultiplier { get; set; }\r\n        [Description(\"Radiation addition (MJ/m2): \")] public double RadiationAddition { get; set; }\r\n\r\n        [Separator(\"Minimum temperature\")]\r\n        [Description(\"Minimum temperature multiplier (-): \")] public double MinTMultiplier { get; set; }\r\n        [Description(\"Minimum temperature addition (C): \")] public double MinTAddition { get; set; }\r\n\r\n        [Separator(\"Maximum temperature\")]\r\n        [Description(\"Maximum temperature multiplier (-): \")] public double MaxTMultiplier { get; set; }\r\n        [Description(\"Maximum temperature addition (C): \")] public double MaxTAddition { get; set; }\r\n\r\n        [Separator(\"Wind speed\")]\r\n        [Description(\"Wind speed multiplier (-): \")] public double WindMultiplier { get; set; }\r\n        [Description(\"Wind speed addition (m/s): \")] public double WindAddition { get; set; }\r\n\r\n        [Separator(\"Vapour pressure\")]\r\n        [Description(\"Vapour pressure multiplier (-): \")] public double VPMultiplier { get; set; }\r\n        [Description(\"Vapour pressure addition (hPa): \")] public double VPAddition { get; set; }\r\n\r\n        [XmlIgnore] public string Message { get; set; }\r\n\r\n        [XmlIgnore] public bool doControl { get; set; }\r\n        [XmlIgnore] public int doControlInt { get; set; }\r\n        //public DateTime ControlStartDate { get; set; }\r\n        //public DateTime ControlEndDate { get; set; }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")] private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {   \r\n            //Set the dates\r\n            //ControlStartDate = DateTime.Parse(ControlStart + \"-\" + Clock.Today.Year.ToString());\r\n            //ControlEndDate = DateTime.Parse(ControlEnd + \"-\" + Clock.Today.Year.ToString());\r\n            Message = \"\";\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"PreparingNewWeatherData\")] private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            // Check if this manager is enabled\r\n            if ((AllowControl == yesnoType.yes) && (Clock.Today >= EnableDate))\r\n            {\r\n                doControl = true;\r\n                if (WithinYearControl == yesnoType.yes)\r\n                    doControl = DateUtilities.WithinDates(ControlStart, Clock.Today, ControlEnd); \r\n            }\r\n\r\n            if (doControl)\r\n                doControlInt = 1;\r\n            else\r\n                doControlInt = 0;\r\n\r\n            if (doControl)\r\n            {\r\n                // do the weather alterations \r\n                Weather.Rain = RainfallMultiplier * Weather.Rain + RainfallAddition;\r\n                Weather.Radn = RadiationMultiplier * Weather.Radn + RadiationAddition;\r\n                Weather.MinT = MinTMultiplier * Weather.MinT + MinTAddition;\r\n                Weather.MaxT = MaxTMultiplier * Weather.MaxT + MaxTAddition;\r\n                Weather.Wind = WindMultiplier * Weather.Wind + WindAddition;\r\n                Weather.VP = VPMultiplier * Weather.VP + VPAddition;\r\n            }\r\n        }\r\n\r\n        public enum yesnoType\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "AllowControl",
                  "Value": "no"
                },
                {
                  "Key": "EnableDate",
                  "Value": "05/30/1979 00:00:00"
                },
                {
                  "Key": "WithinYearControl",
                  "Value": "no"
                },
                {
                  "Key": "ControlStart",
                  "Value": "01-jan"
                },
                {
                  "Key": "ControlEnd",
                  "Value": "31-dec"
                },
                {
                  "Key": "RainfallMultiplier",
                  "Value": "0.7791"
                },
                {
                  "Key": "RainfallAddition",
                  "Value": "0"
                },
                {
                  "Key": "RadiationMultiplier",
                  "Value": "1"
                },
                {
                  "Key": "RadiationAddition",
                  "Value": "0"
                },
                {
                  "Key": "MinTMultiplier",
                  "Value": "0.9484"
                },
                {
                  "Key": "MinTAddition",
                  "Value": "0"
                },
                {
                  "Key": "MaxTMultiplier",
                  "Value": "0.9484"
                },
                {
                  "Key": "MaxTAddition",
                  "Value": "0"
                },
                {
                  "Key": "WindMultiplier",
                  "Value": "1"
                },
                {
                  "Key": "WindAddition",
                  "Value": "0"
                },
                {
                  "Key": "VPMultiplier",
                  "Value": "1"
                },
                {
                  "Key": "VPAddition",
                  "Value": "0"
                }
              ],
              "Name": "ClimateController",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Summary, Models",
              "CaptureErrors": true,
              "CaptureWarnings": true,
              "CaptureSummaryText": true,
              "Name": "Summary",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
              "Name": "SoilArbitrator",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 0.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "soil_albedo": 0.23,
              "SoilHeatFluxFraction": 0.4,
              "MinimumHeightDiffForNewLayer": 0.0,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Zone, Models",
              "Area": 1.0,
              "Slope": 0.0,
              "AspectAngle": 0.0,
              "Altitude": 50.0,
              "Name": "Field",
              "Children": [
                {
                  "$type": "Models.Manager, Models",
                  "Code": "using APSIM.Shared.Utilities;\r\nusing System.Xml.Serialization;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Core;\r\nusing System;\r\n\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation Irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil Soil;\r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public bool allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string seasonStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string seasonEnd { get; set; }\r\n        [Description(\"Season allocation (mm)\")]\r\n        public double seasonsAllocation { get; set; }\r\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\r\n        public double triggerDeficit { get; set; }\r\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\r\n        public double targetDeficit { get; set; }\r\n        [Description(\"Minimum days for irrigation to return\")]\r\n        public double returndays { get; set; }\r\n        [Description(\"Maximum irrigation application (mm/day)\")]\r\n        public double maximumAmount { get; set; }\r\n        [Description(\"Depth to calculate PAWC (mm)\")]\r\n        public double depthPAWC { get; set; }\r\n\r\n        //Class members\r\n        [XmlIgnore] public double TopSWdeficit { get; set; }\r\n        [XmlIgnore] public double TopSWC { get; set; }\r\n        [XmlIgnore] public double DaysSinceIrrigation { get; set; }\r\n        [XmlIgnore] public double AmountToApply { get; set; }\r\n        [XmlIgnore] public double SeasonAppliedAmount { get; set; }\r\n        \r\n        private bool IrrigationIsAllowed { get; set; }\r\n        private bool SeasonIsOpen { get; set; }\r\n        private bool CropIsActive { get; set; }\r\n        private bool IrrigatorIsAvailable { get; set; }\r\n        private bool SoilIsDry { get; set; }\r\n\r\n        private DateTime StartDate;\r\n        private DateTime EndDate;\r\n        private double TopDUL;\r\n        private double TopLL;\r\n        private int nLayers;\r\n    \r\n        //Calculate static soil variables\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {   \r\n            //Set the season dates\r\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\r\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\r\n            \r\n            //Can we irrigate at all?\r\n            IrrigationIsAllowed = false; \r\n            if (allowIrrigation)\r\n                IrrigationIsAllowed = true; \r\n\r\n            //Calculate soil water variables\r\n            double depthFromSurface = 0.0;\r\n            double fracLayer = 0.0;\r\n            nLayers = Soil.Thickness.Length;\r\n            for (int layer = 0; layer < nLayers; layer++)\r\n            {\r\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.Thickness[layer]);\r\n                TopLL += Soil.LL15mm[layer] * fracLayer;\r\n                TopDUL += Soil.DULmm[layer] * fracLayer;\r\n                depthFromSurface += Soil.Thickness[layer];\r\n                if (depthFromSurface >= depthPAWC)\r\n                    layer = nLayers;\r\n            }\r\n        }\r\n             \r\n        //Determine daily requirement for irrigation\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            //Can we irrigate today?          \r\n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\r\n\r\n            //Is there a crop in the ground that needs irrigation?\r\n            CropIsActive = false;\r\n            if ((existingCrop != null) && (existingCrop.IsAlive))\r\n                CropIsActive = true;\r\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\r\n          \r\n            //Is the irrigator available?\r\n            IrrigatorIsAvailable = false;\r\n            DaysSinceIrrigation += 1;\r\n            if (DaysSinceIrrigation >= returndays)\r\n                IrrigatorIsAvailable = true;\r\n          \r\n            //Is the soil dry enough to require irrigation?\r\n            SoilIsDry = false;\r\n            double depthFromSurface = 0.0;\r\n            double fracLayer = 0.0;\r\n            TopSWC = 0.0;\r\n            for (int layer = 0; layer < nLayers; layer++)\r\n            //for (int layer = 0; depthFromSurface < depthPAWC + Soil.Thickness[layer]; layer++)\r\n            {\r\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / Soil.Thickness[layer]);\r\n                TopSWC += Soil.SoilWater.SWmm[layer] * fracLayer;\r\n                depthFromSurface += Soil.Thickness[layer];\r\n                if (depthFromSurface >= depthPAWC)\r\n                    layer = nLayers;\r\n            }\r\n            \r\n            TopSWdeficit = TopSWC - TopDUL;\r\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\r\n                SoilIsDry = true;\r\n                \r\n            //Are all the conditions ratifying irrigation\r\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\r\n            {\r\n                //Lets bloody well irrigate then!!!!\r\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\r\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\r\n                Irrigation.Apply(AmountToApply);\r\n                DaysSinceIrrigation = 0;\r\n                SeasonAppliedAmount += AmountToApply;\r\n            }\r\n        }\r\n        \r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n    }\r\n}\r\n",
                  "Parameters": [
                    {
                      "Key": "allowIrrigation",
                      "Value": "False"
                    },
                    {
                      "Key": "seasonStart",
                      "Value": "15-Aug"
                    },
                    {
                      "Key": "seasonEnd",
                      "Value": "30-May"
                    },
                    {
                      "Key": "seasonsAllocation",
                      "Value": "10000"
                    },
                    {
                      "Key": "triggerDeficit",
                      "Value": "50"
                    },
                    {
                      "Key": "targetDeficit",
                      "Value": "99"
                    },
                    {
                      "Key": "returndays",
                      "Value": "1"
                    },
                    {
                      "Key": "maximumAmount",
                      "Value": "30"
                    },
                    {
                      "Key": "depthPAWC",
                      "Value": "300"
                    }
                  ],
                  "Name": "AutomaticIrrigation",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Operations, Models",
                  "Operation": null,
                  "Name": "IrrigationSchedule",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.SimpleGrazing, Models",
                  "GrazingRotationType": 0,
                  "SimpleGrazingFrequencyString": null,
                  "SimpleMinGrazable": 2000.0,
                  "SimpleGrazingResidual": 1000.0,
                  "PreGrazeDMArray": [
                    1000.0,
                    1000.0,
                    1000.0,
                    1000.0,
                    1000.0,
                    1000.0,
                    1000.0,
                    1000.0,
                    1000.0,
                    1000.0,
                    1000.0,
                    1000.0
                  ],
                  "PostGrazeDMArray": [
                    2000.0,
                    2000.0,
                    2000.0,
                    2000.0,
                    2000.0,
                    2000.0,
                    2000.0,
                    2000.0,
                    2000.0,
                    2000.0,
                    2000.0,
                    2000.0
                  ],
                  "FlexibleExpressionForTimingOfGrazing": null,
                  "FlexibleGrazePostDM": 0.0,
                  "MaximumRotationLengthArray": null,
                  "MinimumRotationLengthArray": null,
                  "NoGrazingStartString": "01-jun",
                  "NoGrazingEndString": "15-sep",
                  "FractionDefoliatedNToSoil": [
                    0.25
                  ],
                  "FractionExcretedNToDung": [
                    0.6
                  ],
                  "CNRatioDung": "NaN",
                  "DepthUrineIsAdded": 250.0,
                  "FractionPopulationDecline": 0.0,
                  "TramplingOn": false,
                  "MaximumPropLitterMovedToSoil": 0.1,
                  "PastureConsumedAtMaximumRateOfLitterRemoval": 1200.0,
                  "Name": "SimpleGrazing",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Irrigation, Models",
                  "Name": "Irrigation",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Fertiliser, Models",
                  "Name": "Fertiliser",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                  "InitialResidueName": "Sward",
                  "InitialResidueType": "grass",
                  "InitialResidueMass": 1000.0,
                  "InitialStandingFraction": 0.0,
                  "InitialCPR": 0.0,
                  "InitialCNR": 15.0,
                  "ResourceName": "SurfaceOrganicMatter",
                  "Name": "SurfaceOrganicMatter",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Soil, Models",
                  "RecordNumber": 0,
                  "ASCOrder": null,
                  "ASCSubOrder": null,
                  "SoilType": "Umbric Andosol (ANu)",
                  "LocalName": null,
                  "Site": null,
                  "NearestTown": null,
                  "Region": null,
                  "State": null,
                  "Country": "New Zealan",
                  "NaturalVegetation": null,
                  "ApsoilNumber": null,
                  "Latitude": -37.967,
                  "Longitude": 175.767,
                  "LocationAccuracy": null,
                  "DataSource": "Romero, C.C., Hoogenboom, G., Baigorria, G.A., Koo, J., Gijsman, A.J., Wood, S., 2012. Reanalysis of a global soil database for crop and environmental modeling. Environmental Modelling & Software 35, 163-170.  https://harvestchoice.wufoo.com/forms/download-wisol.",
                  "Comments": "You will need to add crops to this soil before running simulations.",
                  "Name": "Soil",
                  "Children": [
                    {
                      "$type": "Models.Soils.Physical, Models",
                      "Depth": [
                        "0-18",
                        "18-30",
                        "30-51",
                        "51-74"
                      ],
                      "Thickness": [
                        180.0,
                        120.0,
                        210.0,
                        230.0
                      ],
                      "ParticleSizeClay": null,
                      "ParticleSizeSand": null,
                      "ParticleSizeSilt": null,
                      "BD": [
                        0.73,
                        0.7,
                        0.69,
                        0.77
                      ],
                      "AirDry": [
                        0.05,
                        0.05,
                        0.03,
                        0.03
                      ],
                      "LL15": [
                        0.148,
                        0.147,
                        0.088,
                        0.1
                      ],
                      "DUL": [
                        0.35,
                        0.35,
                        0.25,
                        0.2
                      ],
                      "SAT": [
                        0.656,
                        0.691,
                        0.699,
                        0.672
                      ],
                      "KS": null,
                      "BDMetadata": null,
                      "AirDryMetadata": null,
                      "LL15Metadata": null,
                      "DULMetadata": null,
                      "SATMetadata": null,
                      "KSMetadata": null,
                      "Name": "Physical",
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.14,
                            0.14,
                            0.14,
                            0.14
                          ],
                          "KL": [
                            0.1,
                            0.1,
                            0.1,
                            0.02
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "AGPRyegrassSoil",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.14,
                            0.14,
                            0.14,
                            0.14
                          ],
                          "KL": [
                            0.1,
                            0.1,
                            0.1,
                            0.02
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "AGPWhiteCloverSoil",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.WaterModel.WaterBalance, Models",
                      "SummerDate": "1-Nov",
                      "SummerU": 9.12,
                      "SummerCona": 3.0,
                      "WinterDate": "1-Apr",
                      "WinterU": 9.12,
                      "WinterCona": 3.0,
                      "DiffusConst": 0.0,
                      "DiffusSlope": 0.0,
                      "Salb": 0.13,
                      "CN2Bare": 73.0,
                      "CNRed": 0.0,
                      "CNCov": 0.0,
                      "Slope": "NaN",
                      "DischargeWidth": "NaN",
                      "CatchmentArea": "NaN",
                      "Thickness": [
                        180.0,
                        120.0,
                        210.0,
                        230.0
                      ],
                      "SWCON": [
                        0.5,
                        0.5,
                        0.5,
                        0.7
                      ],
                      "KLAT": null,
                      "ResourceName": "WaterBalance",
                      "Name": "SoilWater",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogen, Models",
                      "fom_types": [
                        "default",
                        "manure",
                        "mucuna",
                        "lablab",
                        "shemp",
                        "stable"
                      ],
                      "fract_carb": [
                        0.2,
                        0.3,
                        0.54,
                        0.57,
                        0.45,
                        0.0
                      ],
                      "fract_cell": [
                        0.7,
                        0.3,
                        0.37,
                        0.37,
                        0.47,
                        0.1
                      ],
                      "fract_lign": [
                        0.1,
                        0.4,
                        0.09,
                        0.06,
                        0.08,
                        0.9
                      ],
                      "Name": "SoilNitrogen",
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilNitrogenNO3, Models",
                          "Name": "NO3",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenNH4, Models",
                          "Name": "NH4",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenUrea, Models",
                          "Name": "Urea",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                          "Name": "PlantAvailableNO3",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                          "Name": "PlantAvailableNH4",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Organic, Models",
                      "Depth": [
                        "0-18",
                        "18-30",
                        "30-51",
                        "51-74"
                      ],
                      "FOMCNRatio": 0.0,
                      "Thickness": [
                        180.0,
                        120.0,
                        210.0,
                        230.0
                      ],
                      "Carbon": [
                        7.9,
                        2.0,
                        1.0,
                        0.5
                      ],
                      "SoilCNRatio": [
                        11.01,
                        11.01,
                        11.01,
                        11.01
                      ],
                      "FBiom": [
                        0.02,
                        0.02,
                        0.02,
                        0.01
                      ],
                      "FInert": [
                        0.26,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "FOM": [
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "Name": "Organic",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Chemical, Models",
                      "Depth": [
                        "0-18",
                        "18-30",
                        "30-51",
                        "51-74"
                      ],
                      "Thickness": [
                        180.0,
                        120.0,
                        210.0,
                        230.0
                      ],
                      "NO3N": [
                        0.1,
                        0.1,
                        0.1,
                        0.1
                      ],
                      "NH4N": [
                        0.1,
                        0.1,
                        0.1,
                        0.1
                      ],
                      "PH": [
                        5.6,
                        6.2,
                        6.2,
                        6.4
                      ],
                      "CL": null,
                      "EC": null,
                      "ESP": null,
                      "Name": "Chemical",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.InitialWater, Models",
                      "PercentMethod": 0,
                      "FractionFull": 1.0,
                      "DepthWetSoil": "NaN",
                      "RelativeTo": null,
                      "Name": "Initial Water",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Sample, Models",
                      "Depth": [
                        "0-18",
                        "18-30",
                        "30-51",
                        "51-74"
                      ],
                      "Thickness": [
                        180.0,
                        120.0,
                        210.0,
                        230.0
                      ],
                      "NO3N": null,
                      "NH4N": null,
                      "SW": null,
                      "OC": null,
                      "EC": null,
                      "CL": null,
                      "ESP": null,
                      "PH": null,
                      "SWUnits": 0,
                      "OCUnits": 0,
                      "PHUnits": 0,
                      "Name": "Initial nitrogen",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.CERESSoilTemperature, Models",
                      "Name": "CERESSoilTemperature",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "InitialShootDM": 1500.0,
                  "InitialRootDM": 450.0,
                  "InitialRootDepth": 750.0,
                  "ResourceName": "AGPRyegrass",
                  "Name": "AGPRyegrass",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "InitialShootDM": 500.0,
                  "InitialRootDM": 150.0,
                  "InitialRootDepth": 350.0,
                  "ResourceName": "AGPWhiteClover",
                  "Name": "AGPWhiteClover",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Report, Models",
                  "VariableNames": [
                    "[Weather].Season as Season",
                    "sum of [AGPWhiteClover].HarvestedWt from [Clock].StartOfSimulation to [Clock].EndOfSimulation as WhiteClover",
                    "sum of [AGPRyegrass].HarvestedWt from [Clock].StartOfSimulation to [Clock].EndOfSimulation as Ryegrass",
                    "mean of ([AGPWhiteClover].AboveGroundWt / ([AGPWhiteClover].AboveGroundWt + [AGPRyegrass].AboveGroundWt + 1.0)) from [Clock].StartOfSimulation to [Clock].EndOfSimulation as PropCloverHarvested"
                  ],
                  "EventNames": [
                    "[Clock].EndOfSimulation"
                  ],
                  "GroupByVariableName": "[Weather].Season",
                  "Name": "SeasonalOverall",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Report, Models",
                  "VariableNames": [
                    "[Clock].Today.Year",
                    "[Weather].Season as Season",
                    "sum of [AGPWhiteClover].HarvestedWt from [SeasonalByYear].DayAfterLastOutput to [Clock].Today as WhiteClover",
                    "sum of [AGPRyegrass].HarvestedWt from [SeasonalByYear].DayAfterLastOutput to [Clock].Today as Ryegrass",
                    "mean of ([AGPWhiteClover].HarvestedWt / ([AGPWhiteClover].HarvestedWt + [AGPRyegrass].HarvestedWt + 1.0)) from [SeasonalByYear].DayAfterLastOutput to [Clock].Today as PropCloverHarvested"
                  ],
                  "EventNames": [
                    "[Weather].EndOfAutumn",
                    "[Weather].EndOfWinter",
                    "[Weather].EndOfSpring",
                    "[Weather].EndOfSummer"
                  ],
                  "GroupByVariableName": "",
                  "Name": "SeasonalByYear",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Report, Models",
                  "VariableNames": [
                    "[Clock].Today.Year",
                    "[Weather].Season as Season",
                    "sum of [AGPWhiteClover].HarvestedWt from [SeasonalByYear].DayAfterLastOutput to [Clock].Today as WhiteClover",
                    "sum of [AGPRyegrass].HarvestedWt from [SeasonalByYear].DayAfterLastOutput to [Clock].Today as Ryegrass",
                    "mean of ([AGPWhiteClover].HarvestedWt / ([AGPWhiteClover].HarvestedWt + [AGPRyegrass].HarvestedWt + 1.0)) on [SimpleGrazing].Grazed from [SeasonalByYear].DayAfterLastOutput to [Clock].Today as PropCloverHarvested"
                  ],
                  "EventNames": [
                    "[Weather].EndOfAutumn",
                    "[Weather].EndOfWinter",
                    "[Weather].EndOfSpring",
                    "[Weather].EndOfSummer"
                  ],
                  "GroupByVariableName": "",
                  "Name": "SeasonalByYearWithOnKeyword",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "IncludeInDocumentation": true,
  "Enabled": true,
  "ReadOnly": false
}