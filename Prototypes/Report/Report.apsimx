{
  "$type": "Models.Core.Simulations, Models",
  "ExplorerWidth": 296,
  "Version": 67,
  "Name": "Simulations",
  "Children": [
    {
      "$type": "Models.Memo, Models",
      "Text": "# Report Model Documentation and Example\n\n*Dean Holzworth (CSIRO, Australia) and Val Snow (AgResearch, New Zealand)*\n\n(Text last updated 17 October 2019)\n\n**Report** is the model in APSIM that is used to generate columns of simulation outputs for further analysis. \n\nThe simulations in this example are to show examples of the different reporting capabilities and to provide a test that they continue to produce the correct results.\n\nThe intention is that this documentation is read alongside the simulation that produced it to see the detail of the examples. The simulation is to be found under the \"Examples\" button as Report.apsim.\n\n\n   \n\n\n\n\n",
      "Name": "About this example",
      "Children": [],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "Children": [],
      "IncludeInDocumentation": false,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Name": "SimpleReportingSim",
      "Children": [
        {
          "$type": "Models.Clock, Models",
          "Start": "1980-01-01T00:00:00",
          "End": "1990-12-31T00:00:00",
          "Name": "Clock",
          "Children": [],
          "IncludeInDocumentation": false,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "CaptureErrors": true,
          "CaptureWarnings": true,
          "CaptureSummaryText": true,
          "Name": "SummaryFile",
          "Children": [],
          "IncludeInDocumentation": false,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Weather, Models",
          "FileName": "%root%\\Examples\\WeatherFiles\\Dalby.met",
          "ExcelWorkSheetName": "",
          "Name": "Weather",
          "Children": [],
          "IncludeInDocumentation": false,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "SoilArbitrator",
          "Children": [],
          "IncludeInDocumentation": false,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "Name": "Field",
          "Children": [
            {
              "$type": "Models.Manager, Models",
              "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing Models.Soils.Nutrients;\r\nusing Models.Utilities;\r\nusing APSIM.Shared.Utilities;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock Clock;\r\n        [Link] Fertiliser Fertiliser;\r\n        [Link] Summary Summary;\r\n        [Link] Plant Wheat;\r\n        [Link] Soil Soil; \r\n        Accumulator accumulatedRain;\r\n        \r\n        [Description(\"Start of sowing window (d-mmm)\")]\r\n        public string StartDate { get; set;}\r\n        [Description(\"End of sowing window (d-mmm)\")]\r\n        public string EndDate { get; set;}\r\n        [Description(\"Minimum extractable soil water for sowing (mm)\")]\r\n        public double MinESW { get; set;}\r\n        [Description(\"Accumulated rainfall required for sowing (mm)\")]\r\n        public double MinRain { get; set;}\r\n        [Description(\"Duration of rainfall accumulation (d)\")]\r\n        public int RainDays { get; set;}\r\n        [Description(\"Cultivar to be sown\")]\r\n        [Display(Type=DisplayType.CultivarName)]\r\n        public string CultivarName { get; set;}\r\n        [Description(\"Sowing depth (mm)\")]\r\n        public double SowingDepth { get; set;}        \r\n        [Description(\"Row spacing (mm)\")]\r\n        public double RowSpacing { get; set;}    \r\n        [Description(\"Plant population (/m2)\")]\r\n        public double Population { get; set;}    \r\n        \r\n        \r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n            accumulatedRain = new Accumulator(this, \"[Weather].Rain\", RainDays);\r\n        }\r\n        \r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            accumulatedRain.Update();\r\n            \r\n            if (DateUtilities.WithinDates(StartDate,Clock.Today,EndDate) &&\r\n                !Wheat.IsAlive &&\r\n                MathUtilities.Sum(Soil.SoilWater.ESW) > MinESW &&\r\n                accumulatedRain.Sum > MinRain)\r\n            {\r\n               Wheat.Sow(population:Population, cultivar:CultivarName, depth:SowingDepth, rowSpacing:RowSpacing);    \r\n            }\r\n        \r\n        }\r\n        \r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "StartDate",
                  "Value": "1-may"
                },
                {
                  "Key": "EndDate",
                  "Value": "10-jul"
                },
                {
                  "Key": "MinESW",
                  "Value": "100"
                },
                {
                  "Key": "MinRain",
                  "Value": "25"
                },
                {
                  "Key": "RainDays",
                  "Value": "7"
                },
                {
                  "Key": "CultivarName",
                  "Value": "Hartog"
                },
                {
                  "Key": "SowingDepth",
                  "Value": "30"
                },
                {
                  "Key": "RowSpacing",
                  "Value": "250"
                },
                {
                  "Key": "Population",
                  "Value": "120"
                }
              ],
              "Name": "Sowing",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock Clock;\r\n        [Link] Fertiliser Fertiliser;\r\n        [Link] Summary Summary;\r\n\r\n        [Description(\"Crop to be fertilised\")]\r\n        public IPlant Crop { get; set; }\r\n\r\n        [Description(\"Type of fertiliser to apply? \")] public Fertiliser.Types FertiliserType { get; set; }\r\n\r\n    \r\n        [Description(\"Amount of fertiliser to be applied (kg/ha)\")]\r\n        public double Amount { get; set; }\r\n        \r\n        [EventSubscribe(\"Sowing\")]\r\n        private void OnSowing(object sender, EventArgs e)\r\n        {\r\n            Model crop = sender as Model;\r\n            if (Crop != null && crop.Name.ToLower() == (Crop as IModel).Name.ToLower())\r\n            {\r\n            \tSummary.WriteMessage(this, \"Sowing fertilsier\");\r\n                Fertiliser.Apply(Amount: Amount, Type: FertiliserType);\r\n            }\r\n        }\r\n        \r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "Crop",
                  "Value": "[Wheat]"
                },
                {
                  "Key": "FertiliserType",
                  "Value": "UreaN"
                },
                {
                  "Key": "Amount",
                  "Value": "160"
                }
              ],
              "Name": "Fertilise at sowing",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing Models.Soils.Nutrients;\r\nusing Models.Utilities;\r\nusing APSIM.Shared.Utilities;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Plant Wheat;\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            if (Wheat.IsReadyForHarvesting)\r\n            {\r\n               Wheat.Harvest();\r\n               Wheat.EndCrop();    \r\n            }\r\n        \r\n        }\r\n        \r\n    }\r\n}\r\n",
              "Parameters": [],
              "Name": "Harvest",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using System;\r\nusing Models.Core;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models;\r\nusing System.Xml.Serialization;\r\nusing APSIM.Shared.Utilities;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    public class Script : Model\r\n    {\r\n        public double FASW { get; set; }\r\n        public double WaterDeficit  { get; set; }\r\n    \r\n        [Link] Zone zone;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Soil soil;\r\n        \r\n        [Description(\"Auto irrigation on?\")]\r\n        public bool AutoIrrigationOn { get; set; }\r\n\r\n        [Description(\"Threshold fraction available water (0-1)\")]\r\n        public double FASWThreshold { get; set; }\r\n\r\n        [Description(\"Soil depth (mm) to which fraction available water is calculated\")]\r\n        public double FASWDepth { get; set; }\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            CalculateFASW();\r\n            if (AutoIrrigationOn)\r\n            {\r\n                if (FASW < FASWThreshold)\r\n                {\r\n                    double amount = 10;\r\n                    irrigation.Apply(WaterDeficit, depth: 0);\r\n                }\r\n            }\r\n        }\r\n        \r\n        private void CalculateFASW()\r\n        {\r\n            double[] LL15 = MathUtilities.Multiply(soil.LL15, soil.Thickness);\r\n            double[] DUL = MathUtilities.Multiply(soil.DUL, soil.Thickness);\r\n        \r\n            int nlayr = GetLayerIndex();\r\n            double cumdep = MathUtilities.Sum(soil.Thickness, 0, nlayr, 0.0);\r\n\r\n            double excess_fr = MathUtilities.Divide((cumdep - FASWDepth), soil.Thickness[nlayr], 0.0);\r\n\r\n            // note that results may be strange if swdep < ll15\r\n            double avail_sw = (MathUtilities.Sum(soil.Water, 0, nlayr, 0.0)\r\n                              - excess_fr * soil.Water[nlayr])\r\n                              - (MathUtilities.Sum(LL15, 0, nlayr, 0.0)\r\n                              - excess_fr * LL15[nlayr]);\r\n\r\n\r\n            double pot_avail_sw = (MathUtilities.Sum(DUL, 0, nlayr, 0.0)\r\n                                  - excess_fr * DUL[nlayr])\r\n                                  - (MathUtilities.Sum(LL15, 0, nlayr, 0.0)\r\n                                  - excess_fr * LL15[nlayr]);\r\n\r\n            FASW = MathUtilities.Divide(avail_sw, pot_avail_sw, 0.0);\r\n            WaterDeficit = MathUtilities.Constrain(pot_avail_sw - avail_sw, 0.0, 100000);\r\n        }\r\n\r\n        private int GetLayerIndex()\r\n        {\r\n            double[] cumThickness = soil.ThicknessCumulative;\r\n            for (int i = 1; i < cumThickness.Length; i++)\r\n            {\r\n                if (FASWDepth < cumThickness[i])\r\n                    return i - 1;\r\n            }\r\n            \r\n            return cumThickness.Length - 1;\r\n        }\r\n\r\n    }\r\n}\r\n       \r\n",
              "Parameters": [
                {
                  "Key": "FASW",
                  "Value": "0"
                },
                {
                  "Key": "WaterDeficit",
                  "Value": "0"
                },
                {
                  "Key": "AutoIrrigationOn",
                  "Value": "True"
                },
                {
                  "Key": "FASWThreshold",
                  "Value": "0.75"
                },
                {
                  "Key": "FASWDepth",
                  "Value": "600"
                }
              ],
              "Name": "AutoIrrig",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using System;\r\nusing Models.Core;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models;\r\nusing System.Xml.Serialization;\r\nusing APSIM.Shared.Utilities;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock clock;\r\n        [Link] Zone zone;\r\n        [Link] Summary summary;\r\n\r\n        [Separator(\"NOTE - all dates or date strings are entered with comma-separation and no spaces\")]\r\n        [Separator(\"NOTE - this component should be at the bottom of the list of Managers\")]\r\n        [Separator(\"   \")]\r\n        [Separator(\"Example for reporting in particular days but the same days every year\")]\r\n\r\n        //ReportOnSpecificDaysEveryYear\r\n        [Description(\"Name of the Report model for reporting on below dates every year: \")] \r\n        [Display(Type=DisplayType.Model, ModelType = typeof(Report.Report))]\r\n        public Report.Report ReportEveryYear_Name { get; set; } \r\n\r\n        [Description(\"Enter one or more dates (as dd-mmm) for reporting : \")] \r\n        public string[] ReportEveryYear_Dates { get; set; } \r\n\r\n        [Separator(\"Example for reporting on absolute dates\")]\r\n\r\n        [Description(\"Name of the Report model for reporting on completely specified dates: \")] \r\n        [Display(Type=DisplayType.Model, ModelType = typeof(Report.Report))]\r\n        public Report.Report ReportSpecificDates_Name { get; set; } \r\n\r\n        [Description(\"Enter one or more dates (as dd-mmm-yyyy) for reporting : \")] \r\n        public DateTime[] ReportSpecificDates_Dates { get; set; } \r\n\r\n\r\n\r\n        [EventSubscribe(\"DoManagementCalculations\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n\r\n\t\t\t// example for reporting on irregular dates but the same dates every year\r\n\t\t\tif (ReportEveryYear_Dates != null)\r\n\t        \tforeach (string ddMMM in ReportEveryYear_Dates)\r\n    \t\t\t\tif (DateUtilities.DatesEqual(ddMMM, clock.Today))\r\n\t            \t    ReportEveryYear_Name.DoOutput();\r\n\r\n\t\t\t// example for reporting on fully-specified dates that are not necessarily the same dates every year\r\n\t\t\tif (ReportSpecificDates_Dates != null)\r\n\t        \tforeach (DateTime ddMMMyy in ReportSpecificDates_Dates)\r\n    \t\t\t\tif (DateUtilities.Equals(ddMMMyy, clock.Today))\r\n\t            \t    ReportSpecificDates_Name.DoOutput();\r\n\r\n\r\n\r\n\r\n\t\t\t/*if (ReportSpecificDates_Dates != null)\r\n\t\t\t{\r\n\t        \tforeach (DateTime ddMMMyy in ReportSpecificDates_Dates)\r\n    \t    \t{\r\n    \t\t\t\tif (DateUtilities.Equals(ddMMMyy, clock.Today))\r\n    \t\t\t\t{\r\n\t            \t    Models.Report.Report myReport = Apsim.Find(zone, ReportSpecificDates_Name) as Models.Report.Report;\r\n    \t            \tif (myReport == null)\r\n        \t            \tthrow new Exception(string.Format(\"Unable to locate report {0}.\", ReportSpecificDates_Name));\r\n\t            \t    myReport.DoOutput();\r\n    \t\t\t\t}\r\n        \t\t}\r\n\t\t\t}*/\r\n\r\n        }\r\n        \r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "ReportEveryYear_Name",
                  "Value": "[ReportOnSpecificDaysEveryYear]"
                },
                {
                  "Key": "ReportEveryYear_Dates",
                  "Value": "21-mar,23-nov,11-aug"
                },
                {
                  "Key": "ReportSpecificDates_Name",
                  "Value": "[ReportOnSpecificDates]"
                },
                {
                  "Key": "ReportSpecificDates_Dates",
                  "Value": "03/27/1980 00:00:00,08/15/1981 00:00:00"
                }
              ],
              "Name": "ReportHelper",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "Name": "Fertiliser",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Irrigation, Models",
              "Name": "Irrigation",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 1.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "soil_albedo": 0.3,
              "SoilHeatFluxFraction": 0.4,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "CropType": "Wheat",
              "IsEnding": false,
              "DaysAfterEnding": 0,
              "ResourceName": "Wheat",
              "Name": "Wheat",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "InitialResidueName": "wheat_stubble",
              "InitialResidueType": "wheat",
              "InitialResidueMass": 500.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 100.0,
              "FractionFaecesAdded": 0.5,
              "ResourceName": "SurfaceOrganicMatter",
              "Name": "SurfaceOrganicMatter",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": "Vertosol",
              "ASCSubOrder": "Black",
              "SoilType": "Clay",
              "LocalName": null,
              "Site": "Norwin",
              "NearestTown": "Norwin",
              "Region": "Darling Downs and Granite Belt",
              "State": "Queensland",
              "Country": "Australia",
              "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
              "ApsoilNumber": "900",
              "Latitude": -27.581836,
              "Longitude": 151.320206,
              "LocationAccuracy": " +/- 20m",
              "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
              "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
              "Name": "Soil",
              "Children": [
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "ParticleSizeClay": null,
                  "BD": [
                    1.01056473311131,
                    1.07145631083388,
                    1.09393858528057,
                    1.15861335018721,
                    1.17301160318016,
                    1.16287303586874,
                    1.18749547755906
                  ],
                  "AirDry": [
                    0.130250054518252,
                    0.198689390775399,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "LL15": [
                    0.260500109036505,
                    0.248361738469248,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "DUL": [
                    0.52100021807301,
                    0.496723476938497,
                    0.488437607673005,
                    0.480296969355493,
                    0.471583596524955,
                    0.457070570557793,
                    0.452331759845006
                  ],
                  "SAT": [
                    0.588654817693846,
                    0.565676863836273,
                    0.557192986686577,
                    0.532787415023694,
                    0.527354112007486,
                    0.531179986464627,
                    0.521888499034317
                  ],
                  "KS": [
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0
                  ],
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "Name": "Physical",
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.06,
                        0.06,
                        0.06,
                        0.04,
                        0.04,
                        0.02,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "WheatSoil",
                      "Children": [],
                      "IncludeInDocumentation": false,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.SoilWater, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 5.0,
                  "SummerCona": 5.0,
                  "WinterDate": "1-Apr",
                  "WinterU": 5.0,
                  "WinterCona": 5.0,
                  "DiffusConst": 40.0,
                  "DiffusSlope": 16.0,
                  "Salb": 0.12,
                  "CN2Bare": 73.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "slope": "NaN",
                  "discharge_width": "NaN",
                  "catchment_area": "NaN",
                  "max_pond": 0.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "SWCON": [
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3
                  ],
                  "KLAT": null,
                  "Name": "SoilWater",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    1.2,
                    0.96,
                    0.6,
                    0.3,
                    0.18,
                    0.12,
                    0.12
                  ],
                  "SoilCNRatio": [
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0
                  ],
                  "FBiom": [
                    0.04,
                    0.02,
                    0.02,
                    0.02,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "FInert": [
                    0.4,
                    0.6,
                    0.8,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "FOM": [
                    347.12903231275641,
                    270.3443621919937,
                    163.97214434990104,
                    99.454132887040629,
                    60.321980831124677,
                    36.587130828674873,
                    22.1912165985086
                  ],
                  "Name": "Organic",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "NO3N": [
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "NH4N": [
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1
                  ],
                  "PH": [
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0
                  ],
                  "CL": null,
                  "EC": null,
                  "ESP": null,
                  "Name": "Chemical",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.InitialWater, Models",
                  "PercentMethod": 1,
                  "FractionFull": 1.0,
                  "DepthWetSoil": "NaN",
                  "RelativeTo": null,
                  "Name": "InitialWater",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Sample, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "NO3N": null,
                  "NH4N": null,
                  "SW": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "OC": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "EC": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "CL": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "ESP": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "PH": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "SWUnits": 0,
                  "OCUnits": 0,
                  "PHUnits": 0,
                  "Name": "InitialN",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "CERESSoilTemperature",
                  "Children": [],
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Nutrients.Nutrient, Models",
                  "DirectedGraphInfo": {
                    "$type": "Models.Graph.DirectedGraph, Models",
                    "Nodes": [
                      {
                        "$type": "Models.Graph.Node, Models",
                        "Name": "Inert",
                        "Location": "656, 254",
                        "Colour": "0, 158, 115",
                        "OutlineColour": "Black",
                        "Transparent": false
                      },
                      {
                        "$type": "Models.Graph.Node, Models",
                        "Name": "SurfaceResidue",
                        "Location": "566, 69",
                        "Colour": "0, 158, 115",
                        "OutlineColour": "Black",
                        "Transparent": false
                      },
                      {
                        "$type": "Models.Graph.Node, Models",
                        "Name": "FOMLignin",
                        "Location": "261, 69",
                        "Colour": "0, 158, 115",
                        "OutlineColour": "Black",
                        "Transparent": false
                      },
                      {
                        "$type": "Models.Graph.Node, Models",
                        "Name": "FOMCellulose",
                        "Location": "397, 70",
                        "Colour": "0, 158, 115",
                        "OutlineColour": "Black",
                        "Transparent": false
                      },
                      {
                        "$type": "Models.Graph.Node, Models",
                        "Name": "FOMCarbohydrate",
                        "Location": "123, 70",
                        "Colour": "0, 158, 115",
                        "OutlineColour": "Black",
                        "Transparent": false
                      },
                      {
                        "$type": "Models.Graph.Node, Models",
                        "Name": "Microbial",
                        "Location": "218, 299",
                        "Colour": "0, 158, 115",
                        "OutlineColour": "Black",
                        "Transparent": false
                      },
                      {
                        "$type": "Models.Graph.Node, Models",
                        "Name": "Humic",
                        "Location": "458, 293",
                        "Colour": "0, 158, 115",
                        "OutlineColour": "Black",
                        "Transparent": false
                      },
                      {
                        "$type": "Models.Graph.Node, Models",
                        "Name": "Urea",
                        "Location": "529, 419",
                        "Colour": "86, 180, 233",
                        "OutlineColour": "Black",
                        "Transparent": false
                      },
                      {
                        "$type": "Models.Graph.Node, Models",
                        "Name": "NO3",
                        "Location": "185, 435",
                        "Colour": "86, 180, 233",
                        "OutlineColour": "Black",
                        "Transparent": false
                      },
                      {
                        "$type": "Models.Graph.Node, Models",
                        "Name": "NH4",
                        "Location": "357, 422",
                        "Colour": "86, 180, 233",
                        "OutlineColour": "Black",
                        "Transparent": false
                      },
                      {
                        "$type": "Models.Graph.Node, Models",
                        "Name": "Atmosphere",
                        "Location": "48, 338",
                        "Colour": "White",
                        "OutlineColour": "White",
                        "Transparent": true
                      },
                      {
                        "$type": "Models.Graph.Node, Models",
                        "Name": "PlantAvailableNO3",
                        "Location": "688, 415",
                        "Colour": "86, 180, 233",
                        "OutlineColour": "Black",
                        "Transparent": false
                      },
                      {
                        "$type": "Models.Graph.Node, Models",
                        "Name": "PlantAvailableNH4",
                        "Location": "691, 421",
                        "Colour": "86, 180, 233",
                        "OutlineColour": "Black",
                        "Transparent": false
                      }
                    ],
                    "Arcs": [
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "SurfaceResidue",
                        "DestinationName": "Microbial",
                        "Location": "415, 173",
                        "Colour": "Black",
                        "Text": null
                      },
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "SurfaceResidue",
                        "DestinationName": "Humic",
                        "Location": "499, 172",
                        "Colour": "Black",
                        "Text": null
                      },
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "FOMLignin",
                        "DestinationName": "Microbial",
                        "Location": "259, 221",
                        "Colour": "Black",
                        "Text": null
                      },
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "FOMLignin",
                        "DestinationName": "Humic",
                        "Location": "255, 105",
                        "Colour": "Black",
                        "Text": null
                      },
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "FOMCellulose",
                        "DestinationName": "Microbial",
                        "Location": "370, 184",
                        "Colour": "Black",
                        "Text": null
                      },
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "FOMCellulose",
                        "DestinationName": "Humic",
                        "Location": "463, 224",
                        "Colour": "Black",
                        "Text": null
                      },
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "FOMCarbohydrate",
                        "DestinationName": "Microbial",
                        "Location": "141, 131",
                        "Colour": "Black",
                        "Text": null
                      },
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "FOMCarbohydrate",
                        "DestinationName": "Humic",
                        "Location": "204, 215",
                        "Colour": "Black",
                        "Text": null
                      },
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "Microbial",
                        "DestinationName": "Microbial",
                        "Location": "335, 301",
                        "Colour": "Black",
                        "Text": null
                      },
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "Microbial",
                        "DestinationName": "Humic",
                        "Location": "319, 278",
                        "Colour": "Black",
                        "Text": null
                      },
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "Humic",
                        "DestinationName": "Microbial",
                        "Location": "334, 340",
                        "Colour": "Black",
                        "Text": null
                      },
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "Urea",
                        "DestinationName": "NH4",
                        "Location": "433, 416",
                        "Colour": "Black",
                        "Text": null
                      },
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "NO3",
                        "DestinationName": "Atmosphere",
                        "Location": "1, 319",
                        "Colour": "Black",
                        "Text": null
                      },
                      {
                        "$type": "Models.Graph.Arc, Models",
                        "SourceName": "NH4",
                        "DestinationName": "NO3",
                        "Location": "243, 409",
                        "Colour": "Black",
                        "Text": null
                      }
                    ]
                  },
                  "ResourceName": "Nutrient",
                  "Name": "Nutrient",
                  "IncludeInDocumentation": false,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Weather].Rain as DailyRainfall",
                "[Wheat].Grain.Total.Wt",
                "[SowingRule].Script.SowingDepth",
                "[Weather].MaxT as MaxT",
                "Min of [Weather].MaxT from [ReportSimple].DateOfLastOutput to [Clock].Today as TestMaxT"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "Name": "ReportSimple",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Wheat].AboveGroundLive.Wt",
                "Sum([Soil].Nutrient.MineralN)",
                "[Wheat].Phenology.CurrentPhaseName",
                "[Irrigation].IrrigationApplied",
                "[Fertiliser].NitrogenApplied"
              ],
              "EventNames": [
                "[Wheat].Sowing",
                "[Wheat].Flowering",
                "[Wheat].Harvesting",
                "[Wheat].Phenology.PhaseChanged",
                "[Irrigation].Irrigated",
                "[Fertiliser].Fertilised"
              ],
              "Name": "ReportOnEvents",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Wheat].AboveGroundLive.Wt"
              ],
              "EventNames": [
                ""
              ],
              "Name": "ReportOnSpecificDaysEveryYear",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Wheat].AboveGroundLive.Wt  "
              ],
              "EventNames": [
                ""
              ],
              "Name": "ReportOnSpecificDates",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "Sum([Soil].Thickness[1:3]) as DepthToBottomOfLayer3",
                "Sum([Soil].SoilWater.SWmm) as TotalWaterStored",
                "Sum([Soil].SoilWater.SWmm[1:2]) as WaterStoredTop2Layers",
                "Sum([Soil].SoilWater.SWmm[1:3]) as WaterStoredTop3Layers",
                "//Sum([Soil].SoilWater.SWmm[4:]) as WaterStoredLayer4AndBelow",
                "//Sum([Soil].SoilWater.SWmm[:6]) as WaterStoredDowntoLayer6",
                "Mean([Soil].Nutrient.NO3.ppm[1:4]) as MeanNO3ppmTop4Layers",
                "Min([Soil].Nutrient.NO3.ppm[1:4]) as MinNO3ppmTop4Layers",
                "Max([Soil].Nutrient.NO3.ppm[1:4]) as MaxNO3ppmTop4Layers",
                "Sum([Soil].Nutrient.Urea.kgha[1:3] + [Soil].Nutrient.NH4.kgha[1:3] + [Soil].Nutrient.NO3.kgha[1:3]) as MineralN",
                "Sum([Soil].Nutrient.Urea.kgha[1:3] + [Soil].Nutrient.NH4.kgha[1:3] + [Soil].Nutrient.NO3.kgha[1:3]) * 1000 / Sum([Soil].Thickness[1:3] ) as KgMinN_PerSoilMeter"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "Name": "ReportArrays",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "Sum of [Weather].MaxT from [ReportDaily].DateOfLastOutput to [Clock].Today as SumDailyMaxT",
                "Avg of [Weather].MaxT from [ReportDaily].DateOfLastOutput to [Clock].Today as MeanDailyMaxT  // note this is to be replaced with Mean rather than Avg",
                "Min of [Weather].MaxT from [ReportDaily].DateOfLastOutput to [Clock].Today as MinDailyMaxT",
                "Max of [Weather].MaxT from [ReportDaily].DateOfLastOutput to [Clock].Today as MaxDailyMaxT",
                "First of [Weather].MaxT from [ReportDaily].DateOfLastOutput to [Clock].Today as FirstDailyMaxT",
                "Last of [Weather].MaxT from [ReportDaily].DateOfLastOutput to [Clock].Today as LastDailyMaxT",
                "Diff of [Weather].MaxT from [ReportDaily].DateOfLastOutput to [Clock].Today as DiffDailyMaxT"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "Name": "ReportDaily",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "Sum of [Weather].MaxT from [ReportWeekly].DateOfLastOutput to [Clock].Today as SumWeeklyMaxT",
                "Avg of [Weather].MaxT from [ReportWeekly].DateOfLastOutput to [Clock].Today as MeanWeeklyMaxT  // note this is to be replaced with Mean rather than Avg",
                "Min of [Weather].MaxT from [ReportWeekly].DateOfLastOutput to [Clock].Today as MinWeeklyMaxT",
                "Max of [Weather].MaxT from [ReportWeekly].DateOfLastOutput to [Clock].Today as MaxWeeklyMaxT",
                "First of [Weather].MaxT from [ReportWeekly].DateOfLastOutput to [Clock].Today as FirstWeeklyMaxT",
                "Last of [Weather].MaxT from [ReportWeekly].DateOfLastOutput to [Clock].Today as LastWeeklyMaxT",
                "Diff of [Weather].MaxT from [ReportWeekly].DateOfLastOutput to [Clock].Today as DiffWeeklyMaxT"
              ],
              "EventNames": [
                "[Clock].EndOfWeek"
              ],
              "Name": "ReportWeekly",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "Sum of [Weather].MaxT from [ReportMonthly].DateOfLastOutput to [Clock].Today as SumMonthlyMaxT",
                "Avg of [Weather].MaxT from [ReportMonthly].DateOfLastOutput to [Clock].Today as MeanMonthlyMaxT  // note this is to be replaced with Mean rather than Avg",
                "Min of [Weather].MaxT from [ReportMonthly].DateOfLastOutput to [Clock].Today as MinMonthlyMaxT",
                "Max of [Weather].MaxT from [ReportMonthly].DateOfLastOutput to [Clock].Today as MaxMonthlyMaxT",
                "First of [Weather].MaxT from [ReportMonthly].DateOfLastOutput to [Clock].Today as FirstMonthlyMaxT",
                "Last of [Weather].MaxT from [ReportMonthly].DateOfLastOutput to [Clock].Today as LastMonthlyMaxT",
                "Diff of [Weather].MaxT from [ReportMonthly].DateOfLastOutput to [Clock].Today as DiffMonthlyMaxT"
              ],
              "EventNames": [
                "[Clock].EndOfMonth"
              ],
              "Name": "ReportMonthly",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "Sum of [Weather].MaxT from [ReportYearly].DateOfLastOutput to [Clock].Today as SumYearlyMaxT",
                "Avg of [Weather].MaxT from [ReportYearly].DateOfLastOutput to [Clock].Today as MeanYearlyMaxT  // note this is to be replaced with Mean rather than Avg",
                "Min of [Weather].MaxT from [ReportYearly].DateOfLastOutput to [Clock].Today as MinYearlyMaxT",
                "Max of [Weather].MaxT from [ReportYearly].DateOfLastOutput to [Clock].Today as MaxYearlyMaxT",
                "First of [Weather].MaxT from [ReportYearly].DateOfLastOutput to [Clock].Today as FirstYearlyMaxT",
                "Last of [Weather].MaxT from [ReportYearly].DateOfLastOutput to [Clock].Today as LastYearlyMaxT",
                "Diff of [Weather].MaxT from [ReportYearly].DateOfLastOutput to [Clock].Today as DiffYearlyMaxT"
              ],
              "EventNames": [
                "[Clock].EndOfYear"
              ],
              "Name": "ReportYearly",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "Sum of [Weather].MaxT from [ReportSimulation].DateOfLastOutput to [Clock].Today as SumSimulationMaxT",
                "Avg of [Weather].MaxT from [ReportSimulation].DateOfLastOutput to [Clock].Today as MeanSimulationMaxT  // note this is to be replaced with Mean rather than Avg",
                "Min of [Weather].MaxT from [ReportSimulation].DateOfLastOutput to [Clock].Today as MinSimulationMaxT",
                "Max of [Weather].MaxT from [ReportSimulation].DateOfLastOutput to [Clock].Today as MaxSimulationMaxT",
                "First of [Weather].MaxT from [ReportSimulation].DateOfLastOutput to [Clock].Today as FirstSimulationMaxT",
                "Last of [Weather].MaxT from [ReportSimulation].DateOfLastOutput to [Clock].Today as LastSimulationMaxT",
                "Diff of [Weather].MaxT from [ReportSimulation].DateOfLastOutput to [Clock].Today as DiffSimulationMaxT"
              ],
              "EventNames": [
                "[Clock].EndOfSimulation"
              ],
              "Name": "ReportSimulation",
              "Children": [],
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": false,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": false,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowPageOfGraphs": true,
      "Name": "Reporting Basics",
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "\nSetting up outputs from a simulation requires describing **what** to output and **when** that should be done. \n\n## Properties - setting up what should be reported\n\nFigure 1 shows a screen capture of a simple report. The upper box (Properties) holds descriptions of what should be reported. The general syntax is:\n\n\t\t\t[Model].Variable\nThe first part, \"[Model]\" just above, gives the name of a model in the simulation. Models are almost any component in the simulation - e.g. Clock, Weather, Wheat, Irrigation - including Manager scripts (lthough these are a slightly special case and more on that below). The name of the model must be in square brackets. As with Manager scripts, Properties uses Intellisense to assist with constructing the output descripters. For example, see row 1 of Figure 1. After typing \"[Clock]\" once a \".\" is typed a drop-down list of possible variables will appear as hints and in Figure 1 the choice from the list was \"Today\" which gives the date of the simulation output. \n\n*Note that model and variable names are case-sensitive. Capitalisation in the right places is important.*\n\nThe component \"ReportSimple\" shows four output examples (see also below). The second row (see also below) shows an example of relabelling the output (the \"as DairyRainfall\" text) - this simply allows the user to give a more relvant label for the output in the output file. \n\n\t\t\t[Weather].Rain as DailyRainfall\n\nThe third row shows that it may be necessary to work through several layers to get to the output wanted. In each case a \".\" after the variable name gives a list with hints for outputs.\n\n\t\t\t[Wheat].Grain.Total.Wt\n\nThe fourth row (also below) shows the special case of reporting an output from a Manager script. The first part (\"[SowingRule]\") is the name of the Mangager script (so the output text needs to say current with any name changes you might make). Outputs from Managers always need a \".Script\" before Intellisense will show the possible outputs.\n\n\t\t\t[SowingRule].Script.SowingDepth\n\n## Reporting frequency - setting up when reports should happen\n\nAlso needed is a specification of *when* an output should be made. The instruction for when to report is in the form of:\n\n\t\t\t[Model].Event\nAn Event is something that happens, like a stage of the day or a management action. The most-used example of a reporting frequency is:\n\n\t\t\t[Clock].EndOfDay\nand this creates an output for every \"EndOfDay\" event - \"EndOfDay\" is an event created by Clock every day after all the models have done their calculations. Any (almost) event can be used to control the frequency of reporting such as:\n\n\t\t\t[Wheat].Sowing\n\t\t\t[Wheat].Flowering\n\t\t\t[Wheat].Harvesting\n\t\t\t[Wheat].PlantEnding\n\t\t\t[Irrigation].Irrigated\n\t\t\t[Fertiliser].Fertilised\nwhere “Wheat” might be any crop. This also shows that multiple triggers for reporting can be used.\n \nIt is worth noting that when an event is used to trigger reporting, the output happens immediately rather than at the end of the simulation day. If you are getting strange outupts then consider this as a possible reason. To understand more about what order models do their calculations see https://apsimnextgeneration.netlify.com/development.\n\n## Reporting at irregular intervals or specific dates\n\nIf reporting is needed for particular days (e.g. to compare against measurements in an experiment) a combination of a Manager and a Report component. An example of such a Manager (ReportHelper) and two Report components (ReportOnSpecificDaysEveryYear and ReportOnSpecificDates) are included in this example. Note that when using a Manager to control reporting, the Report frequency in the Report component should be left blank.\n\n[Note that an Operations component could also be used to trigger irregular reporting dates.]\n\n\n",
          "Name": "Reporting Basics",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowPageOfGraphs": true,
      "Name": "Dealing with output arrays",
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "\nSeveral of the outputs from APSIM are arrays - water content in the soil layers is a good example of this - and there are some features that make reporting arrays easier in APSIM.\n\nTo report all elements of an array, the syntax is the same as reporting a single variable. See for example in Row 2 of \"ReportArrays the text\n\n\t\t\t[Soil].SoilWater.SWmm\nproduces one column of output for each element (soil layer) in the array. When a particular layer is wated then specify that in square brackets so the \"[1]\" is the top (closest to the soil surface) layer. For example,\n\n\t\t\t[Soil].SoilWater.SWmm[1] as TopLayerWater_mm\n\nMore often some sort of aggregation is in the array is wanted and for this it is necessary to specify both which elements of the array are to be aggregated and what type of aggregation is wanted. \n\nThere are four options for specifying how the array elements should be aggregated - Sum, Mean, Min and Max - the meaning of these is self-evident. These are applied ot the array as, for example Mean(x) where the x is the output to be averaged. Use round brackets, capitalise the aggregation type and no spaces.\n\nFor specifying how the aggregation is to work there are severla options. Giving no layer information at all includes all of the array. A range is specified as, for example [3:6] for the third to sixth (inclusive, here meaning four layers) layers. Giving the colon but no numerical value means from the first (e.g. [:5]) or to the last (e.g. [2:]) elements. Report will not indicate the depth of the layers but the user can either get this information from the Soil input or can output the data using [Soil].Thickness which is an array giving the thickness of each layer in mm.\n\nSome examples of possible array outputs to show the syntax are:\n\n\t\t\tSum([Soil].Thickness[1:3]) as DepthToBottomOfLayer3\n\t\t\tSum([Soil].SoilWater.SWmm) as TotalWaterStored\n\t\t\tSum([Soil].SoilWater.SWmm[1:2]) as WaterStoredTop2Layers\n\t\t\tSum([Soil].SoilWater.SWmm[1:3]) as WaterStoredTop3Layers\n\t\t\t//Sum([Soil].SoilWater.SWmm[4:]) as WaterStoredLayer4AndBelow\n\t\t\t//Sum([Soil].SoilWater.SWmm[:6]) as WaterStoredDowntoLayer6\n\t\t\tMean([Soil].Nutrient.NO3.ppm[1:4]) as MeanNO3ppmTop4Layers\n\t\t\tMin([Soil].Nutrient.NO3.ppm[1:4]) as MinNO3ppmTop4Layers\n\t\t\tMax([Soil].Nutrient.NO3.ppm[1:4]) as MaxNO3ppmTop4Layers\n\nSimple, element-by-element, array operations can be included in the specification. For example\n\n\t\t\t[Soil].Nutrient.Urea.kgha + [Soil].Nutrient.NH4.kgha + [Soil].Nutrient.NO3.kgha\nwill produce one column of data for each soil layer with the total of the amount of N as Urea, NH2 and NO3. Inserting\n\n\t\t\tSum([Soil].Nutrient.Urea.kgha[1:3] + [Soil].Nutrient.NH4.kgha[1:3] + [Soil].Nutrient.NO3.kgha[1:3]) as MineralN\nwill give a single column of data with the total of Urea-N, NH4-N and NO3-N dfrom teh surface the the bottom of the third layer. These expressions can get more complex as in:\n\n\t\t\tSum([Soil].Nutrient.Urea.kgha[1:3] + [Soil].Nutrient.NH4.kgha[1:3] + [Soil].Nutrient.NO3.kgha[1:3]) * 1000 / Sum([Soil].Thickness[1:3] ) as KgMinN_PerSoilMeter\nwhich would give s single (somewhat nonsensical) output of the accumulation in mineral N with depth in the soil. \n",
          "Name": "Reporting Arrays",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowPageOfGraphs": true,
      "Name": "Reporting at Intervals Beyond Every Day",
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "***Note well** – reporting at aggregations other than every day can become complex. It is recommended that the results be critically evaluated to ensure that the reporting specified is as intended.*\n\nAPSIM allows reporting at various intervals. Several of these methods have been described above. In addition to the usual [Clock].EndOfDay for daily reporting, [Clock] also has events of EndOfWeek, EndOfMonth, EndOfYear and EndOfSimulation. When the reporting is not every day then it is necessary to consider what the aggregation of the output should be. Some variables would usually be reported as their value on the day – many state variables (e.g. plant biomass) are like this. Others are almost always wanted to be summed over the interval since the last report – drainage and evaporation are good examples here. \n\nAPSIM provides several ways to construct the aggregations. Not all the aggregations will be sensible for all outputs and it is up to the user to ensure the sensibility of the instructions to Report. For example, it makes no physical sense to sum the biomass of a plant in a monthly aggregation. It would make sense to report the value at the end of the month or to report the increase (difference) in biomass from the start to the end and it might make sense to report an average biomass. These issues must be considered when constructing more complex Report specifications. The general syntax of aggregated reporting is:\n\n\t\t\t*AggregationType* of [Model].Variable from *Start* to *End* as Label\n\nThe new elements here are *AggregationType*, *Start* and *End*.\n\n##AggregationType\nAggregationType can be any of:\n\n-\tSum of\n\n-\tMean of\n\n-\tMin of \n\n-\tMax of\n\n-\tFirst of\n\n-\tLast of \n\n-\tDiff of\n\nMost of these are self-evident. First and Last are chronological values. Diff is the increase in the output variable over the reporting interval – if the variable decreases then it will have a negative value.\n\n##Start\nThe most useful form of *Start* is *[ReportName].DateOfLastOutput* where the first part is the name of the current Report component. *DateOfLastOutput* is pretty much as stated. Other *Start* constructs might be a general, e.g. *1-jan*, or specific, e.g. *1-jan-1982*, date. *Start* can also be an event, e.g. *[Wheat].sowing* or *[Clock].StartOfYear*. When *Start* is a Clock or Report event the aggregation always starts at the start of the day. For events created by crop or other models the event can happen at any point of the day and it is not always clear without careful examination if the current-day calculations and updates will be included or excluded. This is user-beware.\n\n##End\n*[Clock].Today* is the most useful *End* specification. This means that the end of the aggregation will be controlled by the Report frequency. *End* can also be an event, e.g. *[Wheat].Harvesting* or a general or specific date. As with *Start* and events, treat these with caution. Always consider the interaction between the aggregation interval and the report frequency. For example if the report frequency is *[Clock].EndOfMonth*:\n\t\t\t\n\t\t\tSum of [Weather].Rain from [Report].DateOfLastOutput to [Clock].Today \nwill produce a monthly rainfall total while\n\t\t\t\n\t\t\tSum of [Weather].Rain from 1-jan to [Clock].Today \nwill produce a cumulative rainfall as the months of the year progress and the accumulation will reset again on the next 1-Jan.\n\n##Some examples\nThe figures below show some aggregation examples of daily, weekly, monthly and annual aggregation reporting maximum temperature in various ways. Note that an aggregation to the end of the simulation is also possible. See the accompanying example *Report.apsimx* for details of these aggregations.\n\n\n",
          "Name": "Reporting that is Aggregated in Time",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph.Graph, Models",
          "Caption": "At present at least Max MaxT f",
          "Axis": [
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 3,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": true,
              "CrossesAtZero": false
            },
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 0,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": false,
              "CrossesAtZero": false
            }
          ],
          "LegendPosition": 0,
          "DisabledSeries": [],
          "Name": "Maximum Temperatures with Varying Aggregation",
          "Children": [
            {
              "$type": "Models.Graph.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -990142,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "Checkpoint": "Current",
              "TableName": "ReportDaily",
              "XFieldName": "Clock.Today",
              "YFieldName": "MaxDailyMaxT",
              "X2FieldName": null,
              "Y2FieldName": null,
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Daily MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 1,
              "LineThickness": 0,
              "Checkpoint": "Current",
              "TableName": "ReportWeekly",
              "XFieldName": "Clock.Today",
              "YFieldName": "MaxWeeklyMaxT",
              "X2FieldName": null,
              "Y2FieldName": null,
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Weekly Maximum MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -2793984,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "Checkpoint": "Current",
              "TableName": "ReportMonthly",
              "XFieldName": "Clock.Today",
              "YFieldName": "MaxMonthlyMaxT",
              "X2FieldName": null,
              "Y2FieldName": null,
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Monthly Maximum MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "Checkpoint": "Current",
              "TableName": "ReportYearly",
              "XFieldName": "Clock.Today",
              "YFieldName": "MaxYearlyMaxT",
              "X2FieldName": null,
              "Y2FieldName": null,
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Yearly Maximum MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 3,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": true,
              "CrossesAtZero": false
            },
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 0,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": false,
              "CrossesAtZero": false
            }
          ],
          "LegendPosition": 0,
          "DisabledSeries": [],
          "Name": "Minimum Temperatures with Varying Aggregation",
          "Children": [
            {
              "$type": "Models.Graph.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -990142,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "Checkpoint": "Current",
              "TableName": "ReportDaily",
              "XFieldName": "Clock.Today",
              "YFieldName": "MinDailyMaxT",
              "X2FieldName": null,
              "Y2FieldName": null,
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Daily MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 1,
              "LineThickness": 0,
              "Checkpoint": "Current",
              "TableName": "ReportWeekly",
              "XFieldName": "Clock.Today",
              "YFieldName": "MinWeeklyMaxT",
              "X2FieldName": null,
              "Y2FieldName": null,
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Weekly Minimum MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -2793984,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "Checkpoint": "Current",
              "TableName": "ReportMonthly",
              "XFieldName": "Clock.Today",
              "YFieldName": "MinMonthlyMaxT",
              "X2FieldName": null,
              "Y2FieldName": null,
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Monthly Minimum MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "Checkpoint": "Current",
              "TableName": "ReportYearly",
              "XFieldName": "Clock.Today",
              "YFieldName": "MinYearlyMaxT",
              "X2FieldName": null,
              "Y2FieldName": null,
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Yearly Maximum MaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 3,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": false,
              "CrossesAtZero": false
            },
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 0,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": false,
              "CrossesAtZero": false
            }
          ],
          "LegendPosition": 0,
          "DisabledSeries": [],
          "Name": "The Min of MaxT in Daily Reporting Should be the Same as MaxT",
          "Children": [
            {
              "$type": "Models.Graph.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16736653,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 3,
              "MarkerSize": 0,
              "Line": 4,
              "LineThickness": 0,
              "Checkpoint": "Current",
              "TableName": "ReportSimple",
              "XFieldName": "MaxT",
              "YFieldName": "TestMaxT",
              "X2FieldName": null,
              "Y2FieldName": null,
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "MaxT v TestMaxT",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "IncludeInDocumentation": false,
  "Enabled": true,
  "ReadOnly": false
}