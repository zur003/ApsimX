{
  "$type": "Models.Core.Simulations, Models",
  "ExplorerWidth": 300,
  "Version": 94,
  "ApsimVersion": "0.0.0.0",
  "Name": "Simulations",
  "Children": [
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "Children": [],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Name": "MassBalanceForage",
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "This simulation checks the mass balance of animal / **plant** interactions. The plant model used is a PMF Slurp model that doesn't simulate plant growth. This makes it much easier to check mass balance.\n\nThe checks are done in the MassBalanceCalculations manager script.\n\nThe script first calculates the amount of pasture removed:\n\n\tPastureRemoved = StartOfDayPasture - EndOfDayPasture;\n\nand the weight gain of the animals on a day.\n\n\tLiveWeightGain = EndOfDayAnimal - StartOfDayAnimal;\n\nIt then calculates two balance terms that should be zero. The first checks that pasture removed = animal intake.\n\n\tLostWt = PastureRemoved.Wt - Intake.Wt; \n\nThe second checks that N in the pasture removed = excreta N + the N retained by the animal. \n\n\tLostN = PastureRemoved.N - (Excreta.N + LiveWeightGain.N);\n\nA check is then made (on day 1 of the simulation) that the faeces from the animal is added to the surface organic matter (som) model:\n\n\tif (!MathUtilities.FloatsAreEqual(animals.FaecesAll.Weight, som.Wt))\n\t\tthrow new Exception(\"Mass balance error: The animal faeces weight on day 1 is not equal to surface organic matter weight.\");\n\nA check is then made (on day 1 of the simulation) that the urine from the animal is added to the soil urea pool:\n\n\tif (!MathUtilities.FloatsAreEqual(animals.UrineNAll, MathUtilities.Sum(urea.kgha)))\n\t\tthrow new Exception(\"Mass balance error: The animal urine on day 1 is not equal to soil urea amount.\");\n\nThese last checks are only done on day 1 because flows in and out of SOM and Urea pools make it difficult to calculate mass balance. The assumption is that if it works on day 1 it works for all other days.\n",
          "Name": "Memo",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Clock, Models",
          "Start": "2000-01-01T00:00:00",
          "End": "2000-05-31T00:00:00",
          "Name": "Clock",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "CaptureErrors": true,
          "CaptureWarnings": true,
          "CaptureSummaryText": true,
          "Name": "SummaryFile",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Weather, Models",
          "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
          "ExcelWorkSheetName": "",
          "Name": "Weather",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "SoilArbitrator",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.GrazPlan.Stock, Models",
          "randFactory": {
            "$type": "StdUnits.MyRandom, Models"
          },
          "RandSeed": 9999,
          "Animals": [],
          "PaddockList": [
            {
              "$type": "Models.GrazPlan.PaddockInit, Models",
              "Forages": [],
              "Name": "",
              "Area": 1.0,
              "Slope": 0.0,
              "Excretion": null,
              "Urine": null
            }
          ],
          "EnterpriseList": [],
          "GrazingPeriods": [],
          "Name": "Stock",
          "Children": [
            {
              "$type": "Models.GrazPlan.GenotypeCross, Models",
              "MatureDeathRate": 0.0,
              "WeanerDeathRate": 0.0,
              "Conception": [
                0.0,
                1.0,
                0.0,
                0.0
              ],
              "AnimalType": null,
              "PureBredBreed": null,
              "DamBreed": "Friesian",
              "SireBreed": "Jersey",
              "Generation": 1,
              "SRW": 550.0,
              "PotFleeceWt": 0.0,
              "MaxFibreDiam": 0.0,
              "FleeceYield": 0.0,
              "PeakMilk": 35.0,
              "Name": "NZFriesianCross",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.GrazPlan.Supplement, Models",
          "SpoilageTime": 0.0,
          "Stores": [
            {
              "$type": "Models.GrazPlan.StoreType, Models",
              "Name": "fodder",
              "Stored": 0.0,
              "IsRoughage": true,
              "DMContent": 0.85,
              "DMD": 0.0,
              "MEContent": 0.0,
              "CPConc": 0.0,
              "ProtDg": 0.0,
              "PConc": 0.0,
              "SConc": 0.0,
              "EEConc": 0.0,
              "ADIP2CP": 0.0,
              "AshAlk": 0.0,
              "MaxPassage": 0.0
            },
            {
              "$type": "Models.GrazPlan.StoreType, Models",
              "Name": "wheat, crushed",
              "Stored": 500000.0,
              "IsRoughage": false,
              "DMContent": 1.0,
              "DMD": 0.9,
              "MEContent": 13.8,
              "CPConc": 0.14,
              "ProtDg": 0.92,
              "PConc": 0.0038,
              "SConc": 0.0014000000000000002,
              "EEConc": 0.02,
              "ADIP2CP": 0.02,
              "AshAlk": 0.18,
              "MaxPassage": 0.0
            },
            {
              "$type": "Models.GrazPlan.StoreType, Models",
              "Name": "silage",
              "Stored": 50000.0,
              "IsRoughage": true,
              "DMContent": 1.0,
              "DMD": 0.70000000000000007,
              "MEContent": 10.0,
              "CPConc": 0.25,
              "ProtDg": 0.8,
              "PConc": 0.0032,
              "SConc": 0.0024,
              "EEConc": 0.02,
              "ADIP2CP": 0.06,
              "AshAlk": 0.6,
              "MaxPassage": 0.0
            }
          ],
          "PaddockList": [],
          "Name": "Supplement",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "Code": "using Models.PMF.Interfaces;\r\nusing System.Diagnostics;\r\nusing Models.AgPasture;\r\nusing System.Linq;\r\nusing System.Collections.Generic;\r\nusing System.Collections;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing System.Xml.Serialization;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.GrazPlan;\r\nusing Models.Utilities;\r\nusing Models.Core;\r\nusing Models;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock clock;\r\n        [Link] Stock stock;\r\n        [Link] Supplement supplement;\r\n        [Link] List<Zone> paddocks;\r\n        [Link] ISummary summary;\r\n        [Link] Simulation farm;\r\n        [Link] List<IPlantDamage> forages = null;\r\n\r\n        private int CurrentGroupNum = 1;    // animal group number\r\n        private int CurrentLocationNum { get; set; }\r\n\r\n        [Separator(\"Stock type info, the same type of stock are brought onto the paddock at each grazing\")]\r\n\r\n        [Description(\"Stock: genotype (e.g. Small Merino, Angus, Friesian):\")] \r\n        [Display(Values=\"GetGenotypes\")]\r\n        public string Genotype { get; set; }\r\n\r\n        [Description(\"Stock: sex (Female, Male, Castrate):\")] \r\n        public ReproductiveType Sex { get; set; }\r\n\r\n        [Description(\"Stock: age (months):\")] \r\n        public double Age { get; set; }\r\n\r\n        [Description(\"Stock: weight (kg liveweight /head):\")] \r\n        public double Weight { get; set; }\r\n\r\n        [Description(\"Stock: fertility status (0 if non-pregnant or days since conception):\")] \r\n        public int Pregnant { get; set; }\r\n\r\n        [Description(\"Stock: lactation status (0 if non-lactating or days since parturition):\")]\r\n        public int Lactating { get; set; }\r\n\r\n        [Description(\"Stock: number of unweaned young:\")]\r\n        public int YoungNumber { get; set; }\r\n\r\n        [Description(\"Stock: weight of unweaned young:\")] \r\n        public double YoungWt { get; set; }\r\n\r\n        [Separator(\"Grazing event information\")]\r\n\r\n        [Description(\"Paddock stocking rate (head/ha): \")] \r\n        public double StockingRate { get; set; }\r\n\r\n        [Description(\"Initial location of the cows (give either the paddock name or 'Away'): \")] \r\n        public string CurrentLocation { get; set; }\r\n\r\n        [Description(\"Standing biomass at which to bring the stock into the simulation (kg DM/ha): \")] \r\n        public double PreGrazingDM { get; set; }\r\n\r\n        [Description(\"Standing biomass at which to exit  stock from the simulation (kg DM/ha): \")] \r\n        public double PostGrazingDM { get; set; }\r\n\r\n        [Description(\"Don't move the stock onto the crop unless there is approx. X days of grazable forage available: \")] \r\n        public int MinGrazingDays { get; set; }\r\n\r\n        [Description(\"Implement a no-grazing window? (tick for yes): \")] \r\n        public bool DoNoGrazingWindow { get; set; }\r\n\r\n        [Description(\"Start of the no-grazing window (dd-MMM)\")] \r\n        public string NoGrazeStart { get; set; }\r\n\r\n        [Description(\"End of the no-grazing window (dd-MMM)\")] \r\n        public string NoGrazeEnd { get; set; }\r\n\r\n        [Separator(\"Supplementary feeding\")]\r\n\r\n        [Description(\"Name of the supplement to feed: \")] \r\n        public string SupplementName { get; set; }\r\n\r\n        [Description(\"Feed the supplement first (i.e. before the new forage is available to the stock)?: \")] \r\n        public bool SupplementFirst { get; set; }\r\n\r\n        [Description(\"Amount of supplementary feeding offered every day (kg DM /head /day): \")] \r\n        public double SupplementEveryDay { get; set; }\r\n\r\n        [Description(\"Additional amount of supplement offered when available biomass is low (kg DM /head /day): \")] \r\n        public double SupplementOnPastureMass { get; set; }\r\n\r\n        [Description(\"Trigger biomass for above rule (kg DM /ha): \")] \r\n        public double TriggerPastureMass { get; set; }\r\n\r\n        public int NumStock { get; set; }\r\n        public bool GrazingSeasonIsOpen { get; set; } // number of cows on the whole farm\r\n        public double HarvestableBiomass { get; set; }\r\n\r\n        // Return a list of genotypes to the properties tab.\r\n        public string[] GetGenotypes()\r\n        {\r\n            if (stock != null)\r\n                return stock.Genotypes.Names.ToArray();\r\n            return null;\r\n        }\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n\r\n            //Debugger.Break();\r\n\r\n            summary.WriteMessage(this, \"Initialising the paddock information\");\r\n\r\n            NumStock = (int)(Math.Round(StockingRate * farm.Area, 0));\r\n\r\n            if ((CurrentLocation.ToLower() != \"away\") && (NumStock > 0))\r\n            {\r\n                BuyStock();\r\n                stock.Move(CurrentLocation, CurrentGroupNum);\r\n                summary.WriteMessage(this, \" The Stock have been moved to \" + CurrentLocation);\r\n            }\r\n\r\n            summary.WriteMessage(this, \"     The number of animals has been rounded to \" + NumStock + \" from \" + (StockingRate * farm.Area));\r\n            summary.WriteMessage(this, \"     The animals will begin in \" + CurrentLocation + \" which is paddock number \" + CurrentLocationNum + \" in the simulation\");\r\n            summary.WriteMessage(this, \"     The area of the whole farm is \" + farm.Area + \" ha\");\r\n\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            GrazingSeasonIsOpen = true;\r\n            if (DoNoGrazingWindow)\r\n                GrazingSeasonIsOpen = !DateUtilities.WithinDates(NoGrazeStart, clock.Today, NoGrazeEnd);\r\n\r\n            bool sellSomeStock = false;\r\n            if (!GrazingSeasonIsOpen)\r\n                sellSomeStock = true;\r\n\r\n            // Calculate forage mass in the paddock\r\n            HarvestableBiomass = 0.0;\r\n            foreach (var forage in forages)\r\n                foreach (var forageOrgan in forage.Organs)\r\n                    if (forageOrgan.IsAboveGround)\r\n                        HarvestableBiomass += forageOrgan.Live.Wt + forageOrgan.Dead.Wt;\r\n            HarvestableBiomass *= 10;  // Convert to kg/ha\r\n\r\n            if (HarvestableBiomass <= PostGrazingDM)\r\n                sellSomeStock = true;\r\n\r\n            if (CurrentLocation == \"Away\")\r\n                sellSomeStock = false;\r\n\r\n            double minFodder = 0.03 * MinGrazingDays * NumStock * Weight; // The 0.03 is the propostion of body mass that the stock might eat\r\n            if (CurrentLocation == \"Away\" && NumStock > 0 && (HarvestableBiomass >= PreGrazingDM) && HarvestableBiomass >= (PostGrazingDM + minFodder) && GrazingSeasonIsOpen)\r\n            {\r\n                CurrentLocation = paddocks[0].Name;\r\n                CurrentLocationNum = paddocks[0].Index;\r\n                BuyStock();\r\n                stock.Move(CurrentLocation, CurrentGroupNum);\r\n                summary.WriteMessage(this, \"     Buying stock \");\r\n            }\r\n\r\n            if (sellSomeStock)\r\n            {\r\n                CurrentLocation = \"Away\";\r\n                CurrentLocationNum = -1;\r\n                SellStock();\r\n                summary.WriteMessage(this, \"     Selling stock \");\r\n            }\r\n\r\n            if (CurrentLocation != \"Away\")\r\n            {\r\n                if (SupplementEveryDay > 0)\r\n                {\r\n                    double silageOnHand = supplement.Stores[2 - 1].Stored;\r\n                    if (silageOnHand < SupplementEveryDay * stock.NumberAll)\r\n                    {\r\n                        supplement.Buy(SupplementEveryDay * 30.0 * stock.NumberAll, SupplementName);  // i.e. 1 months worth\r\n                        summary.WriteMessage(this, \"SupplementEveryDay: Buying \" + SupplementName + \" of total amount : \" + (SupplementEveryDay * 90 * stock.NumberAll) + \" kg DM\");\r\n                    }\r\n                    supplement.Feed(SupplementName, SupplementEveryDay * stock.NumberAll, CurrentLocation, SupplementFirst);\r\n                }\r\n\r\n                if (SupplementOnPastureMass > 0 && HarvestableBiomass <= TriggerPastureMass)\r\n                {\r\n                    double silageOnHand = supplement.Stores[2 - 1].Stored;\r\n                    if (silageOnHand < SupplementOnPastureMass * stock.NumberAll)\r\n                    {\r\n                        supplement.Buy(SupplementOnPastureMass * 30.0 * stock.NumberAll, SupplementName);  // i.e. 1 months worth\r\n                        summary.WriteMessage(this, \"SupplementOnBiomass: Buying \" + SupplementName + \" of total amount : \" + (SupplementOnPastureMass * 90 * stock.NumberAll) + \" kg DM\");\r\n                    }\r\n                    supplement.Feed(SupplementName, SupplementOnPastureMass * stock.NumberAll, CurrentLocation, SupplementFirst);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        public void BuyStock()\r\n        {\r\n            CurrentGroupNum = stock.NoGroups + 1;\r\n            StockBuy purchase = new StockBuy();\r\n            purchase.Genotype = Genotype;\r\n            purchase.Number = NumStock;\r\n            purchase.Sex = Sex;\r\n            purchase.Age = Age;       // age in months\r\n            purchase.Weight = Weight;  // live weight in kg\r\n            purchase.UseTag = CurrentGroupNum + 1;\r\n            purchase.MatedTo = purchase.Genotype;\r\n            purchase.Pregnant = Pregnant;  // days pregnant, 0 = non pregnant, 1 = pregnant\r\n            purchase.Lactating = Lactating;  // 0 for dry, 1 for lactating\r\n            purchase.NumYoung = YoungNumber;\r\n            purchase.YoungWt = YoungWt;\r\n\r\n            stock.Buy(purchase);\r\n        }\r\n\r\n        public void SellStock()\r\n        {\r\n            int NumGroups = stock.NoGroups;\r\n\r\n            NumGroups = stock.NoGroups;\r\n            for (int gg = 1; gg <= NumGroups; gg++)\r\n            {\r\n                stock.Sell(stock.Number[gg - 1], gg);\r\n            }\r\n        }\r\n    }\r\n}\r\n",
          "Parameters": [
            {
              "Key": "Genotype",
              "Value": "NZFriesianCross"
            },
            {
              "Key": "Sex",
              "Value": "Female"
            },
            {
              "Key": "Age",
              "Value": "6"
            },
            {
              "Key": "Weight",
              "Value": "100"
            },
            {
              "Key": "Pregnant",
              "Value": "0"
            },
            {
              "Key": "Lactating",
              "Value": "0"
            },
            {
              "Key": "YoungNumber",
              "Value": "0"
            },
            {
              "Key": "YoungWt",
              "Value": "0"
            },
            {
              "Key": "StockingRate",
              "Value": "1"
            },
            {
              "Key": "CurrentLocation",
              "Value": "Paddock"
            },
            {
              "Key": "PreGrazingDM",
              "Value": "2800"
            },
            {
              "Key": "PostGrazingDM",
              "Value": "50"
            },
            {
              "Key": "MinGrazingDays",
              "Value": "0"
            },
            {
              "Key": "DoNoGrazingWindow",
              "Value": "False"
            },
            {
              "Key": "NoGrazeStart",
              "Value": "15-jun"
            },
            {
              "Key": "NoGrazeEnd",
              "Value": "31-jul"
            },
            {
              "Key": "SupplementName",
              "Value": "silage"
            },
            {
              "Key": "SupplementFirst",
              "Value": "False"
            },
            {
              "Key": "SupplementEveryDay",
              "Value": "0"
            },
            {
              "Key": "SupplementOnPastureMass",
              "Value": "0"
            },
            {
              "Key": "TriggerPastureMass",
              "Value": "2100"
            },
            {
              "Key": "NumStock",
              "Value": "0"
            },
            {
              "Key": "GrazingSeasonIsOpen",
              "Value": "False"
            },
            {
              "Key": "HarvestableBiomass",
              "Value": "0"
            }
          ],
          "Name": "GrazeForageCrop",
          "IncludeInDocumentation": false,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "Code": "using Models.Surface;\r\nusing Models.PMF.Interfaces;\r\nusing System.Diagnostics;\r\nusing Models.AgPasture;\r\nusing System.Linq;\r\nusing System.Collections.Generic;\r\nusing System.Collections;\r\nusing Models.Soils;\r\nusing Models.PMF.Organs;\r\nusing Models.PMF;\r\nusing System.Xml.Serialization;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.GrazPlan;\r\nusing Models.Interfaces;\r\nusing Models.Utilities;\r\nusing Models.Core;\r\nusing Models;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock clock;\r\n        [Link] IOrganDamage[] forages;\r\n        [Link] Stock animals;\r\n        [Link] Zone paddocks;\r\n        [Link] ISummary summary;\r\n        [Link] Simulation farm;\r\n        [Link] Supplement supplement;\r\n        [Link] SurfaceOrganicMatter som;\r\n        [Link(ByName=true)] ISolute urea;\r\n\r\n        public BiomassAndN StartOfDayPasture { get; set; }\r\n        public BiomassAndN EndOfDayPasture { get; set; }\r\n        public BiomassAndN StartOfDaySupplement { get; set; }\r\n        public BiomassAndN EndOfDaySupplement { get; set; }\r\n        public BiomassAndN StartOfDayAnimal { get; set; }\r\n        public BiomassAndN EndOfDayAnimal { get; set; }\r\n        public BiomassAndN PastureRemoved { get; set; }\r\n        public BiomassAndN SupplementRemoved { get; set; }\r\n        public BiomassAndN LiveWeightGain { get; set; }\r\n        public BiomassAndN Intake { get; set; }\r\n        public BiomassAndN Excreta { get; set; }\r\n\r\n        public double LostN { get; set; } \r\n        public double LostWt { get; set; } \r\n\r\n        // Start of simulation\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStart(object sender, EventArgs e)\r\n        {\r\n            forages = forages.Where(forage => forage.IsAboveGround && !(forage is SurfaceOrganicMatter)).ToArray();\r\n        }\r\n\r\n        // Start of day\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            StartOfDaySupplement = new BiomassAndN() \r\n            { \r\n                Wt = supplement.Stores.Sum(supp => supp.Stored),\r\n                N = supplement.Stores[1].CPConc / 6.25 * supplement.Stores.Sum(supp => supp.Stored),\r\n            };\r\n            StartOfDayPasture = new BiomassAndN() \r\n            { \r\n                Wt = forages.Sum(forage => forage.Live.Wt * 10),\r\n                N = forages.Sum(forage => forage.Live.N * 10),\r\n            };\r\n            StartOfDayAnimal = new BiomassAndN() \r\n            { \r\n                Wt = animals.WeightAll,\r\n                N = 0,\r\n            };\r\n        }\r\n\r\n        // End of day\r\n        [EventSubscribe(\"DoManagementCalculations\")]\r\n        private void OnDoManagementCalculations(object sender, EventArgs e)\r\n        {\r\n            EndOfDaySupplement = new BiomassAndN() \r\n            { \r\n                Wt = supplement.Stores.Sum(supp => supp.Stored),\r\n                N = supplement.Stores[1].CPConc / 6.25 * supplement.Stores.Sum(supp => supp.Stored),\r\n            };\r\n            EndOfDayPasture = new BiomassAndN() \r\n            { \r\n                Wt = forages.Sum(forage => forage.Live.Wt * 10),\r\n                N = forages.Sum(forage => forage.Live.N * 10),\r\n            };\r\n            EndOfDayAnimal = new BiomassAndN() \r\n            { \r\n                Wt = animals.WeightAll,\r\n                N = animals.RetainedNAll,    // kg/d\r\n            };\r\n\r\n            Intake = new BiomassAndN()\r\n            {\r\n                Wt = animals.IntakeAll.Weight,\r\n                N = animals.IntakeAll.N,\r\n            };\r\n            Excreta = new BiomassAndN()\r\n            {\r\n                Wt = animals.FaecesAll.Weight,\r\n                N = animals.FaecesAll.N + animals.UrineNAll,\r\n            };\r\n\r\n            PastureRemoved = StartOfDayPasture - EndOfDayPasture;\r\n            SupplementRemoved = StartOfDaySupplement - EndOfDaySupplement;\r\n            LiveWeightGain = EndOfDayAnimal - StartOfDayAnimal;\r\n\r\n            // balance calculations\r\n            LostWt = PastureRemoved.Wt - Intake.Wt; \r\n            LostN = PastureRemoved.N - (Excreta.N + LiveWeightGain.N);  \r\n\r\n            if (!MathUtilities.FloatsAreEqual(LostWt, 0))\r\n                throw new Exception(\"Mass balance error: Forage mass removed is not equal to animal intake.\");\r\n            if (!MathUtilities.FloatsAreEqual(LostN, 0))\r\n                throw new Exception(\"Mass balance error: N balance error.\");\r\n\r\n            if (clock.Today.DayOfYear == 1)\r\n            {\r\n                if (!MathUtilities.FloatsAreEqual(animals.FaecesAll.Weight, som.Wt))\r\n                    throw new Exception(\"Mass balance error: The animal faeces weight on day 1 is not equal to surface organic matter weight.\");\r\n                if (!MathUtilities.FloatsAreEqual(animals.UrineNAll, MathUtilities.Sum(urea.kgha)))\r\n                    throw new Exception(\"Mass balance error: The animal urine on day 1 is not equal to soil urea amount.\");\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // Helper class for containing a mass and and N concentration.\r\n    [Serializable]\r\n    public class BiomassAndN\r\n    {\r\n        public double Wt { get; set; }\r\n        public double N { get; set; }\r\n        public static BiomassAndN operator +(BiomassAndN a, BiomassAndN b)\r\n        {\r\n            return new BiomassAndN()\r\n            {\r\n                Wt = a.Wt + b.Wt,\r\n                N = a.N + b.N,\r\n            };\r\n\r\n        }\r\n        public static BiomassAndN operator -(BiomassAndN a, BiomassAndN b)\r\n        {\r\n            return new BiomassAndN()\r\n            {\r\n                Wt = a.Wt - b.Wt,\r\n                N = a.N - b.N,\r\n            };\r\n        }\r\n    }\r\n}\r\n",
          "Parameters": [
            {
              "Key": "StartOfDayPasture",
              "Value": ""
            },
            {
              "Key": "EndOfDayPasture",
              "Value": ""
            },
            {
              "Key": "StartOfDaySupplement",
              "Value": ""
            },
            {
              "Key": "EndOfDaySupplement",
              "Value": ""
            },
            {
              "Key": "StartOfDayAnimal",
              "Value": ""
            },
            {
              "Key": "EndOfDayAnimal",
              "Value": ""
            },
            {
              "Key": "PastureRemoved",
              "Value": ""
            },
            {
              "Key": "SupplementRemoved",
              "Value": ""
            },
            {
              "Key": "LiveWeightGain",
              "Value": ""
            },
            {
              "Key": "Intake",
              "Value": ""
            },
            {
              "Key": "Excreta",
              "Value": ""
            },
            {
              "Key": "LostN",
              "Value": "0"
            },
            {
              "Key": "LostWt",
              "Value": "0"
            }
          ],
          "Name": "MassBalanceCalculations",
          "IncludeInDocumentation": false,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Report, Models",
          "VariableNames": [
            "[Clock].Today as Date",
            "[Stock].NumberAll",
            "[Stock].WeightAll",
            "[MassBalanceCalculations].Script.SupplementRemoved as SupplementRemoved",
            "[MassBalanceCalculations].Script.PastureRemoved as PastureRemoved",
            "[MassBalanceCalculations].Script.Intake as Intake",
            "[MassBalanceCalculations].Script.Excreta as Excreta",
            "[MassBalanceCalculations].Script.LiveWeightGain as LiveWeightGain",
            "[MassBalanceCalculations].Script.LostN as LostN",
            "[MassBalanceCalculations].Script.LostWt as LostWt",
            "[SurfaceOrganicMatter].Wt",
            "[SurfaceOrganicMatter].N",
            "[Stock].FaecesAll",
            "[Stock].UrineNAll",
            "sum([Urea].kgha) as SoilUrea"
          ],
          "EventNames": [
            "[Clock].EndOfDay"
          ],
          "GroupByVariableName": null,
          "Name": "Report",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Paddock",
          "Children": [
            {
              "$type": "Models.Manager, Models",
              "Code": "using System.Linq;\r\nusing System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.PMF.Organs;\r\nusing System.Data;\r\n    \r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Plant slurp;\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            var slurpLeaf = Apsim.Child(slurp, typeof(SimpleLeaf)) as SimpleLeaf;\r\n\r\n            double wt = 500; // g/m2\r\n            slurpLeaf.Live.StructuralWt = wt;\r\n            slurpLeaf.Live.StorageWt = 0;\r\n            slurpLeaf.Live.StructuralN = wt * slurpLeaf.MinNconc;\r\n            slurpLeaf.Live.StorageN = wt * slurpLeaf.MaxNconc - slurpLeaf.Live.StructuralN;\r\n        }\r\n    }\r\n}\r\n",
              "Parameters": [],
              "Name": "SlurpSetup",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "CropType": "Slurp",
              "ResourceName": "Slurp",
              "Name": "Slurp",
              "IncludeInDocumentation": false,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "InitialResidueName": "wheat_stubble",
              "InitialResidueType": "wheat",
              "InitialResidueMass": 0.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 100.0,
              "ResourceName": "SurfaceOrganicMatter",
              "Name": "SurfaceOrganicMatter",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": "Vertosol",
              "ASCSubOrder": "Black",
              "SoilType": "Clay",
              "LocalName": null,
              "Site": "Norwin",
              "NearestTown": "Norwin",
              "Region": "Darling Downs and Granite Belt",
              "State": "Queensland",
              "Country": "Australia",
              "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
              "ApsoilNumber": "900",
              "Latitude": -27.581836,
              "Longitude": 151.320206,
              "LocationAccuracy": " +/- 20m",
              "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
              "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
              "Name": "Soil",
              "Children": [
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "ParticleSizeClay": null,
                  "ParticleSizeSand": null,
                  "ParticleSizeSilt": null,
                  "BD": [
                    1.01056473311131,
                    1.07145631083388,
                    1.09393858528057,
                    1.15861335018721,
                    1.17301160318016,
                    1.16287303586874,
                    1.18749547755906
                  ],
                  "AirDry": [
                    0.130250054518252,
                    0.198689390775399,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "LL15": [
                    0.260500109036505,
                    0.248361738469248,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "DUL": [
                    0.52100021807301,
                    0.496723476938497,
                    0.488437607673005,
                    0.480296969355493,
                    0.471583596524955,
                    0.457070570557793,
                    0.452331759845006
                  ],
                  "SAT": [
                    0.588654817693846,
                    0.565676863836273,
                    0.557192986686577,
                    0.532787415023694,
                    0.527354112007486,
                    0.531179986464627,
                    0.521888499034317
                  ],
                  "KS": [
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0
                  ],
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "Name": "Physical",
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.06,
                        0.06,
                        0.06,
                        0.04,
                        0.04,
                        0.02,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "SlurpSoil",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 5.0,
                  "SummerCona": 5.0,
                  "WinterDate": "1-Apr",
                  "WinterU": 5.0,
                  "WinterCona": 5.0,
                  "DiffusConst": 40.0,
                  "DiffusSlope": 16.0,
                  "Salb": 0.12,
                  "CN2Bare": 73.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "Slope": "NaN",
                  "DischargeWidth": "NaN",
                  "CatchmentArea": "NaN",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "SWCON": [
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3
                  ],
                  "KLAT": null,
                  "ResourceName": "WaterBalance",
                  "Name": "SoilWater",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.SoilNitrogen, Models",
                  "fom_types": [
                    "default",
                    "manure",
                    "mucuna",
                    "lablab",
                    "shemp",
                    "stable"
                  ],
                  "fract_carb": [
                    0.2,
                    0.3,
                    0.54,
                    0.57,
                    0.45,
                    0.0
                  ],
                  "fract_cell": [
                    0.7,
                    0.3,
                    0.37,
                    0.37,
                    0.47,
                    0.1
                  ],
                  "fract_lign": [
                    0.1,
                    0.4,
                    0.09,
                    0.06,
                    0.08,
                    0.9
                  ],
                  "Name": "SoilNitrogen",
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilNitrogenNO3, Models",
                      "Name": "NO3",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenNH4, Models",
                      "Name": "NH4",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenUrea, Models",
                      "Name": "Urea",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                      "Name": "PlantAvailableNO3",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                      "Name": "PlantAvailableNH4",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    1.2,
                    0.96,
                    0.6,
                    0.3,
                    0.18,
                    0.12,
                    0.12
                  ],
                  "SoilCNRatio": [
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0
                  ],
                  "FBiom": [
                    0.04,
                    0.02,
                    0.02,
                    0.02,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "FInert": [
                    0.4,
                    0.6,
                    0.8,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "FOM": [
                    347.12903231275641,
                    270.3443621919937,
                    163.97214434990104,
                    99.454132887040629,
                    60.321980831124677,
                    36.587130828674873,
                    22.1912165985086
                  ],
                  "Name": "Organic",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "NO3N": [
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "NH4N": [
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1
                  ],
                  "PH": [
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0
                  ],
                  "CL": null,
                  "EC": null,
                  "ESP": null,
                  "Name": "Chemical",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.InitialWater, Models",
                  "PercentMethod": 1,
                  "FractionFull": 1.0,
                  "DepthWetSoil": "NaN",
                  "RelativeTo": null,
                  "Name": "InitialWater",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Sample, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "NO3N": null,
                  "NH4N": null,
                  "SW": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "OC": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "EC": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "CL": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "ESP": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "PH": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "SWUnits": 0,
                  "OCUnits": 0,
                  "PHUnits": 0,
                  "Name": "InitialN",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "CERESSoilTemperature",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "Name": "MassBalanceFeedlot",
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "This simulation checks the mass balance of animal / **supplement** interactions. The checks are done in the MassBalanceCalculations manager script.\n\nThe script first calculates the amount of pasture removed:\n\n\tPastureRemoved = StartOfDayPasture - EndOfDayPasture;\n\nand the weight gain of the animals on a day.\n\n\tLiveWeightGain = EndOfDayAnimal - StartOfDayAnimal;\n\nIt then calculates two balance terms that should be zero. The first checks that supplement removed = animal intake.\n\n\tLostWt = SupplementRemoved.Wt - Intake.Wt; \n\nThe second checks that N in the pasture removed = excreta N + the N retained by the animal. \n\n\tLostN = PastureRemoved.N - (Excreta.N + LiveWeightGain.N);\t\n\nA check is then made (on day 1 of the simulation) that the faeces from the animal is added to the surface organic matter (som) model:\n\n\tif (!MathUtilities.FloatsAreEqual(animals.FaecesAll.Weight, som.Wt))\n\t\tthrow new Exception(\"Mass balance error: The animal faeces weight on day 1 is not equal to surface organic matter weight.\");\n\nA check is then made (on day 1 of the simulation) that the urine from the animal is added to the soil urea pool:\n\n\tif (!MathUtilities.FloatsAreEqual(animals.UrineNAll, MathUtilities.Sum(urea.kgha)))\n\t\tthrow new Exception(\"Mass balance error: The animal urine on day 1 is not equal to soil urea amount.\");\n\nThese last checks are only done on day 1 because flows in and out of SOM and Urea pools make it difficult to calculate mass balance. The assumption is that if it works on day 1 it works for all other days.",
          "Name": "Memo",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Clock, Models",
          "Start": "2000-01-01T00:00:00",
          "End": "2000-05-31T00:00:00",
          "Name": "Clock",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "CaptureErrors": true,
          "CaptureWarnings": true,
          "CaptureSummaryText": true,
          "Name": "SummaryFile",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Weather, Models",
          "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
          "ExcelWorkSheetName": "",
          "Name": "Weather",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "SoilArbitrator",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.GrazPlan.Stock, Models",
          "randFactory": {
            "$type": "StdUnits.MyRandom, Models"
          },
          "RandSeed": 9999,
          "Animals": [],
          "PaddockList": [
            {
              "$type": "Models.GrazPlan.PaddockInit, Models",
              "Forages": [],
              "Name": "",
              "Area": 1.0,
              "Slope": 0.0,
              "Excretion": null,
              "Urine": null
            }
          ],
          "EnterpriseList": [],
          "GrazingPeriods": [],
          "Name": "Stock",
          "Children": [
            {
              "$type": "Models.GrazPlan.GenotypeCross, Models",
              "MatureDeathRate": 0.0,
              "WeanerDeathRate": 0.0,
              "Conception": [
                0.0,
                1.0,
                0.0,
                0.0
              ],
              "AnimalType": null,
              "PureBredBreed": null,
              "DamBreed": "Friesian",
              "SireBreed": "Jersey",
              "Generation": 1,
              "SRW": 550.0,
              "PotFleeceWt": 0.0,
              "MaxFibreDiam": 0.0,
              "FleeceYield": 0.0,
              "PeakMilk": 35.0,
              "Name": "NZFriesianCross",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.GrazPlan.Supplement, Models",
          "SpoilageTime": 0.0,
          "Stores": [
            {
              "$type": "Models.GrazPlan.StoreType, Models",
              "Name": "fodder",
              "Stored": 0.0,
              "IsRoughage": true,
              "DMContent": 0.85,
              "DMD": 0.0,
              "MEContent": 0.0,
              "CPConc": 0.0,
              "ProtDg": 0.0,
              "PConc": 0.0,
              "SConc": 0.0,
              "EEConc": 0.0,
              "ADIP2CP": 0.0,
              "AshAlk": 0.0,
              "MaxPassage": 0.0
            },
            {
              "$type": "Models.GrazPlan.StoreType, Models",
              "Name": "silage",
              "Stored": 50000.0,
              "IsRoughage": true,
              "DMContent": 1.0,
              "DMD": 0.70000000000000007,
              "MEContent": 10.0,
              "CPConc": 0.25,
              "ProtDg": 0.8,
              "PConc": 0.0032,
              "SConc": 0.0024,
              "EEConc": 0.02,
              "ADIP2CP": 0.06,
              "AshAlk": 0.6,
              "MaxPassage": 0.0
            }
          ],
          "PaddockList": [],
          "Name": "Supplement",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "Code": "using System.Linq;\r\nusing System;\r\nusing Models.Core;\r\nusing Models.Utilities;\r\nusing Models.GrazPlan;\r\nusing APSIM.Shared.Utilities;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock Calendar;\r\n        [Link] Stock Animals;\r\n        [Link] Supplement Feed;\r\n\r\n        private double sale_age = 3.0;\r\n        private int no_to_buy;\r\n        private int group_count;\r\n        private int g;\r\n        \r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            // purchase animals annually\r\n            if (DateUtilities.DatesEqual(\"01 JAN\", Calendar.Today))\r\n            {\r\n                g = Animals.NoGroups + 1;\r\n                no_to_buy = 1;\r\n                \r\n                StockBuy purchase = new StockBuy();\r\n                purchase.Genotype = \"small merino\";\r\n                purchase.Number = no_to_buy;\r\n                purchase.Sex = ReproductiveType.Castrate;\r\n                purchase.Age = 12;\r\n                purchase.Weight = 45.0;\r\n                purchase.UseTag = g + 1;\r\n                \r\n                Animals.Buy(purchase);\r\n                Animals.Move(\"Feedlot\", g);\r\n            }\r\n\r\n            // Shearing all animals\r\n            if (DateUtilities.DatesEqual(\"15 Dec\", Calendar.Today))\r\n            {\r\n                Animals.Shear(\"\");\r\n            }\r\n            \r\n            // Sell cast for age animals\r\n            if (DateUtilities.DatesEqual(\"20 Dec\", Calendar.Today))\r\n            {\r\n                group_count = Animals.NoGroups;\r\n                for (g = 1; g <= group_count; g++)\r\n                {\r\n                    StockSplit split = new StockSplit();\r\n                    split.Group = g;\r\n                    split.Type = \"age\";\r\n                    split.Value = 365 * sale_age;\r\n                    Animals.Split(split);                   // older animals into a new group\r\n                }\r\n\r\n                for (g = 1; g <= Animals.NoGroups; g++)\r\n                {\r\n                    if (Animals.Age[g - 1] >= 365 * sale_age)\r\n                        Animals.Sell(Animals.Number[g - 1], g);\r\n                }\r\n            }\r\n            \r\n            if (Animals.NumberAll > 0)\r\n                Feed.Feed(\"silage\", 0.8 * Animals.NumberAll, \"Feedlot\");\r\n        }\r\n    }\r\n}\r\n",
          "Parameters": [],
          "Name": "ManageStock",
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "Code": "using Models.Surface;\r\nusing Models.PMF.Interfaces;\r\nusing System.Diagnostics;\r\nusing Models.AgPasture;\r\nusing System.Linq;\r\nusing System.Collections.Generic;\r\nusing System.Collections;\r\nusing Models.Soils;\r\nusing Models.PMF.Organs;\r\nusing Models.PMF;\r\nusing System.Xml.Serialization;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.GrazPlan;\r\nusing Models.Interfaces;\r\nusing Models.Utilities;\r\nusing Models.Core;\r\nusing Models;\r\nusing System;\r\n\r\nnamespace Models\r\n{\r\n\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock clock;\r\n        [Link] IOrganDamage[] forages;\r\n        [Link] Stock animals;\r\n        [Link] Zone paddocks;\r\n        [Link] ISummary summary;\r\n        [Link] Simulation farm;\r\n        [Link] Supplement supplement;\r\n        [Link] SurfaceOrganicMatter som;\r\n        [Link(ByName=true)] ISolute urea;\r\n\r\n        public BiomassAndN StartOfDayPasture { get; set; }\r\n        public BiomassAndN EndOfDayPasture { get; set; }\r\n        public BiomassAndN StartOfDaySupplement { get; set; }\r\n        public BiomassAndN EndOfDaySupplement { get; set; }\r\n        public BiomassAndN StartOfDayAnimal { get; set; }\r\n        public BiomassAndN EndOfDayAnimal { get; set; }\r\n        public BiomassAndN PastureRemoved { get; set; }\r\n        public BiomassAndN SupplementRemoved { get; set; }\r\n        public BiomassAndN LiveWeightGain { get; set; }\r\n        public BiomassAndN Intake { get; set; }\r\n        public BiomassAndN Excreta { get; set; }\r\n       \r\n        public double LostN { get; set; } \r\n        public double LostWt { get; set; } \r\n\r\n\r\n\r\n        // Start of simulation\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStart(object sender, EventArgs e)\r\n        {\r\n            forages = forages.Where(forage => forage.IsAboveGround && !(forage is SurfaceOrganicMatter)).ToArray();\r\n        }\r\n\r\n        // Start of day\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            StartOfDaySupplement = new BiomassAndN() \r\n            { \r\n                Wt = supplement.Stores.Sum(supp => supp.Stored),\r\n                N = supplement.Stores[1].CPConc / 6.25 * supplement.Stores.Sum(supp => supp.Stored),\r\n            };\r\n            StartOfDayPasture = new BiomassAndN() \r\n            { \r\n                Wt = forages.Sum(forage => forage.Live.Wt * 10),\r\n                N = forages.Sum(forage => forage.Live.N * 10),\r\n            };\r\n            StartOfDayAnimal = new BiomassAndN() \r\n            { \r\n                Wt = animals.WeightAll,\r\n                N = 0,\r\n            };\r\n        }\r\n\r\n        // End of day\r\n        [EventSubscribe(\"DoManagementCalculations\")]\r\n        private void OnDoManagementCalculations(object sender, EventArgs e)\r\n        {\r\n            EndOfDaySupplement = new BiomassAndN() \r\n            { \r\n                Wt = supplement.Stores.Sum(supp => supp.Stored),\r\n                N = supplement.Stores[1].CPConc / 6.25 * supplement.Stores.Sum(supp => supp.Stored),\r\n            };\r\n            EndOfDayPasture = new BiomassAndN() \r\n            { \r\n                Wt = forages.Sum(forage => forage.Live.Wt * 10),\r\n                N = forages.Sum(forage => forage.Live.N * 10),\r\n            };\r\n            EndOfDayAnimal = new BiomassAndN() \r\n            { \r\n                Wt = animals.WeightAll,\r\n                N = animals.RetainedNAll,   // kg/d\r\n            };\r\n\r\n            Intake = new BiomassAndN()\r\n            {\r\n                Wt = animals.IntakeAll.Weight,\r\n                N = animals.IntakeAll.N,\r\n            };\r\n            Excreta = new BiomassAndN()\r\n            {\r\n                Wt = animals.FaecesAll.Weight,\r\n                N = animals.FaecesAll.N + animals.UrineNAll,\r\n            };\r\n\r\n            PastureRemoved = StartOfDayPasture - EndOfDayPasture;\r\n            SupplementRemoved = StartOfDaySupplement - EndOfDaySupplement;\r\n            LiveWeightGain = EndOfDayAnimal - StartOfDayAnimal;\r\n            //  do a balance calc\r\n            LostN = SupplementRemoved.N - (Excreta.N + LiveWeightGain.N);  \r\n            LostWt = SupplementRemoved.Wt - animals.IntakeAll.Weight; \r\n\r\n            if (!MathUtilities.FloatsAreEqual(LostWt, 0))\r\n                throw new Exception(\"Mass balance between supplement and stock has not been maintained: \" + LostWt.ToString());\r\n            if (!MathUtilities.FloatsAreEqual(LostN, 0))\r\n                throw new Exception(\"Nitrogen mass balance between supplement and stock has not been maintained: \" + LostN.ToString());\r\n\r\n            if (clock.Today.DayOfYear == 1)\r\n            {\r\n                if (!MathUtilities.FloatsAreEqual(animals.FaecesAll.Weight, som.Wt))\r\n                    throw new Exception(\"Mass balance error: The animal faeces weight on day 1 is not equal to surface organic matter weight.\");\r\n                if (!MathUtilities.FloatsAreEqual(animals.UrineNAll, MathUtilities.Sum(urea.kgha)))\r\n                    throw new Exception(\"Mass balance error: The animal urine on day 1 is not equal to soil urea amount.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Helper class for containing a mass and and N concentration.\r\n    [Serializable]\r\n    public class BiomassAndN\r\n    {\r\n        public double Wt { get; set; }\r\n        public double N { get; set; }\r\n        public static BiomassAndN operator +(BiomassAndN a, BiomassAndN b)\r\n        {\r\n            return new BiomassAndN()\r\n            {\r\n                Wt = a.Wt + b.Wt,\r\n                N = a.N + b.N,\r\n            };\r\n\r\n        }\r\n        public static BiomassAndN operator -(BiomassAndN a, BiomassAndN b)\r\n        {\r\n            return new BiomassAndN()\r\n            {\r\n                Wt = a.Wt - b.Wt,\r\n                N = a.N - b.N,\r\n            };\r\n        }\r\n    }\r\n}\r\n",
          "Parameters": [
            {
              "Key": "StartOfDayPasture",
              "Value": ""
            },
            {
              "Key": "EndOfDayPasture",
              "Value": ""
            },
            {
              "Key": "StartOfDaySupplement",
              "Value": ""
            },
            {
              "Key": "EndOfDaySupplement",
              "Value": ""
            },
            {
              "Key": "StartOfDayAnimal",
              "Value": ""
            },
            {
              "Key": "EndOfDayAnimal",
              "Value": ""
            },
            {
              "Key": "PastureRemoved",
              "Value": ""
            },
            {
              "Key": "SupplementRemoved",
              "Value": ""
            },
            {
              "Key": "LiveWeightGain",
              "Value": ""
            },
            {
              "Key": "Intake",
              "Value": ""
            },
            {
              "Key": "Excreta",
              "Value": ""
            },
            {
              "Key": "LostN",
              "Value": "0"
            },
            {
              "Key": "LostWt",
              "Value": "0"
            }
          ],
          "Name": "MassBalanceCalculations",
          "IncludeInDocumentation": false,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Report, Models",
          "VariableNames": [
            "[Clock].Today as Date",
            "[Stock].NumberAll",
            "[Stock].WeightAll",
            "[MassBalanceCalculations].Script.SupplementRemoved as SupplementRemoved",
            "[MassBalanceCalculations].Script.PastureRemoved as PastureRemoved",
            "[MassBalanceCalculations].Script.Intake as Intake",
            "[MassBalanceCalculations].Script.Excreta as Excreta",
            "[MassBalanceCalculations].Script.LiveWeightGain as LiveWeightGain",
            "[MassBalanceCalculations].Script.LostN as LostN",
            "[MassBalanceCalculations].Script.LostWt as LostWt",
            "[SurfaceOrganicMatter].Wt",
            "[SurfaceOrganicMatter].N",
            "[Stock].FaecesAll",
            "[Stock].UrineNAll",
            "sum([Urea].kgha) as SoilUrea"
          ],
          "EventNames": [
            "[Clock].EndOfDay"
          ],
          "GroupByVariableName": null,
          "Name": "Report",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Feedlot",
          "Children": [
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "InitialResidueName": "wheat_stubble",
              "InitialResidueType": "wheat",
              "InitialResidueMass": 0.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 100.0,
              "ResourceName": "SurfaceOrganicMatter",
              "Name": "SurfaceOrganicMatter",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": "Vertosol",
              "ASCSubOrder": "Black",
              "SoilType": "Clay",
              "LocalName": null,
              "Site": "Norwin",
              "NearestTown": "Norwin",
              "Region": "Darling Downs and Granite Belt",
              "State": "Queensland",
              "Country": "Australia",
              "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
              "ApsoilNumber": "900",
              "Latitude": -27.581836,
              "Longitude": 151.320206,
              "LocationAccuracy": " +/- 20m",
              "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
              "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
              "Name": "Soil",
              "Children": [
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "ParticleSizeClay": null,
                  "ParticleSizeSand": null,
                  "ParticleSizeSilt": null,
                  "BD": [
                    1.01056473311131,
                    1.07145631083388,
                    1.09393858528057,
                    1.15861335018721,
                    1.17301160318016,
                    1.16287303586874,
                    1.18749547755906
                  ],
                  "AirDry": [
                    0.130250054518252,
                    0.198689390775399,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "LL15": [
                    0.260500109036505,
                    0.248361738469248,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "DUL": [
                    0.52100021807301,
                    0.496723476938497,
                    0.488437607673005,
                    0.480296969355493,
                    0.471583596524955,
                    0.457070570557793,
                    0.452331759845006
                  ],
                  "SAT": [
                    0.588654817693846,
                    0.565676863836273,
                    0.557192986686577,
                    0.532787415023694,
                    0.527354112007486,
                    0.531179986464627,
                    0.521888499034317
                  ],
                  "KS": [
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0
                  ],
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "Name": "Physical",
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.06,
                        0.06,
                        0.06,
                        0.04,
                        0.04,
                        0.02,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "SlurpSoil",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 5.0,
                  "SummerCona": 5.0,
                  "WinterDate": "1-Apr",
                  "WinterU": 5.0,
                  "WinterCona": 5.0,
                  "DiffusConst": 40.0,
                  "DiffusSlope": 16.0,
                  "Salb": 0.12,
                  "CN2Bare": 73.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "Slope": "NaN",
                  "DischargeWidth": "NaN",
                  "CatchmentArea": "NaN",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "SWCON": [
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3
                  ],
                  "KLAT": null,
                  "ResourceName": "WaterBalance",
                  "Name": "SoilWater",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.SoilNitrogen, Models",
                  "fom_types": [
                    "default",
                    "manure",
                    "mucuna",
                    "lablab",
                    "shemp",
                    "stable"
                  ],
                  "fract_carb": [
                    0.2,
                    0.3,
                    0.54,
                    0.57,
                    0.45,
                    0.0
                  ],
                  "fract_cell": [
                    0.7,
                    0.3,
                    0.37,
                    0.37,
                    0.47,
                    0.1
                  ],
                  "fract_lign": [
                    0.1,
                    0.4,
                    0.09,
                    0.06,
                    0.08,
                    0.9
                  ],
                  "Name": "SoilNitrogen",
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilNitrogenNO3, Models",
                      "Name": "NO3",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenNH4, Models",
                      "Name": "NH4",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenUrea, Models",
                      "Name": "Urea",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                      "Name": "PlantAvailableNO3",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                      "Name": "PlantAvailableNH4",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    1.2,
                    0.96,
                    0.6,
                    0.3,
                    0.18,
                    0.12,
                    0.12
                  ],
                  "SoilCNRatio": [
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0
                  ],
                  "FBiom": [
                    0.04,
                    0.02,
                    0.02,
                    0.02,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "FInert": [
                    0.4,
                    0.6,
                    0.8,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "FOM": [
                    347.12903231275641,
                    270.3443621919937,
                    163.97214434990104,
                    99.454132887040629,
                    60.321980831124677,
                    36.587130828674873,
                    22.1912165985086
                  ],
                  "Name": "Organic",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "NO3N": [
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "NH4N": [
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1
                  ],
                  "PH": [
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0
                  ],
                  "CL": null,
                  "EC": null,
                  "ESP": null,
                  "Name": "Chemical",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.InitialWater, Models",
                  "PercentMethod": 1,
                  "FractionFull": 1.0,
                  "DepthWetSoil": "NaN",
                  "RelativeTo": null,
                  "Name": "InitialWater",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Sample, Models",
                  "Depth": [
                    "0-15",
                    "15-30",
                    "30-60",
                    "60-90",
                    "90-120",
                    "120-150",
                    "150-180"
                  ],
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "NO3N": null,
                  "NH4N": null,
                  "SW": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "OC": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "EC": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "CL": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "ESP": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "PH": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "SWUnits": 0,
                  "OCUnits": 0,
                  "PHUnits": 0,
                  "Name": "InitialN",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "CERESSoilTemperature",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "IncludeInDocumentation": true,
  "Enabled": true,
  "ReadOnly": false
}