{
  "$type": "Models.Core.Simulations, Models",
  "ExplorerWidth": 282,
  "Version": 80,
  "ApsimVersion": "Version 0.0.0.0, built 2020-03-06",
  "Name": "Simulations",
  "Children": [
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "Children": [
        {
          "$type": "Models.PostSimulationTools.ExcelInput, Models",
          "FileNames": [
            "PatchyMcPatchFace.xlsx"
          ],
          "SheetNames": [
            "Sheet1"
          ],
          "Name": "ExcelInput",
          "Children": [],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.PostSimulationTools.PredictedObserved, Models",
          "PredictedTableName": "ReportingWithPatches",
          "ObservedTableName": "ReportingWithPatches",
          "FieldNameUsedForMatch": "Date",
          "FieldName2UsedForMatch": null,
          "FieldName3UsedForMatch": null,
          "Name": "PredictedObserved",
          "Children": [
            {
              "$type": "Models.Tests, Models",
              "AcceptedStats": [
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "AreaUrinePatchesToday",
                  "n": 1098,
                  "Slope": "NaN",
                  "Intercept": "NaN",
                  "SEslope": "NaN",
                  "SEintercept": "NaN",
                  "R2": "NaN",
                  "RMSE": 0.0,
                  "NSE": "NaN",
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": "NaN"
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "Denit",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "dltOrgC",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "dltOrgN",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "Fixation",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "HerbageGrazed",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "HerbageGrazedN",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "LeachN",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "MinN",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "Month",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "NH4N",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "NHA",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "NO3N",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "NumPatches",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "UreaN",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "UrineNReturned",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "Year",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                }
              ],
              "AcceptedStatsName": "Name n Slope Intercept SEslope SEintercept R2 RMSE NSE ME MAE RSR",
              "POName": "PredictedObserved",
              "Name": "Tests",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowPageOfGraphs": true,
      "Name": "PatchyMcPatchFace",
      "Children": [
        {
          "$type": "Models.Core.Simulation, Models",
          "Name": "ExplicitGrazedPaddock",
          "Children": [
            {
              "$type": "Models.Clock, Models",
              "Start": "1972-01-01T00:00:00",
              "End": "1972-12-31T00:00:00",
              "Name": "Clock",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Summary, Models",
              "CaptureErrors": true,
              "CaptureWarnings": true,
              "CaptureSummaryText": true,
              "Name": "SummaryFile",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using Models.Interfaces;\r\nusing System.Diagnostics;\r\nusing System.Collections.Generic;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.Surface;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.AgPasture;\r\nusing Models.Zones;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing Models.Core;\r\nusing Models.AgPasture;\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        [Link] private Clock Clock;\r\n        [Link] private Soil soil;\r\n        [Link] private ISummary summary;\r\n        [Link] private Weather Weather;\r\n        [Link] private Zone myZone;\r\n        public string SoilType;\r\n        public string SimLocation;\r\n        public string SetIrrigation;\r\n        public string GeneralFertType;\r\n        public double GeneralFertAmt;\r\n        public string PastureType;\r\n        public int PatchCount;\r\n        private double iniOrgC;\r\n        private double iniOrgN;\r\n        private double NewArea;\r\n        private Sward sward;\r\n\r\n        public  event AddSoilCNPatchDelegate AddSoilCNPatch;\r\n        public  event BiomassRemovedDelegate BiomassRemoved;\r\n        [Link(ByName = true)]\r\n        private SoilNitrogen SoilNitrogen;\r\n\r\n\r\n        public int DaysSinceCut = 0;\r\n        public int PatchNumForFert = -1;\r\n\r\n        private int NumPaddocks = 0; // NumPaddocks is the number of AgPastures and SoilWats etc\r\n        private int NumPatchesForFertiliser = 1;\r\n        private double[] MonthlyFertAmt;\r\n        private double[] FertDepthPlacement;\r\n        private int[] PseudoRandomSeq;\r\n        private int GrazingNumber = -1;\r\n        private bool CutNow = false;\r\n\r\n        private bool ReportToday = false;\r\n        private double AmountDungCReturned = 0.0;\r\n        private int nPatchesAdded = 0;\r\n        private int[] PatchToAddTo;\r\n        private string[] PatchNmToAddTo = new string[1];\r\n\r\n\r\n        [XmlIgnore] public bool grazedToday { get; set; }\r\n        [XmlIgnore] public double Harvested { get; set; }\r\n        [XmlIgnore] public double HarvestedN { get; set; }\r\n        [XmlIgnore] public double UreaReturned  { get; set; }\r\n        [XmlIgnore] public int NumPatches { get; set; }\r\n\r\n\r\n        [Description(\"Frequency of cutting (days) (0 will be interpreted as the end of each month)\")]\r\n        public int CuttingFrequency { get; set; }\r\n\r\n        [Description(\"Residual pasture mass after cutting (kg DM /ha)\")]\r\n        public int CuttingResidual { get; set; }\r\n\r\n        [Description(\"Type of nutrient return - calculated from the amount of herbage harvested or constant\")]\r\n        public NutrientReturnTypes NutrientReturnType { get; set; }\r\n\r\n        [Description(\"Amount of fertiliser N to apply to simulation after each cutting (pretend urine) (kgN/ha) (ignored if nutrient return is FromHarvest)\")]\r\n        public double AmountFertNReturned { get; set; }\r\n\r\n        [Description(\"Amount of dung N to apply to simulation after each cutting (kgN/ha) (ignored if nutrient return is FromHarvest)\")]\r\n        public double AmountDungNReturned { get; set; }\r\n\r\n        [Description(\"Depth band (0 mm to X mm) for fertiliser placement (mm)\")]\r\n        public int FertiliserDepth { get; set; }\r\n                        \r\n        [Description(\"Pattern for fertiliser return\")]\r\n        public urineReturnTypes FertiliserReturnPattern { get; set; }\r\n\r\n        [Description(\"Frequency of reporting\")]\r\n        public reportingFrequencyTypes ReportingFreq { get; set; }\r\n\r\n        [Description(\"Patch type\")]\r\n        public patchTypes PatchType { get; set; }\r\n\r\n        [Description(\"How many patches should there be in the grid? (used to create the grid for GP and the size of the patches for PP)\")]\r\n        public int NumGPPatches { get; set; }\r\n\r\n        [Description(\"System identifier\")]\r\n        public systemTypes SystemID { get; set; }\r\n\r\n        public enum systemTypes\r\n        {\r\n            /// <summary>A</summary>\r\n            A,\r\n            /// <summary>B</summary>\r\n            B,\r\n            /// <summary>C</summary>\r\n            C,\r\n            /// <summary>D</summary>\r\n            D,\r\n            /// <summary>E</summary>\r\n            E,\r\n            /// <summary>F</summary>\r\n            F\r\n        }\r\n\r\n        public enum patchTypes\r\n        {\r\n            /// <summary>EP</summary>\r\n            EP,\r\n            /// <summary>EP</summary>\r\n            GP,\r\n            /// <summary>EP</summary>\r\n            PP,\r\n            /// <summary>EP</summary>\r\n            UP\r\n        }\r\n\r\n        public enum reportingFrequencyTypes\r\n        {\r\n            /// <summary>Daily</summary>\r\n            Daily,\r\n            /// <summary>Every 10 days</summary>\r\n            TenDaily,\r\n            /// <summary>Monthly</summary>\r\n            Monthly,\r\n            /// <summary>Annual</summary>\r\n            Annual,\r\n            /// <summary>On grazing</summary>\r\n            OnGrazing\r\n        }\r\n\r\n        public enum urineReturnTypes\r\n        {\r\n            /// <summary>Uniform</summary>\r\n            UniformAcrossAllPatches,\r\n            /// <summary>Rotating in order</summary>\r\n            RotatingInOrder,\r\n            /// <summary>Random</summary>\r\n            Random,\r\n            /// <summary>Pseudo-random</summary>\r\n            PseudoRandom\r\n        }\r\n\r\n        public enum NutrientReturnTypes\r\n        {\r\n            /// <summary>Constant</summary>\r\n            Constant,\r\n            /// <summary>FromHarvest</summary>\r\n            FromHarvest,\r\n            /// <summary>SetMonthly</summary>\r\n            SetMonthly\r\n        }\r\n\r\n        private void SetSystemParams()\r\n        {\r\n            if (SystemID == systemTypes.A)\r\n            {\r\n                SoilType = \"HE\";\r\n                SimLocation = \"Rua\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.B)\r\n            {\r\n                SoilType = \"HE\";\r\n                SimLocation = \"Rua\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 150.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.C)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.D)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 250.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.E)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 400.0;\r\n                PastureType = \"GrassOnly\";\r\n            }\r\n            else if (SystemID == systemTypes.F)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n        }\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            sward = new Sward(myZone);\r\n\r\n            if (PatchType == patchTypes.EP)\r\n                NumPatches = NumPaddocks;\r\n            else if (PatchType == patchTypes.GP)\r\n                NumPatches = NumGPPatches;\r\n            else if (PatchType == patchTypes.PP)\r\n                NumPatches = NumGPPatches; // but will actually use this to set the size of the newly created patches\r\n            else if (PatchType == patchTypes.UP)\r\n                NumPatches = NumGPPatches;\r\n            else\r\n                throw new Exception(\"Patch type not catered for\");\r\n\r\n            if ((PatchType == patchTypes.GP) && (NumPaddocks > 1))\r\n                throw new Exception(\"Patch type GP may only have one paddock/zone\");\r\n            if ((PatchType == patchTypes.PP) && (NumPaddocks > 1))\r\n                throw new Exception(\"Patch type PP may only have one paddock/zone\");\r\n\r\n            NumPatchesForFertiliser = 1;  // in the future this might be > 1\r\n            if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)  // generate a return pattern up front\r\n            {\r\n                int MaxNumGrazings = (Clock.EndDate.Year - Clock.StartDate.Year + 1) * 52; //allow for a maximum of 1 per week\r\n\r\n                PseudoRandomSeq = new int[MaxNumGrazings * NumPatchesForFertiliser];\r\n                Random rndConstSeed = new Random((int)666);\r\n                string MyString = \"\";\r\n                for (int i = 0; i < (MaxNumGrazings * NumPatchesForFertiliser); i++)\r\n                {\r\n                    PseudoRandomSeq[i] = rndConstSeed.Next(0, NumPatches);  // will never select NumPatches \r\n                    MyString += Convert.ToString(PseudoRandomSeq[i]) + \" \";\r\n                }\r\n\r\n                summary.WriteMessage(this, \"The order of patch return will be: \" + MyString);\r\n            }\r\n\r\n            // Add patches\r\n            if (PatchType == patchTypes.GP)\r\n            {\r\n                SoilNitrogen.MaximumNitrogenAvailableToPlants = 0.45;\r\n                SoilNitrogen.NPartitionApproach = \"BasedOnConcentrationAndDelta\";\r\n                SoilNitrogen.AllowPatchAutoAmalgamation = \"No\";\r\n                SoilNitrogen.AutoAmalgamationApproach = \"CompareAll\";\r\n                SoilNitrogen.basePatchApproach = \"IDBased\";\r\n                SoilNitrogen.AllowPatchAmalgamationByAge = \"No\";\r\n                SoilNitrogen.PatchAgeForForcedMerge = 3.0;                                \r\n\r\n\r\n                int[] PatchToAddTo = new int[1];  //need an array variable for this\r\n                string[] PatchNmToAddTo = new string[1];  \r\n                int nPatchesAdded = 0;\r\n                double NewArea = 1.0 / NumPatches;\r\n\r\n                while (nPatchesAdded < NumPatches - 1)\r\n                {\r\n                    AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();\r\n                    NewPatch.DepositionType = \"ToNewPatch\";\r\n                    NewPatch.AreaFraction = NewArea;\r\n                    PatchToAddTo[0] = 0;\r\n                    PatchNmToAddTo[0] = \"0\";\r\n                    NewPatch.AffectedPatches_id = PatchToAddTo;\r\n                    NewPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                    NewPatch.SuppressMessages = \"no\";\r\n\r\n                    AddSoilCNPatch.Invoke(NewPatch);\r\n                    nPatchesAdded += 1;\r\n                }                \r\n\r\n                summary.WriteMessage(this, \"NumPatches at end of initialisation (GP):\" + SoilNitrogen.PatchCount.ToString());\r\n            }\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"Initialising the Manager for grazing, urine return and reporting\");\r\n\r\n            grazedToday = false;\r\n\r\n            // count the paddocks in the simulation\r\n            NumPaddocks = 0;   \r\n            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                NumPaddocks += 1;   \r\n            summary.WriteMessage(this, \"There are \" + NumPaddocks + \" in the simulation\");\r\n\r\n            MonthlyFertAmt = new double[] { 24, 19, 17, 12, 8, 5, 5, 10, 16, 19, 23, 25 };\r\n\r\n            summary.WriteMessage(this, \"Finished initialising the Manager for grazing, urine return and reporting\");\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {    \r\n\r\n            // if this is the start of the simulation then sort out the depth for the fertiliser (aka urine) placement\r\n            // can't do this in initialisation because of the module order\r\n            if (Clock.Today == Clock.StartDate)\r\n            {\r\n                FertPlacementDepth();\r\n                int i = -1;  // to use as a patch counter\r\n\r\n                iniOrgC = 0.0; \r\n                iniOrgN = 0.0;\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                {\r\n                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n                    i += 1;\r\n                    PatchCount = SoilNitrogen.PatchCount;\r\n\r\n                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    {\r\n                        iniOrgC += SoilNitrogen.TotalC[ii] / NumPaddocks; \r\n                        iniOrgN += SoilNitrogen.organic_n[ii] / NumPaddocks;\r\n                    }\r\n                }\r\n            }\r\n\r\n            DaysSinceCut += 1;\r\n            Harvested = 0.0;\r\n            HarvestedN = 0.0;\r\n            UreaReturned = 0.0;\r\n\r\n            bool isEndOfMonth = false;\r\n            if (Clock.Today.AddDays(1).Day == 1)\r\n                isEndOfMonth = true;\r\n\r\n            bool isEndOfYear = false;\r\n            if (Clock.Today.AddDays(1).DayOfYear == 1)\r\n                isEndOfYear = true;\r\n\r\n\r\n\r\n            CutNow = false;\r\n            grazedToday = false;\r\n            if ((CuttingFrequency == 0) && (isEndOfMonth))\r\n                CutNow = true;\r\n            else if ((DaysSinceCut >= CuttingFrequency) && (CuttingFrequency > 0))\r\n                CutNow = true;\r\n\r\n            // should reporting be done today?  Do this here as need to know if grazing will happen\r\n            if (ReportingFreq == reportingFrequencyTypes.Daily)\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day == 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (CutNow))\r\n                ReportToday = true;\r\n            else\r\n                ReportToday = false;\r\n\r\n            //if (Clock.Today == Clock.StartDate) CutNow = true;\r\n\r\n            if (CutNow)\r\n            {\r\n                //if(Clock.Today.Month < 3) Debugger.Break();\r\n\r\n                grazedToday = true;\r\n                summary.WriteMessage(this, \"Doing Cutting\");\r\n                DaysSinceCut = 0;\r\n                GrazingNumber += 1;  //was initialsed as -1 - this is used to pick the pseudo-random patch return number\r\n                // GetPatchForUrineReturn();  now called in the deposition routine\r\n\r\n                // do the cutting=grazing - it doesn't matter if there one (GP) or many (EP) physical paddocks in the simulation at this point\r\n                int i = -1;  // to use as a patch counter\r\n                Harvested = 0.0;\r\n                HarvestedN = 0.0;\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                {\r\n                    i += 1;\r\n                    var sward = new Sward(zone);\r\n                    sward.Graze(amount: CuttingResidual, type: \"SetResidueAmount\");\r\n                    if (PatchType == patchTypes.EP) {\r\n                        Harvested += sward.HarvestedWt;\r\n                        HarvestedN += sward.HarvestedN;\r\n                    } \r\n                    else \r\n                    {\r\n                        Harvested += sward.HarvestedWt / NumPaddocks;\r\n                        HarvestedN += sward.HarvestedN / NumPaddocks;\r\n                    }\r\n                }\r\n\r\n                if (NutrientReturnType == NutrientReturnTypes.FromHarvest)\r\n                {\r\n                    AmountFertNReturned = HarvestedN * 0.50;  // TODO yikes - probably should not have hard-coded this, if it is not FromHarvest then the value has been set in the manager parameters\r\n                    AmountDungNReturned = HarvestedN * 0.35;  // \r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n                else if (NutrientReturnType == NutrientReturnTypes.SetMonthly)\r\n                {\r\n                    AmountFertNReturned = MonthlyFertAmt[Clock.Today.Month - 1];\r\n                    AmountDungNReturned = AmountFertNReturned * (0.35 / 0.50);  // \r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n                else\r\n                {\r\n                    // urine and dung are set from the parameters\r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n\r\n\r\n                summary.WriteMessage(this, \"The amount of urea fertiliser to be returned to the whole paddock is \" + AmountFertNReturned);\r\n\r\n                DoUrineReturn();\r\n\r\n                //DoTramplingAndDungReturn();\r\n\r\n                summary.WriteMessage(this, \"Finished Cutting\");\r\n\r\n            } // this is the end of the CutNow section\r\n\r\n            if ((GeneralFertAmt > 0.0) && (Clock.Today.AddDays(1).Day == 1))\r\n            {\r\n                //DoFertiliser();\r\n            }\r\n\r\n\r\n\r\n            summary.WriteMessage(this, \"End of DoMgmt\");\r\n            //printMinN();\r\n        }\r\n\r\n        [EventSubscribe(\"EndOfDay\")]\r\n        private void OnEndOfDay(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"Start of EndOfDay\");\r\n            //printMinN();\r\n        }\r\n\r\n        public void DoTramplingAndDungReturn()\r\n        {\r\n            int i = -1;  // patch or paddock counter\r\n            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n            {\r\n                i += 1;\r\n                SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;\r\n                SurfaceOrganicMatter surfaceOM = Apsim.Find(zone, typeof(SurfaceOrganicMatter)) as SurfaceOrganicMatter; \r\n\r\n                // do some trampling of litter\r\n                // accelerate the movement of surface litter into the soil - do this before the dung is added\r\n                double temp = surfaceOM.Wt * 0.1;\r\n\r\n                TillageType trampling = new TillageType();\r\n                surfaceOM.Incorporate(fraction: (double)0.1, depth: (double)100.0);\r\n\r\n                summary.WriteMessage(this, \"For patch \" + i + \" the amount of litter trampled was \" + temp + \" and the remaining litter is \" + (surfaceOM.Wt));\r\n\r\n                // move the dung to litter - assume dung is 40% of that harvested and a C:N ratio of \r\n                BiomassRemovedType dung = new BiomassRemovedType();\r\n                dung.crop_type = \"RuminantDung_PastureFed\";\r\n                dung.dm_type = new string[] { \"RuminantDung_PastureFed\" };\r\n                dung.dlt_crop_dm = new float[] { Convert.ToSingle(AmountDungCReturned / 0.4) };  // \r\n                dung.dlt_dm_n = new float[] { Convert.ToSingle(AmountDungNReturned) };    // \r\n                dung.dlt_dm_p = new float[] { 0.0F };\r\n                dung.fraction_to_residue = new float[] { 1.0F };\r\n                BiomassRemoved.Invoke(dung);\r\n                summary.WriteMessage(this, \"For patch \" + i + \" the amount of dung DM added to the litter was \" + (AmountDungCReturned / 0.4) + \" and the amount of N added in the dung was \" + (AmountDungNReturned));\r\n\r\n            } \r\n        }\r\n        // this is the end of the trampling and dung patch/paddock section\r\n\r\n\r\n        public void printMinN()\r\n        {\r\n            List<IModel> zones = Apsim.FindAll(this, typeof(Zone));\r\n            Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first zone\r\n\r\n            for (int ii = 0; ii < (SoilNitrogen.PatchCount); ii++)\r\n            {\r\n                double MinNPatch = SoilNitrogen.PatchTotalUrea[ii] + SoilNitrogen.PatchTotalNH4[ii] + SoilNitrogen.PatchTotalNO3[ii];\r\n                summary.WriteMessage(this, \"Patch \" + ii + \":\" + MinNPatch);\r\n            }\r\n\r\n        }\r\n\r\n        public void DoUrineReturn()\r\n        {\r\n            if (PatchType == patchTypes.EP)\r\n            {                \r\n\r\n                GetPatchForUrineReturn();  //sets the value for PatchNumForFert\r\n                int i = -1; //to count the paddocks\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                {\r\n                    i += 1;\r\n                    if (i == PatchNumForFert)\r\n                    {\r\n                        Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;\r\n                        Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n\r\n                        double tempDepth = 0.0;\r\n                        for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                        {\r\n                            tempDepth += soil.Thickness[ii];\r\n                            thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * NumPatches * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));\r\n                        }\r\n                        UreaReturned += AmountFertNReturned;\r\n                    }\r\n                } \r\n\r\n            }\r\n            else if (PatchType == patchTypes.GP)\r\n            {\r\n                GetPatchForUrineReturn();  //sets the value for PatchNumForFert\r\n                int[] PatchToAddTo = new int[1];  //because need an array variable for this\r\n                string[] PatchNmToAddTo = new string[0];  //need an array variable for this\r\n                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));\r\n                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first\r\n                double[] UreaToAdd = new double[soil.Thickness.Length];  \r\n\r\n                for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;\r\n\r\n                UreaReturned += AmountFertNReturned;\r\n\r\n\r\n                AddSoilCNPatchType CurrentPatch = new AddSoilCNPatchType();\r\n                CurrentPatch.Sender = \"manager\";\r\n                CurrentPatch.DepositionType = \"ToSpecificPatch\";\r\n                PatchToAddTo[0] = PatchNumForFert;\r\n                CurrentPatch.AffectedPatches_id = PatchToAddTo;\r\n                CurrentPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                CurrentPatch.Urea = UreaToAdd;\r\n\r\n\r\n                summary.WriteMessage(this, \"Patch MinN prior to urine return:\");\r\n\r\n                //printMinN();\r\n                AddSoilCNPatch.Invoke(CurrentPatch); \r\n                summary.WriteMessage(this, \"Patch MinN after urine return:\");\r\n                //printMinN();\r\n            }\r\n            else if (PatchType == patchTypes.PP)\r\n            {\r\n                // create a new patch from base of area 1/NumGPPatches\r\n                // add the fertiliser to that patch\r\n                // set amalgamation autmomatic\r\n                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));\r\n                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first\r\n\r\n                double[] UreaToAdd = new double[soil.Thickness.Length];  \r\n\r\n                for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;\r\n\r\n                int[] PatchToAddTo = new int[1];\r\n                string[] PatchNmToAddTo = new string[0];  //need an array variable for this\r\n\r\n                UreaReturned += AmountFertNReturned;\r\n\r\n                AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();\r\n                NewPatch.DepositionType = \"ToNewPatch\";\r\n                NewPatch.AreaFraction = 1.0 / NumPatches;\r\n                PatchToAddTo[0] = 0;\r\n                NewPatch.AffectedPatches_id = PatchToAddTo;\r\n                NewPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                NewPatch.Urea = UreaToAdd;\r\n\r\n                summary.WriteMessage(this, \"UreaToAdd \" + UreaToAdd[0] + \" \" + UreaToAdd[1] + \" \" + UreaToAdd[2] + \" \" + UreaToAdd[3] + \" \" + UreaToAdd[4]);\r\n\r\n\r\n                AddSoilCNPatch.Invoke(NewPatch);\r\n\r\n                //throw new Exception(\"Have not set up the PP for DoUrineReturn yet\");\r\n            }\r\n            else if (PatchType == patchTypes.UP)\r\n            {\r\n                int i = -1;  // patch or paddock counter\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                {\r\n                    i += 1;\r\n\r\n                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;\r\n                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n\r\n                    double tempDepth = 0.0;\r\n                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    {\r\n                        tempDepth += soil.Thickness[ii];\r\n                        thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));\r\n                    } \r\n                    UreaReturned += AmountFertNReturned;\r\n                }\r\n            }\r\n            else\r\n                throw new Exception(\"Patch type not catered for\");\r\n\r\n\r\n\r\n        }\r\n        // end of DoUrineReturn\r\n\r\n        public void GetPatchForUrineReturn()\r\n        {\r\n            \r\n            if (FertiliserReturnPattern == urineReturnTypes.UniformAcrossAllPatches)\r\n                PatchNumForFert = 0;  // but will not be used\r\n            else if (FertiliserReturnPattern == urineReturnTypes.RotatingInOrder)\r\n            {\r\n                PatchNumForFert += 1;  //increment the patch number\r\n                if (PatchNumForFert >= NumPatches)\r\n                    PatchNumForFert = 0;  // but reset back to the first patch if needed\r\n                //summary.WriteMessage(this, \"The patch for fertiliser return is \" + PatchNumForFert);\r\n            }\r\n            else if (FertiliserReturnPattern == urineReturnTypes.Random)\r\n            {\r\n                Random rnd = new Random();\r\n                PatchNumForFert = rnd.Next(0, NumPatches);\r\n                //summary.WriteMessage(this, \"The next random number patch for fertiliser return is \" + PatchNumForFert);\r\n            }\r\n            else if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)\r\n            {\r\n                PatchNumForFert = PseudoRandomSeq[GrazingNumber];\r\n                //summary.WriteMessage(this, \"The next pseudo-random number patch for fertiliser return is \" + PatchNumForFert);\r\n            }\r\n        }\r\n        // this is the end of GetPatchForUrineReturn\r\n\r\n\r\n        public void FertPlacementDepth()\r\n        {\r\n            // note that this only looks at the first paddock and assumes that all the paddocks are the same\r\n            int iii = -1;  // to use as a patch counter\r\n            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n            {\r\n                iii += 1;\r\n                if (iii == 0)\r\n                {\r\n                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n                    double tempDepth = 0.0;\r\n                    FertDepthPlacement = new double[soil.Thickness.Length];\r\n                    for (int i = 0; i <= (soil.Thickness.Length - 1); i++)\r\n                    {\r\n                        tempDepth += soil.Thickness[i];\r\n                        if (tempDepth <= FertiliserDepth)\r\n                        {\r\n                            FertDepthPlacement[i] = soil.Thickness[i] / FertiliserDepth;\r\n                        }\r\n                        else\r\n                        {\r\n                            FertDepthPlacement[i] = (FertiliserDepth - (tempDepth - soil.Thickness[i])) / (tempDepth - (tempDepth - soil.Thickness[i])) * soil.Thickness[i] / FertiliserDepth;\r\n                            FertDepthPlacement[i] = Math.Max(0.0, Math.Min(1.0, FertDepthPlacement[i]));\r\n                        }\r\n                        //if (FertiliserReturnPattern == \"UniformAcrossAllPatches\")\r\n                        //   summary.WriteMessage(this, \"The proportion of fertiliser applied to the \" + i + \"th layer will be \" + FertDepthPlacement[i]);\r\n                        //else\r\n                        summary.WriteMessage(this, \"The proportion of fertiliser (* NumPatches) applied to the \" + i + \"th layer will be \" + FertDepthPlacement[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        // this is the end of FertPlacementDepth\r\n\r\n\r\n        public void DoFertiliser()\r\n        {\r\n            bool ApplyFert = true; // the test for first day of the month has already been done\r\n            double NumMonths = 0;\r\n\r\n            if (GeneralFertType == \"Monthly\")\r\n                NumMonths = 12;\r\n            else if (GeneralFertType == \"NoWinter\")\r\n            {\r\n                if ((Clock.Today.Month < 5) || (Clock.Today.Month > 7))\r\n                {\r\n                    ApplyFert = true;\r\n                    NumMonths = 9;\r\n                }\r\n            }\r\n            else\r\n                throw new Exception(\"Wrong general fertiliser setting\");\r\n\r\n            if (ApplyFert)\r\n            {\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))  // but actually there will only be a single paddock\r\n                {\r\n                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;\r\n\r\n                    //thisFert.Apply((float)(GeneralFertAmt / NumMonths), (float) (0.0), \"urea_n\");\r\n                    thisFert.Apply(Amount: (double)(GeneralFertAmt / NumMonths), Type: Fertiliser.Types.UreaN, Depth: FertiliserDepth);\r\n                    summary.WriteMessage(this, \"Applying \" + (GeneralFertAmt / NumMonths) + \" kg of general fertiliser\");\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    [Serializable]\r\n    class Sward\r\n    {\r\n        private const double Epsilon = 0.000000001;\r\n        private List<PastureSpecies> species;\r\n\r\n        public Sward(Zone zone)\r\n        {\r\n            species = Apsim.ChildrenRecursively(zone, typeof(PastureSpecies)).Cast<PastureSpecies>().ToList();\r\n        }\r\n\r\n        public double HarvestableWt {    get { return species.Sum(sp => sp.HarvestableWt); }    }\r\n\r\n        public double HarvestedWt {    get { return species.Sum(sp => sp.HarvestableWt); }    }\r\n\r\n        public double HarvestedN {    get { return species.Sum(sp => sp.HarvestedN); } }\r\n\r\n        public double StandingHerbageWt {    get { return species.Sum(sp => sp.StandingHerbageWt); }    }\r\n\r\n        public bool IsAlive\r\n        {\r\n            get\r\n            {\r\n                bool alive = true;\r\n                species.ForEach(sp => alive = alive && sp.PlantStatus == \"alive\");\r\n                return alive;\r\n            }\r\n        }\r\n\r\n        /// <summary>Removes plant material simulating a graze event.</summary>\r\n        /// <param name=\"amount\">The DM amount (kg/ha)</param>\r\n        /// <param name=\"type\">How the amount is interpreted (SetResidueAmount or SetRemoveAmount)</param>\r\n        public void Graze(double amount, string type)\r\n        {\r\n            double amountAvailable = HarvestableWt;\r\n            if (IsAlive || (amountAvailable > Epsilon))\r\n            {\r\n                // Get the amount required to remove\r\n                double amountRequired;\r\n                if (type.ToLower() == \"setresidueamount\")\r\n                {\r\n                    // Remove all DM above given residual amount\r\n                    amountRequired = Math.Max(0.0, StandingHerbageWt - amount);\r\n                }\r\n                else if (type.ToLower() == \"setremoveamount\")\r\n                {\r\n                    // Remove a given amount\r\n                    amountRequired = Math.Max(0.0, amount);\r\n                }\r\n                else\r\n                {\r\n                    throw new Exception(\"Type of amount to remove on graze not recognized (use \\'SetResidueAmount\\' or \\'SetRemoveAmount\\'\");\r\n                }\r\n                // Get the actual amount to remove\r\n                double amountToRemove = Math.Max(0.0, Math.Min(amountRequired, amountAvailable));\r\n\r\n                // Get the amounts to remove by mySpecies:\r\n                if (amountToRemove > Epsilon)\r\n                {\r\n                    double[] fractionToRemove = new double[species.Count];\r\n                    for (int s = 0; s < species.Count; s++)\r\n                    {\r\n                        // get the fraction to required for each mySpecies, partition according to available DM to harvest\r\n                        fractionToRemove[s] = species[s].HarvestableWt / amountAvailable;\r\n\r\n                        // remove DM and N for each mySpecies (digestibility is also evaluated)\r\n                        species[s].RemoveBiomass(amountToRemove * fractionToRemove[s]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "CuttingFrequency",
                  "Value": "0"
                },
                {
                  "Key": "CuttingResidual",
                  "Value": "1000"
                },
                {
                  "Key": "NutrientReturnType",
                  "Value": "Constant"
                },
                {
                  "Key": "AmountFertNReturned",
                  "Value": "40"
                },
                {
                  "Key": "AmountDungNReturned",
                  "Value": "0"
                },
                {
                  "Key": "FertiliserDepth",
                  "Value": "200"
                },
                {
                  "Key": "FertiliserReturnPattern",
                  "Value": "RotatingInOrder"
                },
                {
                  "Key": "ReportingFreq",
                  "Value": "OnGrazing"
                },
                {
                  "Key": "PatchType",
                  "Value": "EP"
                },
                {
                  "Key": "NumGPPatches",
                  "Value": "1"
                },
                {
                  "Key": "SystemID",
                  "Value": "A"
                }
              ],
              "Name": "PatchManager",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using Models.Interfaces;\r\nusing System;\r\nusing Models.Core;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Zones;\r\nusing Models.AgPasture;\r\nusing System.Xml.Serialization;\r\nusing Models.Soils;\r\nusing Models.Surface;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System;\r\nusing System.Linq;\r\nusing Models.Interfaces;\r\n\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        [Link] private Clock Clock;\r\n        [Link] private Simulation Simulation;\r\n        [Link] private Soil soil;\r\n        [Link] private ISummary summary;\r\n        [Link] private Weather Weather;\r\n        [Link] private Zone zone;\r\n        public int PatchCount;\r\n        public int PaddockCount;\r\n        public double Grazed;\r\n        public double GrazedN;\r\n        public double UrineNReturned;\r\n        private double iniOrgC;\r\n        private double iniOrgN;\r\n        private double myVariable;\r\n        [Link(ByName = true)]\r\n        private ISolute NO3;\r\n        [Link(ByName = true)]\r\n        private ISolute NH4;\r\n        [Link(ByName = true)]\r\n        private ISolute Urea;\r\n        [Link(ByName = true)]\r\n        private SoilNitrogen SoilNitrogen;\r\n\r\n        private Zone[] Zones {get; set; }\r\n\r\n        private Models.Report.Report ReportingWithPatches;\r\n\r\n        [Description(\"Verbose reporting mode (True/False)\")]\r\n        public bool verbose { get; set; }\r\n\r\n        [Description(\"Name of the patch manager for input\")]\r\n        public string InputModule { get; set; }\r\n\r\n        [Description(\"Name of the report for output\")]\r\n        public string OutputModule { get; set; }\r\n\r\n        [Description(\"Frequency of reporting\")]\r\n        public reportingFrequencyTypes ReportingFreq { get; set; }\r\n\r\n        [XmlIgnore] public int DaysSinceReport { get; set; }\r\n        [XmlIgnore] public double NHA { get; set; }\r\n        [XmlIgnore] public double PGR { get; set; }\r\n        [XmlIgnore] public double HerbageGrazed { get; set; }\r\n        [XmlIgnore] public double HerbageGrazedN { get; set; }\r\n        [XmlIgnore] public double AreaUrinePatchesToday { get; set; }\r\n        [XmlIgnore] public double UreaReturned { get; set; }\r\n        [XmlIgnore] public double Fixation { get; set; }\r\n        [XmlIgnore] public double LeachN { get; set; }\r\n        [XmlIgnore] public double Denit { get; set; }\r\n        [XmlIgnore] public double DenitN2O { get; set; }\r\n        [XmlIgnore] public double OrgC { get; set; }\r\n        [XmlIgnore] public double OrgN { get; set; }\r\n        [XmlIgnore] public double dltOrgC { get; set; }\r\n        [XmlIgnore] public double dltOrgN { get; set; }\r\n        [XmlIgnore] public double MinN { get; set; }\r\n        [XmlIgnore] public double UreaN { get; set; }\r\n        [XmlIgnore] public double NH4N { get; set; }\r\n        [XmlIgnore] public double NO3N { get; set; }\r\n        [XmlIgnore] public double UreaAddedInGrazing { get; set; }\r\n\r\n        [XmlIgnore] public double[] MinNPatch { get; set; }\r\n\r\n\r\n\r\n\r\n        private bool ReportToday = false;      \r\n\r\n        public enum reportingFrequencyTypes\r\n        {\r\n            /// <summary>Daily</summary>\r\n            Daily,\r\n            /// <summary>Every 10 days</summary>\r\n            TenDaily,\r\n            /// <summary>Monthly</summary>\r\n            Monthly,\r\n            /// <summary>Annual</summary>\r\n            Annual,\r\n            /// <summary>On grazing</summary>\r\n            OnGrazing\r\n        }\r\n\r\n    \r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n\r\n               if (verbose)\r\n                summary.WriteMessage(this, \"Initialising the Manager for grazing, urine return and reporting\");\r\n            DaysSinceReport = 0;\r\n            PatchCount = SoilNitrogen.PatchCount;\r\n            PaddockCount=0;\r\n\r\n\r\n\r\n            // Get list of zones in the simulation\r\n            List<Zone> zones = new List<Zone>();\r\n\r\n            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n            {\r\n                zones.Add(zone as Zone);\r\n                ReportingWithPatches = (Models.Report.Report)zone.Get(\"[\" + OutputModule+ \"]\");\r\n                PaddockCount++;\r\n            }\r\n            Zones = zones.ToArray();\r\n\r\n\r\n            //myVariable = (double)ManageGriddedPaddock.Get(\"Script.Var1\");\r\n            //double grazedN = ManageGriddedPaddock.Get(\"Script.grazedN\");\r\n\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"Finished initialising the Manager for grazing, urine return and reporting\");\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"DoDailyInitialisation\")]\r\n        private void OnDoDailyInitialisation(object sender, EventArgs e)\r\n        {    \r\n                    \r\n            if (verbose)\r\n                summary.WriteMessage(this, \"In Daily Initialisation for the Reporting Manager on \" + Clock.Today);\r\n            if(Clock.Today == Clock.StartDate) {\r\n\r\n                iniOrgC = 0.0; \r\n                iniOrgN = 0.0;            \r\n\r\n                foreach (Zone zone in Zones)\r\n                {\r\n                    SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;\r\n                    for (int ii = 0; ii < soil.Thickness.Length; ii++)\r\n                    {\r\n                        iniOrgC += soilN.TotalC[ii]; // TODO RJM Check this is right!\r\n                        iniOrgN += soilN.organic_n[ii];\r\n                    }\r\n                }\r\n            }        \r\n\r\n\r\n        }\r\n\r\n            \r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void DoManagement(object sender, EventArgs e)\r\n        {\r\n               bool isEndOfMonth = false;\r\n            if (Clock.Today.AddDays(1).Day == 1) \r\n                isEndOfMonth = true;\r\n            \r\n\r\n            bool isEndOfYear = false;\r\n            if (Clock.Today.Day == 31 && Clock.Today.Month == 12)\r\n                isEndOfYear = true;\r\n\r\n\r\n            bool GrazedToday = (bool) Apsim.Get(Simulation, InputModule + \".Script.grazedToday\"); \r\n\r\n            // should reporting be done today?  \r\n            if (ReportingFreq == reportingFrequencyTypes.Daily)\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day == 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (GrazedToday))\r\n                ReportToday = true;\r\n            else\r\n                ReportToday = false;\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"Finished Prepare for the Reporting Manager on \" + Clock.Today);\r\n        } \r\n\r\n        [EventSubscribe(\"EndOfDay\")]\r\n        private void OnEndOfDay(object sender, EventArgs e)\r\n        {\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"In EndOfDay for the Reporting Manager on  \" + Clock.Today);\r\n\r\n            DaysSinceReport += 1;\r\n\r\n\r\n\r\n            foreach (Zone zone in Zones)\r\n            {\r\n                var sward = Apsim.Children(zone, typeof(PastureSpecies)).Cast<PastureSpecies>().ToList();\r\n                  NHA += sward.Sum(species => species.HerbageGrowthWt) / PaddockCount;\r\n                PGR = NHA;  // divide this by the number of days just before reporting\r\n                Fixation += sward.Sum(species => species.FixedN) / PaddockCount;\r\n\r\n                Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n                LeachN += soil.SoilWater.FlowNO3[soil.SoilWater.FlowNO3.Length-1]/PaddockCount;  // only take the deepest element\r\n\r\n                for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                {\r\n                    Denit += SoilNitrogen.Denitrification[ii]/PaddockCount;\r\n                    DenitN2O += SoilNitrogen.n2o_atm[ii]/PaddockCount;\r\n                }\r\n\r\n\r\n                Grazed = (double)zone.Get(\"[\" + InputModule + \"].Script.Harvested\")/PaddockCount;\r\n                GrazedN = (double)zone.Get(\"[\" + InputModule + \"].Script.HarvestedN\")/PaddockCount;\r\n                UrineNReturned = (double)zone.Get(\"[\" + InputModule + \"].Script.UreaReturned\")/PaddockCount;\r\n                //AreaUrinePatchesToday = (double)zone.Get(\"[\" + InputModule + \"].Script.areaUrinePatchesToday\");\r\n            } \r\n\r\n            HerbageGrazed += Grazed;\r\n            HerbageGrazedN += GrazedN;\r\n            UreaReturned += UrineNReturned;\r\n\r\n            if(ReportToday) {\r\n\r\n                OrgC = 0.0;\r\n                OrgN = 0.0;\r\n                UreaN = 0.0;\r\n                NH4N = 0.0;\r\n                NO3N = 0.0;\r\n                MinN = 0.0;\r\n\r\n\r\n                Soil soil1 = Apsim.Find(Zones[0], typeof(Soil)) as Soil;\r\n\r\n                if(PaddockCount>1)\r\n                    MinNPatch = new double[PaddockCount];\r\n                else \r\n                    MinNPatch = new double[SoilNitrogen.PatchCount];\r\n\r\n\r\n                int currentZoneNum = 0;\r\n                foreach (Zone zone in Zones)\r\n                {\r\n                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n\r\n                    double minNPatch = 0;\r\n\r\n                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    {\r\n                        OrgC += SoilNitrogen.TotalC[ii]/PaddockCount;  \r\n                        OrgN += SoilNitrogen.organic_n[ii]/PaddockCount;\r\n                        UreaN += Urea.kgha[ii]/PaddockCount;\r\n                        NH4N += NH4.kgha[ii]/PaddockCount;\r\n                        NO3N += NO3.kgha[ii]/PaddockCount;\r\n                        MinN = UreaN + NH4N + NO3N;                    \r\n                        minNPatch += Urea.kgha[ii] + NH4.kgha[ii] + NO3.kgha[ii];\r\n                    }\r\n\r\n\r\n                    //MinN = (UreaN*PaddockCount + NH4N*PaddockCount + NO3N*PaddockCount);\r\n                    if(PaddockCount>1) MinNPatch[currentZoneNum] = minNPatch;\r\n\r\n                    dltOrgC = OrgC - iniOrgC; \r\n                    dltOrgN = OrgN - iniOrgN;\r\n                    iniOrgC = OrgC; // ready for the next calculation of change in pools\r\n                    iniOrgN = OrgN;\r\n                    currentZoneNum++;\r\n                }\r\n\r\n                if(SoilNitrogen.PatchCount>1) {  // TODO will break if there is more than one paddock/zone AND more than one patch                    \r\n\r\n                    for (int ii = 0; ii < (SoilNitrogen.PatchCount); ii++)\r\n                    {\r\n                        MinNPatch[ii] = SoilNitrogen.PatchTotalUrea[ii]+SoilNitrogen.PatchTotalNH4[ii] + SoilNitrogen.PatchTotalNO3[ii];\r\n                    }\r\n                }\r\n\r\n                PGR = NHA / DaysSinceReport; \r\n\r\n                ReportingWithPatches.DoOutput();\r\n\r\n                // now zero the reported variables\r\n                DaysSinceReport = 0;\r\n                HerbageGrazed = 0.0;\r\n                HerbageGrazedN = 0.0;\r\n                DaysSinceReport = 0;\r\n                NHA = 0;\r\n                PGR = 0;\r\n                UreaReturned = 0;\r\n                Fixation = 0;\r\n                LeachN = 0;\r\n                Denit = 0;\r\n                DenitN2O = 0;\r\n                OrgC = 0;\r\n                OrgN = 0;\r\n                MinN = 0;\r\n                UreaN = 0;\r\n                NH4N = 0;\r\n                NO3N = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "verbose",
                  "Value": "False"
                },
                {
                  "Key": "InputModule",
                  "Value": "PatchManager"
                },
                {
                  "Key": "OutputModule",
                  "Value": "ReportingWithPatches"
                },
                {
                  "Key": "ReportingFreq",
                  "Value": "Daily"
                }
              ],
              "Name": "ReportingWithPatchesVariables",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "Parent.Name as Zone",
                "[Clock].Today as Date",
                "[Clock].Today.Month as Month",
                "[Clock].Today.Year as Year",
                "[ReportingWithPatchesVariables]Script.UreaReturned as UrineNReturned",
                "[ReportingWithPatchesVariables]Script.NHA as NHA",
                "[PatchManager]Script.NumPatches as NumPatches",
                "[ReportingWithPatchesVariables]Script.AreaUrinePatchesToday as AreaUrinePatchesToday",
                "[ReportingWithPatchesVariables]Script.HerbageGrazed as HerbageGrazed",
                "[ReportingWithPatchesVariables]Script.HerbageGrazedN as HerbageGrazedN",
                "[ReportingWithPatchesVariables]Script.LeachN as LeachN",
                "[ReportingWithPatchesVariables]Script.Denit as Denit",
                "[ReportingWithPatchesVariables]Script.Fixation as Fixation",
                "[ReportingWithPatchesVariables]Script.MinN as MinN",
                "[ReportingWithPatchesVariables]Script.UreaN as UreaN",
                "[ReportingWithPatchesVariables]Script.NH4N as NH4N",
                "[ReportingWithPatchesVariables]Script.NO3N as NO3N",
                "[ReportingWithPatchesVariables]Script.dltOrgC as dltOrgC",
                "[ReportingWithPatchesVariables]Script.dltOrgN as dltOrgN"
              ],
              "EventNames": [
                ""
              ],
              "Name": "ReportingWithPatches",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Weather, Models",
              "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
              "ExcelWorkSheetName": null,
              "Name": "Weather",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
              "Name": "Soil Arbitrator",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Folder, Models",
              "ShowPageOfGraphs": true,
              "Name": "Paddocks",
              "Children": [
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "P1",
                  "Children": [
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Diagnostics; // used with Debugger.Break(); to debug manager scripts\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil soil;\r\n        [Link] Weather Met; \r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public answerTypes allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string IrrigStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string IrrigEnd { get; set; }\r\n        [Description(\"Enter the depth to which water deficit is computed (mm)\")]\r\n        public double SoilDepth { get; set; }\r\n        [Description(\"PAW below which soil is considered 'shallow' (mm)\")]\r\n        public double CritPAWForShallow { get; set; }\r\n        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")]\r\n        public double CritRainToPause { get; set; }\r\n        [Description(\"Number of days to pause irrigator after critical rainfall (days)\")]\r\n        public double DaysToPauseOnCritRain { get; set; }\r\n\r\n        [Description(\"Shallow Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnShallow { get; set; }\r\n        [Description(\"Shallow Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtShallow { get; set; }\r\n        [Description(\"Shallow Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitShallow { get; set; }\r\n        [Description(\"Shallow Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffShallow { get; set; }\r\n\r\n        [Description(\"Deep Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnDeep { get; set; }\r\n        [Description(\"Deep Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtDeep { get; set; }\r\n        [Description(\"Deep Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitDeep { get; set; }\r\n        [Description(\"Deep Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffDeep { get; set; }\r\n\r\n        // Outputs\r\n        public double TodayDeficit { get; set; }\r\n        public double TodayDeficit_nve { get; set; }\r\n        public double IrrigDay { get; set; }\r\n        public double SoilPAW { get; set; }\r\n        public double IrrigDeficit { get; set; }\r\n        public double IrrigReturn { get; set; }\r\n        public double IrrigAmt { get; set; }\r\n        public double IrrigEff { get; set; }\r\n        public double Rain3 { get; set; }\r\n\r\n        public double Days2Pause { get; set; }\r\n\r\n        // internal use\r\n        private DateTime StartDate;               //The date when irrigation start (in date format)\r\n        private DateTime EndDate;                 //The date when irrigation finish (in date format)\r\n        private double RainToday=0;\r\n        public double[] Rain_3;\r\n\r\n        public enum answerTypes\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialising          \");\r\n            summary.WriteMessage(this, \"\");\r\n\r\n            IrrigDay = 5000;  //so will reset to 1 on first day\r\n              StartDate = DateTime.Parse(IrrigStart);\r\n              EndDate = DateTime.Parse(IrrigEnd);\r\n\r\n            Rain3 = 0;\r\n            Rain_3 = new double[4];\r\n            Rain_3[0] = 0;\r\n            Rain_3[1] = 0;\r\n            Rain_3[2] = 0;\r\n\r\n              SoilPAW = 0.0;\r\n\r\n              double[] sw_dul = soil.DULmm;\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) \r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n              }\r\n\r\n              if(SoilPAW <= CritPAWForShallow) {      \r\n                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                IrrigReturn = IrrigReturnShallow;\r\n                IrrigAmt = IrrigAmtShallow;\r\n                IrrigEff = IrrigEffShallow ;           \r\n                summary.WriteMessage(this, \"  Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW);\r\n            } \r\n            else \r\n            {\r\n                IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                IrrigReturn = IrrigReturnDeep;\r\n                IrrigAmt = IrrigAmtDeep;\r\n                IrrigEff = IrrigEffDeep;\r\n                summary.WriteMessage(this, \"  Soil is considered to be deep\");\r\n            }\r\n\r\n            summary.WriteMessage(this, \"  Irrigation critical deficit (mm): \" + IrrigDeficit);\r\n            summary.WriteMessage(this, \"          Irrigation return (days): \" + IrrigReturn);\r\n            summary.WriteMessage(this, \"     Irrigation pumped amount (mm): \" + IrrigAmt);\r\n            summary.WriteMessage(this, \"         Irrigation efficiency (%): \" + IrrigEff);\r\n            summary.WriteMessage(this, \"\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialised\");\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            \r\n        }\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n       [EventSubscribe(\"PreparingNewWeatherData\")]\r\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\r\n        {\r\n            RainToday = Met.Rain; //takes note of how much rain was due to fall today        \r\n        }\r\n\r\n        //[EventSubscribe(\"DoDailyInitialisation\")]\r\n        //private void OnDoDailyInitialisation(object sender, EventArgs e) \r\n        //{\r\n        //}\r\n\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            int rain=0;\r\n\r\n            Rain_3[2] = Rain_3[1];\r\n            Rain_3[1] = Rain_3[0];\r\n            Rain_3[0] = RainToday;\r\n            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days\r\n            if(Rain3 >= CritRainToPause)\r\n                Days2Pause = DaysToPauseOnCritRain;\r\n            else\r\n                Days2Pause = Days2Pause - 1;\r\n\r\n            double[] sw_dul = soil.DULmm;\r\n            double[] sw_sw = soil.Thickness;  // ??? was MySwim.sw_dep\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n\r\n            TodayDeficit = 0.0;\r\n            SoilPAW = 0.0;\r\n\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) {\r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);\r\n                  }\r\n              }\r\n            TodayDeficit_nve = -1 * TodayDeficit;\r\n\r\n            if (isBetween(Clock.Today, StartDate, EndDate)) {\r\n                 if(SoilPAW <= CritPAWForShallow) {      \r\n                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                    IrrigReturn = IrrigReturnShallow;\r\n                    IrrigAmt = IrrigAmtShallow;\r\n                    IrrigEff = IrrigEffShallow ;           \r\n                } \r\n                else \r\n                {\r\n                    IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                    IrrigReturn = IrrigReturnDeep;\r\n                    IrrigAmt = IrrigAmtDeep;\r\n                    IrrigEff = IrrigEffDeep;\r\n                }\r\n\r\n                if(Days2Pause < 0.5) {\r\n                    IrrigDay = IrrigDay + 1;\r\n                    if(IrrigDay > IrrigReturn)\r\n                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    \r\n\r\n                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {\r\n                        if(IrrigDay == 1){\r\n                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));\r\n                            //summary.WriteMessage(this, \"Rain today was \" + RainToday + \". Applying \" + AmountToApply+ \" mm of irrigation\");\r\n                            irrigation.Apply(AmountToApply);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "allowIrrigation",
                          "Value": "yes"
                        },
                        {
                          "Key": "IrrigStart",
                          "Value": "1-sep"
                        },
                        {
                          "Key": "IrrigEnd",
                          "Value": "30-apr"
                        },
                        {
                          "Key": "SoilDepth",
                          "Value": "500"
                        },
                        {
                          "Key": "CritPAWForShallow",
                          "Value": "60"
                        },
                        {
                          "Key": "CritRainToPause",
                          "Value": "30"
                        },
                        {
                          "Key": "DaysToPauseOnCritRain",
                          "Value": "3"
                        },
                        {
                          "Key": "IrrigReturnShallow",
                          "Value": "2"
                        },
                        {
                          "Key": "IrrigAmtShallow",
                          "Value": "10"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitShallow",
                          "Value": "30"
                        },
                        {
                          "Key": "IrrigEffShallow",
                          "Value": "100"
                        },
                        {
                          "Key": "IrrigReturnDeep",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmtDeep",
                          "Value": "20"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitDeep",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigEffDeep",
                          "Value": "100"
                        },
                        {
                          "Key": "TodayDeficit",
                          "Value": "123.894"
                        },
                        {
                          "Key": "TodayDeficit_nve",
                          "Value": "-123.894"
                        },
                        {
                          "Key": "IrrigDay",
                          "Value": "3"
                        },
                        {
                          "Key": "SoilPAW",
                          "Value": "63.65"
                        },
                        {
                          "Key": "IrrigDeficit",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigReturn",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmt",
                          "Value": "20"
                        },
                        {
                          "Key": "IrrigEff",
                          "Value": "100"
                        },
                        {
                          "Key": "Rain3",
                          "Value": "0"
                        },
                        {
                          "Key": "Days2Pause",
                          "Value": "-80"
                        }
                      ],
                      "Name": "CentrePivot",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "Canopies": [],
                      "InitialResidueName": "grass",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 500.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "FractionFaecesAdded": 1.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "soil_albedo": 0.23,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "(sum([Soil].SoilNitrogen.Urea.kgha) + sum([Soil].SoilNitrogen.NH4.kgha) + sum([Soil].SoilNitrogen.NO3.kgha)) as minNPaddock"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "Name": "Report",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": "NZ_Sedimentary",
                      "LocalName": "Lismore",
                      "Site": "Winchmore",
                      "NearestTown": "Ashburton",
                      "Region": "Canterbury",
                      "State": null,
                      "Country": "New Zealand",
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": -48.48,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 0,
                          "FractionFull": 0.987012987012987,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "ParticleSizeClay": [
                            18.333333333333332,
                            15.0,
                            12.0,
                            10.666666666666666,
                            8.0,
                            6.0,
                            5.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "BD": [
                            1.3,
                            1.35,
                            1.0,
                            0.53,
                            0.31,
                            0.3,
                            0.3
                          ],
                          "AirDry": [
                            0.05,
                            0.12,
                            0.015,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "LL15": [
                            0.15,
                            0.14,
                            0.055,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "DUL": [
                            0.36,
                            0.34,
                            0.19,
                            0.065,
                            0.04,
                            0.03,
                            0.03
                          ],
                          "SAT": [
                            0.45,
                            0.43,
                            0.25,
                            0.15,
                            0.11,
                            0.11,
                            0.11
                          ],
                          "KS": [
                            5000.0,
                            2500.0,
                            3000.0,
                            10000.0,
                            17500.0,
                            20000.0,
                            20000.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilWater, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 2.0,
                          "WinterCona": 2.0,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "slope": 0.0,
                          "discharge_width": 0.0,
                          "catchment_area": 0.0,
                          "max_pond": 0.0,
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "SWCON": [
                            0.4,
                            0.5,
                            0.6,
                            0.6,
                            0.8,
                            0.8,
                            0.8
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PrecipitationInterception": 0.0,
                          "Name": "SoilWater",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "Carbon": [
                            3.0,
                            1.0,
                            0.6,
                            0.4,
                            0.25,
                            0.15,
                            0.1
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.04,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.5,
                            0.7,
                            0.83,
                            0.9,
                            0.95,
                            0.99,
                            0.99
                          ],
                          "FOM": [
                            331.337020409173,
                            245.46050190550559,
                            164.53709493722965,
                            121.89207790753734,
                            73.931282427002344,
                            40.574348067292682,
                            22.267674346259405
                          ],
                          "Name": "Organic",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": [
                            7.619,
                            7.27,
                            3.8709999999999991,
                            3.84,
                            3.81,
                            3.7789999999999995,
                            3.6910000000000007
                          ],
                          "NH4N": [
                            0.132,
                            0.132,
                            0.132,
                            0.13200000000000003,
                            0.13199999999999998,
                            0.13199999999999998,
                            0.13199999999999998
                          ],
                          "PH": [
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "Name": "Chemical",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Sample, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": null,
                          "NH4N": null,
                          "SW": null,
                          "OC": null,
                          "EC": null,
                          "CL": null,
                          "ESP": null,
                          "PH": null,
                          "SWUnits": 0,
                          "OCUnits": 0,
                          "PHUnits": 0,
                          "Name": "Initial nitrogen",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                              "Name": "PlantAvailableNO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                              "Name": "PlantAvailableNH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "CERESSoilTemperature",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 500.0,
                      "InitialRootDM": 150.0,
                      "InitialRootDepth": 350.0,
                      "ResourceName": "AGPWhiteClover",
                      "Name": "AGPWhiteClover",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "P2",
                  "Children": [
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Diagnostics; // used with Debugger.Break(); to debug manager scripts\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil soil;\r\n        [Link] Weather Met; \r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public answerTypes allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string IrrigStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string IrrigEnd { get; set; }\r\n        [Description(\"Enter the depth to which water deficit is computed (mm)\")]\r\n        public double SoilDepth { get; set; }\r\n        [Description(\"PAW below which soil is considered 'shallow' (mm)\")]\r\n        public double CritPAWForShallow { get; set; }\r\n        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")]\r\n        public double CritRainToPause { get; set; }\r\n        [Description(\"Number of days to pause irrigator after critical rainfall (days)\")]\r\n        public double DaysToPauseOnCritRain { get; set; }\r\n\r\n        [Description(\"Shallow Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnShallow { get; set; }\r\n        [Description(\"Shallow Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtShallow { get; set; }\r\n        [Description(\"Shallow Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitShallow { get; set; }\r\n        [Description(\"Shallow Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffShallow { get; set; }\r\n\r\n        [Description(\"Deep Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnDeep { get; set; }\r\n        [Description(\"Deep Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtDeep { get; set; }\r\n        [Description(\"Deep Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitDeep { get; set; }\r\n        [Description(\"Deep Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffDeep { get; set; }\r\n\r\n        // Outputs\r\n        public double TodayDeficit { get; set; }\r\n        public double TodayDeficit_nve { get; set; }\r\n        public double IrrigDay { get; set; }\r\n        public double SoilPAW { get; set; }\r\n        public double IrrigDeficit { get; set; }\r\n        public double IrrigReturn { get; set; }\r\n        public double IrrigAmt { get; set; }\r\n        public double IrrigEff { get; set; }\r\n        public double Rain3 { get; set; }\r\n\r\n        public double Days2Pause { get; set; }\r\n\r\n        // internal use\r\n        private DateTime StartDate;               //The date when irrigation start (in date format)\r\n        private DateTime EndDate;                 //The date when irrigation finish (in date format)\r\n        private double RainToday=0;\r\n        public double[] Rain_3;\r\n\r\n        public enum answerTypes\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialising          \");\r\n            summary.WriteMessage(this, \"\");\r\n\r\n            IrrigDay = 5000;  //so will reset to 1 on first day\r\n              StartDate = DateTime.Parse(IrrigStart);\r\n              EndDate = DateTime.Parse(IrrigEnd);\r\n\r\n            Rain3 = 0;\r\n            Rain_3 = new double[4];\r\n            Rain_3[0] = 0;\r\n            Rain_3[1] = 0;\r\n            Rain_3[2] = 0;\r\n\r\n              SoilPAW = 0.0;\r\n\r\n              double[] sw_dul = soil.DULmm;\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) \r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n              }\r\n\r\n              if(SoilPAW <= CritPAWForShallow) {      \r\n                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                IrrigReturn = IrrigReturnShallow;\r\n                IrrigAmt = IrrigAmtShallow;\r\n                IrrigEff = IrrigEffShallow ;           \r\n                summary.WriteMessage(this, \"  Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW);\r\n            } \r\n            else \r\n            {\r\n                IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                IrrigReturn = IrrigReturnDeep;\r\n                IrrigAmt = IrrigAmtDeep;\r\n                IrrigEff = IrrigEffDeep;\r\n                summary.WriteMessage(this, \"  Soil is considered to be deep\");\r\n            }\r\n\r\n            summary.WriteMessage(this, \"  Irrigation critical deficit (mm): \" + IrrigDeficit);\r\n            summary.WriteMessage(this, \"          Irrigation return (days): \" + IrrigReturn);\r\n            summary.WriteMessage(this, \"     Irrigation pumped amount (mm): \" + IrrigAmt);\r\n            summary.WriteMessage(this, \"         Irrigation efficiency (%): \" + IrrigEff);\r\n            summary.WriteMessage(this, \"\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialised\");\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            \r\n        }\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n       [EventSubscribe(\"PreparingNewWeatherData\")]\r\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\r\n        {\r\n            RainToday = Met.Rain; //takes note of how much rain was due to fall today        \r\n        }\r\n\r\n        //[EventSubscribe(\"DoDailyInitialisation\")]\r\n        //private void OnDoDailyInitialisation(object sender, EventArgs e) \r\n        //{\r\n        //}\r\n\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            int rain=0;\r\n\r\n            Rain_3[2] = Rain_3[1];\r\n            Rain_3[1] = Rain_3[0];\r\n            Rain_3[0] = RainToday;\r\n            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days\r\n            if(Rain3 >= CritRainToPause)\r\n                Days2Pause = DaysToPauseOnCritRain;\r\n            else\r\n                Days2Pause = Days2Pause - 1;\r\n\r\n            double[] sw_dul = soil.DULmm;\r\n            double[] sw_sw = soil.Thickness;  // ??? was MySwim.sw_dep\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n\r\n            TodayDeficit = 0.0;\r\n            SoilPAW = 0.0;\r\n\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) {\r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);\r\n                  }\r\n              }\r\n            TodayDeficit_nve = -1 * TodayDeficit;\r\n\r\n            if (isBetween(Clock.Today, StartDate, EndDate)) {\r\n                 if(SoilPAW <= CritPAWForShallow) {      \r\n                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                    IrrigReturn = IrrigReturnShallow;\r\n                    IrrigAmt = IrrigAmtShallow;\r\n                    IrrigEff = IrrigEffShallow ;           \r\n                } \r\n                else \r\n                {\r\n                    IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                    IrrigReturn = IrrigReturnDeep;\r\n                    IrrigAmt = IrrigAmtDeep;\r\n                    IrrigEff = IrrigEffDeep;\r\n                }\r\n\r\n                if(Days2Pause < 0.5) {\r\n                    IrrigDay = IrrigDay + 1;\r\n                    if(IrrigDay > IrrigReturn)\r\n                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    \r\n\r\n                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {\r\n                        if(IrrigDay == 1){\r\n                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));\r\n                            //summary.WriteMessage(this, \"Rain today was \" + RainToday + \". Applying \" + AmountToApply+ \" mm of irrigation\");\r\n                            irrigation.Apply(AmountToApply);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "allowIrrigation",
                          "Value": "yes"
                        },
                        {
                          "Key": "IrrigStart",
                          "Value": "1-sep"
                        },
                        {
                          "Key": "IrrigEnd",
                          "Value": "30-apr"
                        },
                        {
                          "Key": "SoilDepth",
                          "Value": "500"
                        },
                        {
                          "Key": "CritPAWForShallow",
                          "Value": "60"
                        },
                        {
                          "Key": "CritRainToPause",
                          "Value": "30"
                        },
                        {
                          "Key": "DaysToPauseOnCritRain",
                          "Value": "3"
                        },
                        {
                          "Key": "IrrigReturnShallow",
                          "Value": "2"
                        },
                        {
                          "Key": "IrrigAmtShallow",
                          "Value": "10"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitShallow",
                          "Value": "30"
                        },
                        {
                          "Key": "IrrigEffShallow",
                          "Value": "100"
                        },
                        {
                          "Key": "IrrigReturnDeep",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmtDeep",
                          "Value": "20"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitDeep",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigEffDeep",
                          "Value": "100"
                        },
                        {
                          "Key": "TodayDeficit",
                          "Value": "123.894"
                        },
                        {
                          "Key": "TodayDeficit_nve",
                          "Value": "-123.894"
                        },
                        {
                          "Key": "IrrigDay",
                          "Value": "3"
                        },
                        {
                          "Key": "SoilPAW",
                          "Value": "63.65"
                        },
                        {
                          "Key": "IrrigDeficit",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigReturn",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmt",
                          "Value": "20"
                        },
                        {
                          "Key": "IrrigEff",
                          "Value": "100"
                        },
                        {
                          "Key": "Rain3",
                          "Value": "0"
                        },
                        {
                          "Key": "Days2Pause",
                          "Value": "-80"
                        }
                      ],
                      "Name": "CentrePivot",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "Canopies": [],
                      "InitialResidueName": "grass",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 500.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "FractionFaecesAdded": 1.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "soil_albedo": 0.23,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "(sum([Soil].SoilNitrogen.Urea.kgha) + sum([Soil].SoilNitrogen.NH4.kgha) + sum([Soil].SoilNitrogen.NO3.kgha)) as minNPaddock"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "Name": "Report",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": "NZ_Sedimentary",
                      "LocalName": "Lismore",
                      "Site": "Winchmore",
                      "NearestTown": "Ashburton",
                      "Region": "Canterbury",
                      "State": null,
                      "Country": "New Zealand",
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": -48.48,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 0,
                          "FractionFull": 0.987012987012987,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "ParticleSizeClay": [
                            18.333333333333332,
                            15.0,
                            12.0,
                            10.666666666666666,
                            8.0,
                            6.0,
                            5.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "BD": [
                            1.3,
                            1.35,
                            1.0,
                            0.015,
                            0.31,
                            0.3,
                            0.3
                          ],
                          "AirDry": [
                            0.05,
                            0.12,
                            0.015,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "LL15": [
                            0.15,
                            0.14,
                            0.055,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "DUL": [
                            0.36,
                            0.34,
                            0.19,
                            0.065,
                            0.04,
                            0.03,
                            0.03
                          ],
                          "SAT": [
                            0.45,
                            0.43,
                            0.25,
                            0.15,
                            0.11,
                            0.11,
                            0.11
                          ],
                          "KS": [
                            5000.0,
                            2500.0,
                            3000.0,
                            10000.0,
                            17500.0,
                            20000.0,
                            20000.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilWater, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 2.0,
                          "WinterCona": 2.0,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "slope": 0.0,
                          "discharge_width": 0.0,
                          "catchment_area": 0.0,
                          "max_pond": 0.0,
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "SWCON": [
                            0.4,
                            0.5,
                            0.6,
                            0.6,
                            0.8,
                            0.8,
                            0.8
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PrecipitationInterception": 0.0,
                          "Name": "SoilWater",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "Carbon": [
                            3.0,
                            1.0,
                            0.6,
                            0.4,
                            0.25,
                            0.15,
                            0.1
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.04,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.5,
                            0.7,
                            0.83,
                            0.9,
                            0.95,
                            0.99,
                            0.99
                          ],
                          "FOM": [
                            331.337020409173,
                            245.46050190550559,
                            164.53709493722965,
                            121.89207790753734,
                            73.931282427002344,
                            40.574348067292682,
                            22.267674346259405
                          ],
                          "Name": "Organic",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": [
                            7.619,
                            7.27,
                            3.8709999999999991,
                            3.84,
                            3.81,
                            3.7789999999999995,
                            3.6910000000000007
                          ],
                          "NH4N": [
                            0.132,
                            0.132,
                            0.132,
                            0.13200000000000003,
                            0.13199999999999998,
                            0.13199999999999998,
                            0.13199999999999998
                          ],
                          "PH": [
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "Name": "Chemical",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Sample, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": null,
                          "NH4N": null,
                          "SW": null,
                          "OC": null,
                          "EC": null,
                          "CL": null,
                          "ESP": null,
                          "PH": null,
                          "SWUnits": 0,
                          "OCUnits": 0,
                          "PHUnits": 0,
                          "Name": "Initial nitrogen",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                              "Name": "PlantAvailableNO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                              "Name": "PlantAvailableNH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "CERESSoilTemperature",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 500.0,
                      "InitialRootDM": 150.0,
                      "InitialRootDepth": 350.0,
                      "ResourceName": "AGPWhiteClover",
                      "Name": "AGPWhiteClover",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "P3",
                  "Children": [
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Diagnostics; // used with Debugger.Break(); to debug manager scripts\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil soil;\r\n        [Link] Weather Met; \r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public answerTypes allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string IrrigStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string IrrigEnd { get; set; }\r\n        [Description(\"Enter the depth to which water deficit is computed (mm)\")]\r\n        public double SoilDepth { get; set; }\r\n        [Description(\"PAW below which soil is considered 'shallow' (mm)\")]\r\n        public double CritPAWForShallow { get; set; }\r\n        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")]\r\n        public double CritRainToPause { get; set; }\r\n        [Description(\"Number of days to pause irrigator after critical rainfall (days)\")]\r\n        public double DaysToPauseOnCritRain { get; set; }\r\n\r\n        [Description(\"Shallow Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnShallow { get; set; }\r\n        [Description(\"Shallow Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtShallow { get; set; }\r\n        [Description(\"Shallow Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitShallow { get; set; }\r\n        [Description(\"Shallow Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffShallow { get; set; }\r\n\r\n        [Description(\"Deep Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnDeep { get; set; }\r\n        [Description(\"Deep Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtDeep { get; set; }\r\n        [Description(\"Deep Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitDeep { get; set; }\r\n        [Description(\"Deep Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffDeep { get; set; }\r\n\r\n        // Outputs\r\n        public double TodayDeficit { get; set; }\r\n        public double TodayDeficit_nve { get; set; }\r\n        public double IrrigDay { get; set; }\r\n        public double SoilPAW { get; set; }\r\n        public double IrrigDeficit { get; set; }\r\n        public double IrrigReturn { get; set; }\r\n        public double IrrigAmt { get; set; }\r\n        public double IrrigEff { get; set; }\r\n        public double Rain3 { get; set; }\r\n\r\n        public double Days2Pause { get; set; }\r\n\r\n        // internal use\r\n        private DateTime StartDate;               //The date when irrigation start (in date format)\r\n        private DateTime EndDate;                 //The date when irrigation finish (in date format)\r\n        private double RainToday=0;\r\n        public double[] Rain_3;\r\n\r\n        public enum answerTypes\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialising          \");\r\n            summary.WriteMessage(this, \"\");\r\n\r\n            IrrigDay = 5000;  //so will reset to 1 on first day\r\n              StartDate = DateTime.Parse(IrrigStart);\r\n              EndDate = DateTime.Parse(IrrigEnd);\r\n\r\n            Rain3 = 0;\r\n            Rain_3 = new double[4];\r\n            Rain_3[0] = 0;\r\n            Rain_3[1] = 0;\r\n            Rain_3[2] = 0;\r\n\r\n              SoilPAW = 0.0;\r\n\r\n              double[] sw_dul = soil.DULmm;\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) \r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n              }\r\n\r\n              if(SoilPAW <= CritPAWForShallow) {      \r\n                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                IrrigReturn = IrrigReturnShallow;\r\n                IrrigAmt = IrrigAmtShallow;\r\n                IrrigEff = IrrigEffShallow ;           \r\n                summary.WriteMessage(this, \"  Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW);\r\n            } \r\n            else \r\n            {\r\n                IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                IrrigReturn = IrrigReturnDeep;\r\n                IrrigAmt = IrrigAmtDeep;\r\n                IrrigEff = IrrigEffDeep;\r\n                summary.WriteMessage(this, \"  Soil is considered to be deep\");\r\n            }\r\n\r\n            summary.WriteMessage(this, \"  Irrigation critical deficit (mm): \" + IrrigDeficit);\r\n            summary.WriteMessage(this, \"          Irrigation return (days): \" + IrrigReturn);\r\n            summary.WriteMessage(this, \"     Irrigation pumped amount (mm): \" + IrrigAmt);\r\n            summary.WriteMessage(this, \"         Irrigation efficiency (%): \" + IrrigEff);\r\n            summary.WriteMessage(this, \"\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialised\");\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            \r\n        }\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n       [EventSubscribe(\"PreparingNewWeatherData\")]\r\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\r\n        {\r\n            RainToday = Met.Rain; //takes note of how much rain was due to fall today        \r\n        }\r\n\r\n        //[EventSubscribe(\"DoDailyInitialisation\")]\r\n        //private void OnDoDailyInitialisation(object sender, EventArgs e) \r\n        //{\r\n        //}\r\n\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            int rain=0;\r\n\r\n            Rain_3[2] = Rain_3[1];\r\n            Rain_3[1] = Rain_3[0];\r\n            Rain_3[0] = RainToday;\r\n            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days\r\n            if(Rain3 >= CritRainToPause)\r\n                Days2Pause = DaysToPauseOnCritRain;\r\n            else\r\n                Days2Pause = Days2Pause - 1;\r\n\r\n            double[] sw_dul = soil.DULmm;\r\n            double[] sw_sw = soil.Thickness;  // ??? was MySwim.sw_dep\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n\r\n            TodayDeficit = 0.0;\r\n            SoilPAW = 0.0;\r\n\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) {\r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);\r\n                  }\r\n              }\r\n            TodayDeficit_nve = -1 * TodayDeficit;\r\n\r\n            if (isBetween(Clock.Today, StartDate, EndDate)) {\r\n                 if(SoilPAW <= CritPAWForShallow) {      \r\n                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                    IrrigReturn = IrrigReturnShallow;\r\n                    IrrigAmt = IrrigAmtShallow;\r\n                    IrrigEff = IrrigEffShallow ;           \r\n                } \r\n                else \r\n                {\r\n                    IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                    IrrigReturn = IrrigReturnDeep;\r\n                    IrrigAmt = IrrigAmtDeep;\r\n                    IrrigEff = IrrigEffDeep;\r\n                }\r\n\r\n                if(Days2Pause < 0.5) {\r\n                    IrrigDay = IrrigDay + 1;\r\n                    if(IrrigDay > IrrigReturn)\r\n                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    \r\n\r\n                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {\r\n                        if(IrrigDay == 1){\r\n                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));\r\n                            //summary.WriteMessage(this, \"Rain today was \" + RainToday + \". Applying \" + AmountToApply+ \" mm of irrigation\");\r\n                            irrigation.Apply(AmountToApply);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "allowIrrigation",
                          "Value": "yes"
                        },
                        {
                          "Key": "IrrigStart",
                          "Value": "1-sep"
                        },
                        {
                          "Key": "IrrigEnd",
                          "Value": "30-apr"
                        },
                        {
                          "Key": "SoilDepth",
                          "Value": "500"
                        },
                        {
                          "Key": "CritPAWForShallow",
                          "Value": "60"
                        },
                        {
                          "Key": "CritRainToPause",
                          "Value": "30"
                        },
                        {
                          "Key": "DaysToPauseOnCritRain",
                          "Value": "3"
                        },
                        {
                          "Key": "IrrigReturnShallow",
                          "Value": "2"
                        },
                        {
                          "Key": "IrrigAmtShallow",
                          "Value": "10"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitShallow",
                          "Value": "30"
                        },
                        {
                          "Key": "IrrigEffShallow",
                          "Value": "100"
                        },
                        {
                          "Key": "IrrigReturnDeep",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmtDeep",
                          "Value": "20"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitDeep",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigEffDeep",
                          "Value": "100"
                        },
                        {
                          "Key": "TodayDeficit",
                          "Value": "123.894"
                        },
                        {
                          "Key": "TodayDeficit_nve",
                          "Value": "-123.894"
                        },
                        {
                          "Key": "IrrigDay",
                          "Value": "3"
                        },
                        {
                          "Key": "SoilPAW",
                          "Value": "63.65"
                        },
                        {
                          "Key": "IrrigDeficit",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigReturn",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmt",
                          "Value": "20"
                        },
                        {
                          "Key": "IrrigEff",
                          "Value": "100"
                        },
                        {
                          "Key": "Rain3",
                          "Value": "0"
                        },
                        {
                          "Key": "Days2Pause",
                          "Value": "-80"
                        }
                      ],
                      "Name": "CentrePivot",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "Canopies": [],
                      "InitialResidueName": "grass",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 500.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "FractionFaecesAdded": 1.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "soil_albedo": 0.23,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "(sum([Soil].SoilNitrogen.Urea.kgha) + sum([Soil].SoilNitrogen.NH4.kgha) + sum([Soil].SoilNitrogen.NO3.kgha)) as minNPaddock"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "Name": "Report",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": "NZ_Sedimentary",
                      "LocalName": "Lismore",
                      "Site": "Winchmore",
                      "NearestTown": "Ashburton",
                      "Region": "Canterbury",
                      "State": null,
                      "Country": "New Zealand",
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": -48.48,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 0,
                          "FractionFull": 0.987012987012987,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "ParticleSizeClay": [
                            18.333333333333332,
                            15.0,
                            12.0,
                            10.666666666666666,
                            8.0,
                            6.0,
                            5.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "BD": [
                            1.3,
                            1.35,
                            1.0,
                            0.015,
                            0.31,
                            0.3,
                            0.3
                          ],
                          "AirDry": [
                            0.05,
                            0.12,
                            0.015,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "LL15": [
                            0.15,
                            0.14,
                            0.055,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "DUL": [
                            0.36,
                            0.34,
                            0.19,
                            0.065,
                            0.04,
                            0.03,
                            0.03
                          ],
                          "SAT": [
                            0.45,
                            0.43,
                            0.25,
                            0.15,
                            0.11,
                            0.11,
                            0.11
                          ],
                          "KS": [
                            5000.0,
                            2500.0,
                            3000.0,
                            10000.0,
                            17500.0,
                            20000.0,
                            20000.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilWater, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 2.0,
                          "WinterCona": 2.0,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "slope": 0.0,
                          "discharge_width": 0.0,
                          "catchment_area": 0.0,
                          "max_pond": 0.0,
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "SWCON": [
                            0.4,
                            0.5,
                            0.6,
                            0.6,
                            0.8,
                            0.8,
                            0.8
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PrecipitationInterception": 0.0,
                          "Name": "SoilWater",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "Carbon": [
                            3.0,
                            1.0,
                            0.6,
                            0.4,
                            0.25,
                            0.15,
                            0.1
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.04,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.5,
                            0.7,
                            0.83,
                            0.9,
                            0.95,
                            0.99,
                            0.99
                          ],
                          "FOM": [
                            331.337020409173,
                            245.46050190550559,
                            164.53709493722965,
                            121.89207790753734,
                            73.931282427002344,
                            40.574348067292682,
                            22.267674346259405
                          ],
                          "Name": "Organic",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": [
                            7.619,
                            7.27,
                            3.8709999999999991,
                            3.84,
                            3.81,
                            3.7789999999999995,
                            3.6910000000000007
                          ],
                          "NH4N": [
                            0.132,
                            0.132,
                            0.132,
                            0.13200000000000003,
                            0.13199999999999998,
                            0.13199999999999998,
                            0.13199999999999998
                          ],
                          "PH": [
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "Name": "Chemical",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Sample, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": null,
                          "NH4N": null,
                          "SW": null,
                          "OC": null,
                          "EC": null,
                          "CL": null,
                          "ESP": null,
                          "PH": null,
                          "SWUnits": 0,
                          "OCUnits": 0,
                          "PHUnits": 0,
                          "Name": "Initial nitrogen",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                              "Name": "PlantAvailableNO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                              "Name": "PlantAvailableNH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "CERESSoilTemperature",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 500.0,
                      "InitialRootDM": 150.0,
                      "InitialRootDepth": 350.0,
                      "ResourceName": "AGPWhiteClover",
                      "Name": "AGPWhiteClover",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "P4",
                  "Children": [
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Diagnostics; // used with Debugger.Break(); to debug manager scripts\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil soil;\r\n        [Link] Weather Met; \r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public answerTypes allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string IrrigStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string IrrigEnd { get; set; }\r\n        [Description(\"Enter the depth to which water deficit is computed (mm)\")]\r\n        public double SoilDepth { get; set; }\r\n        [Description(\"PAW below which soil is considered 'shallow' (mm)\")]\r\n        public double CritPAWForShallow { get; set; }\r\n        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")]\r\n        public double CritRainToPause { get; set; }\r\n        [Description(\"Number of days to pause irrigator after critical rainfall (days)\")]\r\n        public double DaysToPauseOnCritRain { get; set; }\r\n\r\n        [Description(\"Shallow Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnShallow { get; set; }\r\n        [Description(\"Shallow Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtShallow { get; set; }\r\n        [Description(\"Shallow Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitShallow { get; set; }\r\n        [Description(\"Shallow Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffShallow { get; set; }\r\n\r\n        [Description(\"Deep Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnDeep { get; set; }\r\n        [Description(\"Deep Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtDeep { get; set; }\r\n        [Description(\"Deep Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitDeep { get; set; }\r\n        [Description(\"Deep Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffDeep { get; set; }\r\n\r\n        // Outputs\r\n        public double TodayDeficit { get; set; }\r\n        public double TodayDeficit_nve { get; set; }\r\n        public double IrrigDay { get; set; }\r\n        public double SoilPAW { get; set; }\r\n        public double IrrigDeficit { get; set; }\r\n        public double IrrigReturn { get; set; }\r\n        public double IrrigAmt { get; set; }\r\n        public double IrrigEff { get; set; }\r\n        public double Rain3 { get; set; }\r\n\r\n        public double Days2Pause { get; set; }\r\n\r\n        // internal use\r\n        private DateTime StartDate;               //The date when irrigation start (in date format)\r\n        private DateTime EndDate;                 //The date when irrigation finish (in date format)\r\n        private double RainToday=0;\r\n        public double[] Rain_3;\r\n\r\n        public enum answerTypes\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialising          \");\r\n            summary.WriteMessage(this, \"\");\r\n\r\n            IrrigDay = 5000;  //so will reset to 1 on first day\r\n              StartDate = DateTime.Parse(IrrigStart);\r\n              EndDate = DateTime.Parse(IrrigEnd);\r\n\r\n            Rain3 = 0;\r\n            Rain_3 = new double[4];\r\n            Rain_3[0] = 0;\r\n            Rain_3[1] = 0;\r\n            Rain_3[2] = 0;\r\n\r\n              SoilPAW = 0.0;\r\n\r\n              double[] sw_dul = soil.DULmm;\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) \r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n              }\r\n\r\n              if(SoilPAW <= CritPAWForShallow) {      \r\n                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                IrrigReturn = IrrigReturnShallow;\r\n                IrrigAmt = IrrigAmtShallow;\r\n                IrrigEff = IrrigEffShallow ;           \r\n                summary.WriteMessage(this, \"  Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW);\r\n            } \r\n            else \r\n            {\r\n                IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                IrrigReturn = IrrigReturnDeep;\r\n                IrrigAmt = IrrigAmtDeep;\r\n                IrrigEff = IrrigEffDeep;\r\n                summary.WriteMessage(this, \"  Soil is considered to be deep\");\r\n            }\r\n\r\n            summary.WriteMessage(this, \"  Irrigation critical deficit (mm): \" + IrrigDeficit);\r\n            summary.WriteMessage(this, \"          Irrigation return (days): \" + IrrigReturn);\r\n            summary.WriteMessage(this, \"     Irrigation pumped amount (mm): \" + IrrigAmt);\r\n            summary.WriteMessage(this, \"         Irrigation efficiency (%): \" + IrrigEff);\r\n            summary.WriteMessage(this, \"\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialised\");\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            \r\n        }\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n       [EventSubscribe(\"PreparingNewWeatherData\")]\r\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\r\n        {\r\n            RainToday = Met.Rain; //takes note of how much rain was due to fall today        \r\n        }\r\n\r\n        //[EventSubscribe(\"DoDailyInitialisation\")]\r\n        //private void OnDoDailyInitialisation(object sender, EventArgs e) \r\n        //{\r\n        //}\r\n\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            int rain=0;\r\n\r\n            Rain_3[2] = Rain_3[1];\r\n            Rain_3[1] = Rain_3[0];\r\n            Rain_3[0] = RainToday;\r\n            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days\r\n            if(Rain3 >= CritRainToPause)\r\n                Days2Pause = DaysToPauseOnCritRain;\r\n            else\r\n                Days2Pause = Days2Pause - 1;\r\n\r\n            double[] sw_dul = soil.DULmm;\r\n            double[] sw_sw = soil.Thickness;  // ??? was MySwim.sw_dep\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n\r\n            TodayDeficit = 0.0;\r\n            SoilPAW = 0.0;\r\n\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) {\r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);\r\n                  }\r\n              }\r\n            TodayDeficit_nve = -1 * TodayDeficit;\r\n\r\n            if (isBetween(Clock.Today, StartDate, EndDate)) {\r\n                 if(SoilPAW <= CritPAWForShallow) {      \r\n                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                    IrrigReturn = IrrigReturnShallow;\r\n                    IrrigAmt = IrrigAmtShallow;\r\n                    IrrigEff = IrrigEffShallow ;           \r\n                } \r\n                else \r\n                {\r\n                    IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                    IrrigReturn = IrrigReturnDeep;\r\n                    IrrigAmt = IrrigAmtDeep;\r\n                    IrrigEff = IrrigEffDeep;\r\n                }\r\n\r\n                if(Days2Pause < 0.5) {\r\n                    IrrigDay = IrrigDay + 1;\r\n                    if(IrrigDay > IrrigReturn)\r\n                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    \r\n\r\n                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {\r\n                        if(IrrigDay == 1){\r\n                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));\r\n                            //summary.WriteMessage(this, \"Rain today was \" + RainToday + \". Applying \" + AmountToApply+ \" mm of irrigation\");\r\n                            irrigation.Apply(AmountToApply);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "allowIrrigation",
                          "Value": "yes"
                        },
                        {
                          "Key": "IrrigStart",
                          "Value": "1-sep"
                        },
                        {
                          "Key": "IrrigEnd",
                          "Value": "30-apr"
                        },
                        {
                          "Key": "SoilDepth",
                          "Value": "500"
                        },
                        {
                          "Key": "CritPAWForShallow",
                          "Value": "60"
                        },
                        {
                          "Key": "CritRainToPause",
                          "Value": "30"
                        },
                        {
                          "Key": "DaysToPauseOnCritRain",
                          "Value": "3"
                        },
                        {
                          "Key": "IrrigReturnShallow",
                          "Value": "2"
                        },
                        {
                          "Key": "IrrigAmtShallow",
                          "Value": "10"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitShallow",
                          "Value": "30"
                        },
                        {
                          "Key": "IrrigEffShallow",
                          "Value": "100"
                        },
                        {
                          "Key": "IrrigReturnDeep",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmtDeep",
                          "Value": "20"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitDeep",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigEffDeep",
                          "Value": "100"
                        },
                        {
                          "Key": "TodayDeficit",
                          "Value": "123.894"
                        },
                        {
                          "Key": "TodayDeficit_nve",
                          "Value": "-123.894"
                        },
                        {
                          "Key": "IrrigDay",
                          "Value": "3"
                        },
                        {
                          "Key": "SoilPAW",
                          "Value": "63.65"
                        },
                        {
                          "Key": "IrrigDeficit",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigReturn",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmt",
                          "Value": "20"
                        },
                        {
                          "Key": "IrrigEff",
                          "Value": "100"
                        },
                        {
                          "Key": "Rain3",
                          "Value": "0"
                        },
                        {
                          "Key": "Days2Pause",
                          "Value": "-80"
                        }
                      ],
                      "Name": "CentrePivot",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "Canopies": [],
                      "InitialResidueName": "grass",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 500.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "FractionFaecesAdded": 1.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "soil_albedo": 0.23,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "(sum([Soil].SoilNitrogen.Urea.kgha) + sum([Soil].SoilNitrogen.NH4.kgha) + sum([Soil].SoilNitrogen.NO3.kgha)) as minNPaddock"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "Name": "Report",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": "NZ_Sedimentary",
                      "LocalName": "Lismore",
                      "Site": "Winchmore",
                      "NearestTown": "Ashburton",
                      "Region": "Canterbury",
                      "State": null,
                      "Country": "New Zealand",
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": -48.48,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 0,
                          "FractionFull": 0.987012987012987,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "ParticleSizeClay": [
                            18.333333333333332,
                            15.0,
                            12.0,
                            10.666666666666666,
                            8.0,
                            6.0,
                            5.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "BD": [
                            1.3,
                            1.35,
                            1.0,
                            0.53,
                            0.31,
                            0.3,
                            0.3
                          ],
                          "AirDry": [
                            0.05,
                            0.12,
                            0.015,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "LL15": [
                            0.15,
                            0.14,
                            0.055,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "DUL": [
                            0.36,
                            0.34,
                            0.19,
                            0.065,
                            0.04,
                            0.03,
                            0.03
                          ],
                          "SAT": [
                            0.45,
                            0.43,
                            0.25,
                            0.15,
                            0.11,
                            0.11,
                            0.11
                          ],
                          "KS": [
                            5000.0,
                            2500.0,
                            3000.0,
                            10000.0,
                            17500.0,
                            20000.0,
                            20000.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilWater, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 2.0,
                          "WinterCona": 2.0,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "slope": 0.0,
                          "discharge_width": 0.0,
                          "catchment_area": 0.0,
                          "max_pond": 0.0,
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "SWCON": [
                            0.4,
                            0.5,
                            0.6,
                            0.6,
                            0.8,
                            0.8,
                            0.8
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PrecipitationInterception": 0.0,
                          "Name": "SoilWater",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "Carbon": [
                            3.0,
                            1.0,
                            0.6,
                            0.4,
                            0.25,
                            0.15,
                            0.1
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.04,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.5,
                            0.7,
                            0.83,
                            0.9,
                            0.95,
                            0.99,
                            0.99
                          ],
                          "FOM": [
                            331.337020409173,
                            245.46050190550559,
                            164.53709493722965,
                            121.89207790753734,
                            73.931282427002344,
                            40.574348067292682,
                            22.267674346259405
                          ],
                          "Name": "Organic",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": [
                            7.619,
                            7.27,
                            3.8709999999999991,
                            3.84,
                            3.81,
                            3.7789999999999995,
                            3.6910000000000007
                          ],
                          "NH4N": [
                            0.132,
                            0.132,
                            0.132,
                            0.13200000000000003,
                            0.13199999999999998,
                            0.13199999999999998,
                            0.13199999999999998
                          ],
                          "PH": [
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "Name": "Chemical",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Sample, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": null,
                          "NH4N": null,
                          "SW": null,
                          "OC": null,
                          "EC": null,
                          "CL": null,
                          "ESP": null,
                          "PH": null,
                          "SWUnits": 0,
                          "OCUnits": 0,
                          "PHUnits": 0,
                          "Name": "Initial nitrogen",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                              "Name": "PlantAvailableNO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                              "Name": "PlantAvailableNH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "CERESSoilTemperature",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 500.0,
                      "InitialRootDM": 150.0,
                      "InitialRootDepth": 350.0,
                      "ResourceName": "AGPWhiteClover",
                      "Name": "AGPWhiteClover",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "P5",
                  "Children": [
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Diagnostics; // used with Debugger.Break(); to debug manager scripts\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil soil;\r\n        [Link] Weather Met; \r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public answerTypes allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string IrrigStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string IrrigEnd { get; set; }\r\n        [Description(\"Enter the depth to which water deficit is computed (mm)\")]\r\n        public double SoilDepth { get; set; }\r\n        [Description(\"PAW below which soil is considered 'shallow' (mm)\")]\r\n        public double CritPAWForShallow { get; set; }\r\n        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")]\r\n        public double CritRainToPause { get; set; }\r\n        [Description(\"Number of days to pause irrigator after critical rainfall (days)\")]\r\n        public double DaysToPauseOnCritRain { get; set; }\r\n\r\n        [Description(\"Shallow Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnShallow { get; set; }\r\n        [Description(\"Shallow Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtShallow { get; set; }\r\n        [Description(\"Shallow Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitShallow { get; set; }\r\n        [Description(\"Shallow Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffShallow { get; set; }\r\n\r\n        [Description(\"Deep Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnDeep { get; set; }\r\n        [Description(\"Deep Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtDeep { get; set; }\r\n        [Description(\"Deep Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitDeep { get; set; }\r\n        [Description(\"Deep Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffDeep { get; set; }\r\n\r\n        // Outputs\r\n        public double TodayDeficit { get; set; }\r\n        public double TodayDeficit_nve { get; set; }\r\n        public double IrrigDay { get; set; }\r\n        public double SoilPAW { get; set; }\r\n        public double IrrigDeficit { get; set; }\r\n        public double IrrigReturn { get; set; }\r\n        public double IrrigAmt { get; set; }\r\n        public double IrrigEff { get; set; }\r\n        public double Rain3 { get; set; }\r\n\r\n        public double Days2Pause { get; set; }\r\n\r\n        // internal use\r\n        private DateTime StartDate;               //The date when irrigation start (in date format)\r\n        private DateTime EndDate;                 //The date when irrigation finish (in date format)\r\n        private double RainToday=0;\r\n        public double[] Rain_3;\r\n\r\n        public enum answerTypes\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialising          \");\r\n            summary.WriteMessage(this, \"\");\r\n\r\n            IrrigDay = 5000;  //so will reset to 1 on first day\r\n              StartDate = DateTime.Parse(IrrigStart);\r\n              EndDate = DateTime.Parse(IrrigEnd);\r\n\r\n            Rain3 = 0;\r\n            Rain_3 = new double[4];\r\n            Rain_3[0] = 0;\r\n            Rain_3[1] = 0;\r\n            Rain_3[2] = 0;\r\n\r\n              SoilPAW = 0.0;\r\n\r\n              double[] sw_dul = soil.DULmm;\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) \r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n              }\r\n\r\n              if(SoilPAW <= CritPAWForShallow) {      \r\n                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                IrrigReturn = IrrigReturnShallow;\r\n                IrrigAmt = IrrigAmtShallow;\r\n                IrrigEff = IrrigEffShallow ;           \r\n                summary.WriteMessage(this, \"  Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW);\r\n            } \r\n            else \r\n            {\r\n                IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                IrrigReturn = IrrigReturnDeep;\r\n                IrrigAmt = IrrigAmtDeep;\r\n                IrrigEff = IrrigEffDeep;\r\n                summary.WriteMessage(this, \"  Soil is considered to be deep\");\r\n            }\r\n\r\n            summary.WriteMessage(this, \"  Irrigation critical deficit (mm): \" + IrrigDeficit);\r\n            summary.WriteMessage(this, \"          Irrigation return (days): \" + IrrigReturn);\r\n            summary.WriteMessage(this, \"     Irrigation pumped amount (mm): \" + IrrigAmt);\r\n            summary.WriteMessage(this, \"         Irrigation efficiency (%): \" + IrrigEff);\r\n            summary.WriteMessage(this, \"\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialised\");\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            \r\n        }\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n       [EventSubscribe(\"PreparingNewWeatherData\")]\r\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\r\n        {\r\n            RainToday = Met.Rain; //takes note of how much rain was due to fall today        \r\n        }\r\n\r\n        //[EventSubscribe(\"DoDailyInitialisation\")]\r\n        //private void OnDoDailyInitialisation(object sender, EventArgs e) \r\n        //{\r\n        //}\r\n\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            int rain=0;\r\n\r\n            Rain_3[2] = Rain_3[1];\r\n            Rain_3[1] = Rain_3[0];\r\n            Rain_3[0] = RainToday;\r\n            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days\r\n            if(Rain3 >= CritRainToPause)\r\n                Days2Pause = DaysToPauseOnCritRain;\r\n            else\r\n                Days2Pause = Days2Pause - 1;\r\n\r\n            double[] sw_dul = soil.DULmm;\r\n            double[] sw_sw = soil.Thickness;  // ??? was MySwim.sw_dep\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n\r\n            TodayDeficit = 0.0;\r\n            SoilPAW = 0.0;\r\n\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) {\r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);\r\n                  }\r\n              }\r\n            TodayDeficit_nve = -1 * TodayDeficit;\r\n\r\n            if (isBetween(Clock.Today, StartDate, EndDate)) {\r\n                 if(SoilPAW <= CritPAWForShallow) {      \r\n                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                    IrrigReturn = IrrigReturnShallow;\r\n                    IrrigAmt = IrrigAmtShallow;\r\n                    IrrigEff = IrrigEffShallow ;           \r\n                } \r\n                else \r\n                {\r\n                    IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                    IrrigReturn = IrrigReturnDeep;\r\n                    IrrigAmt = IrrigAmtDeep;\r\n                    IrrigEff = IrrigEffDeep;\r\n                }\r\n\r\n                if(Days2Pause < 0.5) {\r\n                    IrrigDay = IrrigDay + 1;\r\n                    if(IrrigDay > IrrigReturn)\r\n                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    \r\n\r\n                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {\r\n                        if(IrrigDay == 1){\r\n                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));\r\n                            //summary.WriteMessage(this, \"Rain today was \" + RainToday + \". Applying \" + AmountToApply+ \" mm of irrigation\");\r\n                            irrigation.Apply(AmountToApply);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "allowIrrigation",
                          "Value": "yes"
                        },
                        {
                          "Key": "IrrigStart",
                          "Value": "1-sep"
                        },
                        {
                          "Key": "IrrigEnd",
                          "Value": "30-apr"
                        },
                        {
                          "Key": "SoilDepth",
                          "Value": "500"
                        },
                        {
                          "Key": "CritPAWForShallow",
                          "Value": "60"
                        },
                        {
                          "Key": "CritRainToPause",
                          "Value": "30"
                        },
                        {
                          "Key": "DaysToPauseOnCritRain",
                          "Value": "3"
                        },
                        {
                          "Key": "IrrigReturnShallow",
                          "Value": "2"
                        },
                        {
                          "Key": "IrrigAmtShallow",
                          "Value": "10"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitShallow",
                          "Value": "30"
                        },
                        {
                          "Key": "IrrigEffShallow",
                          "Value": "100"
                        },
                        {
                          "Key": "IrrigReturnDeep",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmtDeep",
                          "Value": "20"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitDeep",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigEffDeep",
                          "Value": "100"
                        },
                        {
                          "Key": "TodayDeficit",
                          "Value": "123.894"
                        },
                        {
                          "Key": "TodayDeficit_nve",
                          "Value": "-123.894"
                        },
                        {
                          "Key": "IrrigDay",
                          "Value": "3"
                        },
                        {
                          "Key": "SoilPAW",
                          "Value": "63.65"
                        },
                        {
                          "Key": "IrrigDeficit",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigReturn",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmt",
                          "Value": "20"
                        },
                        {
                          "Key": "IrrigEff",
                          "Value": "100"
                        },
                        {
                          "Key": "Rain3",
                          "Value": "0"
                        },
                        {
                          "Key": "Days2Pause",
                          "Value": "-80"
                        }
                      ],
                      "Name": "CentrePivot",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "Canopies": [],
                      "InitialResidueName": "grass",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 500.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "FractionFaecesAdded": 1.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "soil_albedo": 0.23,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "(sum([Soil].SoilNitrogen.Urea.kgha) + sum([Soil].SoilNitrogen.NH4.kgha) + sum([Soil].SoilNitrogen.NO3.kgha)) as minNPaddock"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "Name": "Report",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": "NZ_Sedimentary",
                      "LocalName": "Lismore",
                      "Site": "Winchmore",
                      "NearestTown": "Ashburton",
                      "Region": "Canterbury",
                      "State": null,
                      "Country": "New Zealand",
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": -48.48,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 0,
                          "FractionFull": 0.987012987012987,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "ParticleSizeClay": [
                            18.333333333333332,
                            15.0,
                            12.0,
                            10.666666666666666,
                            8.0,
                            6.0,
                            5.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "BD": [
                            1.3,
                            1.35,
                            1.0,
                            0.53,
                            0.31,
                            0.3,
                            0.3
                          ],
                          "AirDry": [
                            0.05,
                            0.12,
                            0.015,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "LL15": [
                            0.15,
                            0.14,
                            0.055,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "DUL": [
                            0.36,
                            0.34,
                            0.19,
                            0.065,
                            0.04,
                            0.03,
                            0.03
                          ],
                          "SAT": [
                            0.45,
                            0.43,
                            0.25,
                            0.15,
                            0.11,
                            0.11,
                            0.11
                          ],
                          "KS": [
                            5000.0,
                            2500.0,
                            3000.0,
                            10000.0,
                            17500.0,
                            20000.0,
                            20000.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilWater, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 2.0,
                          "WinterCona": 2.0,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "slope": 0.0,
                          "discharge_width": 0.0,
                          "catchment_area": 0.0,
                          "max_pond": 0.0,
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "SWCON": [
                            0.4,
                            0.5,
                            0.6,
                            0.6,
                            0.8,
                            0.8,
                            0.8
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PrecipitationInterception": 0.0,
                          "Name": "SoilWater",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "Carbon": [
                            3.0,
                            1.0,
                            0.6,
                            0.4,
                            0.25,
                            0.15,
                            0.1
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.04,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.5,
                            0.7,
                            0.83,
                            0.9,
                            0.95,
                            0.99,
                            0.99
                          ],
                          "FOM": [
                            331.337020409173,
                            245.46050190550559,
                            164.53709493722965,
                            121.89207790753734,
                            73.931282427002344,
                            40.574348067292682,
                            22.267674346259405
                          ],
                          "Name": "Organic",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": [
                            7.619,
                            7.27,
                            3.8709999999999991,
                            3.84,
                            3.81,
                            3.7789999999999995,
                            3.6910000000000007
                          ],
                          "NH4N": [
                            0.132,
                            0.132,
                            0.132,
                            0.13200000000000003,
                            0.13199999999999998,
                            0.13199999999999998,
                            0.13199999999999998
                          ],
                          "PH": [
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "Name": "Chemical",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Sample, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": null,
                          "NH4N": null,
                          "SW": null,
                          "OC": null,
                          "EC": null,
                          "CL": null,
                          "ESP": null,
                          "PH": null,
                          "SWUnits": 0,
                          "OCUnits": 0,
                          "PHUnits": 0,
                          "Name": "Initial nitrogen",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                              "Name": "PlantAvailableNO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                              "Name": "PlantAvailableNH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "CERESSoilTemperature",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 500.0,
                      "InitialRootDM": 150.0,
                      "InitialRootDepth": 350.0,
                      "ResourceName": "AGPWhiteClover",
                      "Name": "AGPWhiteClover",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "P6",
                  "Children": [
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Diagnostics; // used with Debugger.Break(); to debug manager scripts\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil soil;\r\n        [Link] Weather Met; \r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public answerTypes allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string IrrigStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string IrrigEnd { get; set; }\r\n        [Description(\"Enter the depth to which water deficit is computed (mm)\")]\r\n        public double SoilDepth { get; set; }\r\n        [Description(\"PAW below which soil is considered 'shallow' (mm)\")]\r\n        public double CritPAWForShallow { get; set; }\r\n        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")]\r\n        public double CritRainToPause { get; set; }\r\n        [Description(\"Number of days to pause irrigator after critical rainfall (days)\")]\r\n        public double DaysToPauseOnCritRain { get; set; }\r\n\r\n        [Description(\"Shallow Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnShallow { get; set; }\r\n        [Description(\"Shallow Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtShallow { get; set; }\r\n        [Description(\"Shallow Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitShallow { get; set; }\r\n        [Description(\"Shallow Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffShallow { get; set; }\r\n\r\n        [Description(\"Deep Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnDeep { get; set; }\r\n        [Description(\"Deep Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtDeep { get; set; }\r\n        [Description(\"Deep Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitDeep { get; set; }\r\n        [Description(\"Deep Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffDeep { get; set; }\r\n\r\n        // Outputs\r\n        public double TodayDeficit { get; set; }\r\n        public double TodayDeficit_nve { get; set; }\r\n        public double IrrigDay { get; set; }\r\n        public double SoilPAW { get; set; }\r\n        public double IrrigDeficit { get; set; }\r\n        public double IrrigReturn { get; set; }\r\n        public double IrrigAmt { get; set; }\r\n        public double IrrigEff { get; set; }\r\n        public double Rain3 { get; set; }\r\n\r\n        public double Days2Pause { get; set; }\r\n\r\n        // internal use\r\n        private DateTime StartDate;               //The date when irrigation start (in date format)\r\n        private DateTime EndDate;                 //The date when irrigation finish (in date format)\r\n        private double RainToday=0;\r\n        public double[] Rain_3;\r\n\r\n        public enum answerTypes\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialising          \");\r\n            summary.WriteMessage(this, \"\");\r\n\r\n            IrrigDay = 5000;  //so will reset to 1 on first day\r\n              StartDate = DateTime.Parse(IrrigStart);\r\n              EndDate = DateTime.Parse(IrrigEnd);\r\n\r\n            Rain3 = 0;\r\n            Rain_3 = new double[4];\r\n            Rain_3[0] = 0;\r\n            Rain_3[1] = 0;\r\n            Rain_3[2] = 0;\r\n\r\n              SoilPAW = 0.0;\r\n\r\n              double[] sw_dul = soil.DULmm;\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) \r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n              }\r\n\r\n              if(SoilPAW <= CritPAWForShallow) {      \r\n                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                IrrigReturn = IrrigReturnShallow;\r\n                IrrigAmt = IrrigAmtShallow;\r\n                IrrigEff = IrrigEffShallow ;           \r\n                summary.WriteMessage(this, \"  Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW);\r\n            } \r\n            else \r\n            {\r\n                IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                IrrigReturn = IrrigReturnDeep;\r\n                IrrigAmt = IrrigAmtDeep;\r\n                IrrigEff = IrrigEffDeep;\r\n                summary.WriteMessage(this, \"  Soil is considered to be deep\");\r\n            }\r\n\r\n            summary.WriteMessage(this, \"  Irrigation critical deficit (mm): \" + IrrigDeficit);\r\n            summary.WriteMessage(this, \"          Irrigation return (days): \" + IrrigReturn);\r\n            summary.WriteMessage(this, \"     Irrigation pumped amount (mm): \" + IrrigAmt);\r\n            summary.WriteMessage(this, \"         Irrigation efficiency (%): \" + IrrigEff);\r\n            summary.WriteMessage(this, \"\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialised\");\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            \r\n        }\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n       [EventSubscribe(\"PreparingNewWeatherData\")]\r\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\r\n        {\r\n            RainToday = Met.Rain; //takes note of how much rain was due to fall today        \r\n        }\r\n\r\n        //[EventSubscribe(\"DoDailyInitialisation\")]\r\n        //private void OnDoDailyInitialisation(object sender, EventArgs e) \r\n        //{\r\n        //}\r\n\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            int rain=0;\r\n\r\n            Rain_3[2] = Rain_3[1];\r\n            Rain_3[1] = Rain_3[0];\r\n            Rain_3[0] = RainToday;\r\n            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days\r\n            if(Rain3 >= CritRainToPause)\r\n                Days2Pause = DaysToPauseOnCritRain;\r\n            else\r\n                Days2Pause = Days2Pause - 1;\r\n\r\n            double[] sw_dul = soil.DULmm;\r\n            double[] sw_sw = soil.Thickness;  // ??? was MySwim.sw_dep\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n\r\n            TodayDeficit = 0.0;\r\n            SoilPAW = 0.0;\r\n\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) {\r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);\r\n                  }\r\n              }\r\n            TodayDeficit_nve = -1 * TodayDeficit;\r\n\r\n            if (isBetween(Clock.Today, StartDate, EndDate)) {\r\n                 if(SoilPAW <= CritPAWForShallow) {      \r\n                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                    IrrigReturn = IrrigReturnShallow;\r\n                    IrrigAmt = IrrigAmtShallow;\r\n                    IrrigEff = IrrigEffShallow ;           \r\n                } \r\n                else \r\n                {\r\n                    IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                    IrrigReturn = IrrigReturnDeep;\r\n                    IrrigAmt = IrrigAmtDeep;\r\n                    IrrigEff = IrrigEffDeep;\r\n                }\r\n\r\n                if(Days2Pause < 0.5) {\r\n                    IrrigDay = IrrigDay + 1;\r\n                    if(IrrigDay > IrrigReturn)\r\n                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    \r\n\r\n                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {\r\n                        if(IrrigDay == 1){\r\n                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));\r\n                            //summary.WriteMessage(this, \"Rain today was \" + RainToday + \". Applying \" + AmountToApply+ \" mm of irrigation\");\r\n                            irrigation.Apply(AmountToApply);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "allowIrrigation",
                          "Value": "yes"
                        },
                        {
                          "Key": "IrrigStart",
                          "Value": "1-sep"
                        },
                        {
                          "Key": "IrrigEnd",
                          "Value": "30-apr"
                        },
                        {
                          "Key": "SoilDepth",
                          "Value": "500"
                        },
                        {
                          "Key": "CritPAWForShallow",
                          "Value": "60"
                        },
                        {
                          "Key": "CritRainToPause",
                          "Value": "30"
                        },
                        {
                          "Key": "DaysToPauseOnCritRain",
                          "Value": "3"
                        },
                        {
                          "Key": "IrrigReturnShallow",
                          "Value": "2"
                        },
                        {
                          "Key": "IrrigAmtShallow",
                          "Value": "10"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitShallow",
                          "Value": "30"
                        },
                        {
                          "Key": "IrrigEffShallow",
                          "Value": "100"
                        },
                        {
                          "Key": "IrrigReturnDeep",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmtDeep",
                          "Value": "20"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitDeep",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigEffDeep",
                          "Value": "100"
                        },
                        {
                          "Key": "TodayDeficit",
                          "Value": "123.894"
                        },
                        {
                          "Key": "TodayDeficit_nve",
                          "Value": "-123.894"
                        },
                        {
                          "Key": "IrrigDay",
                          "Value": "3"
                        },
                        {
                          "Key": "SoilPAW",
                          "Value": "63.65"
                        },
                        {
                          "Key": "IrrigDeficit",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigReturn",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmt",
                          "Value": "20"
                        },
                        {
                          "Key": "IrrigEff",
                          "Value": "100"
                        },
                        {
                          "Key": "Rain3",
                          "Value": "0"
                        },
                        {
                          "Key": "Days2Pause",
                          "Value": "-80"
                        }
                      ],
                      "Name": "CentrePivot",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "Canopies": [],
                      "InitialResidueName": "grass",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 500.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "FractionFaecesAdded": 1.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "soil_albedo": 0.23,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "(sum([Soil].SoilNitrogen.Urea.kgha) + sum([Soil].SoilNitrogen.NH4.kgha) + sum([Soil].SoilNitrogen.NO3.kgha)) as minNPaddock"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "Name": "Report",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": "NZ_Sedimentary",
                      "LocalName": "Lismore",
                      "Site": "Winchmore",
                      "NearestTown": "Ashburton",
                      "Region": "Canterbury",
                      "State": null,
                      "Country": "New Zealand",
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": -48.48,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 0,
                          "FractionFull": 0.987012987012987,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "ParticleSizeClay": [
                            18.333333333333332,
                            15.0,
                            12.0,
                            10.666666666666666,
                            8.0,
                            6.0,
                            5.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "BD": [
                            1.3,
                            1.35,
                            1.0,
                            0.53,
                            0.31,
                            0.3,
                            0.3
                          ],
                          "AirDry": [
                            0.05,
                            0.12,
                            0.015,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "LL15": [
                            0.15,
                            0.14,
                            0.055,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "DUL": [
                            0.36,
                            0.34,
                            0.19,
                            0.065,
                            0.04,
                            0.03,
                            0.03
                          ],
                          "SAT": [
                            0.45,
                            0.43,
                            0.25,
                            0.15,
                            0.11,
                            0.11,
                            0.11
                          ],
                          "KS": [
                            5000.0,
                            2500.0,
                            3000.0,
                            10000.0,
                            17500.0,
                            20000.0,
                            20000.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilWater, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 2.0,
                          "WinterCona": 2.0,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "slope": 0.0,
                          "discharge_width": 0.0,
                          "catchment_area": 0.0,
                          "max_pond": 0.0,
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "SWCON": [
                            0.4,
                            0.5,
                            0.6,
                            0.6,
                            0.8,
                            0.8,
                            0.8
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PrecipitationInterception": 0.0,
                          "Name": "SoilWater",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "Carbon": [
                            3.0,
                            1.0,
                            0.6,
                            0.4,
                            0.25,
                            0.15,
                            0.1
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.04,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.5,
                            0.7,
                            0.83,
                            0.9,
                            0.95,
                            0.99,
                            0.99
                          ],
                          "FOM": [
                            331.337020409173,
                            245.46050190550559,
                            164.53709493722965,
                            121.89207790753734,
                            73.931282427002344,
                            40.574348067292682,
                            22.267674346259405
                          ],
                          "Name": "Organic",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": [
                            7.619,
                            7.27,
                            3.8709999999999991,
                            3.84,
                            3.81,
                            3.7789999999999995,
                            3.6910000000000007
                          ],
                          "NH4N": [
                            0.132,
                            0.132,
                            0.132,
                            0.13200000000000003,
                            0.13199999999999998,
                            0.13199999999999998,
                            0.13199999999999998
                          ],
                          "PH": [
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "Name": "Chemical",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Sample, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": null,
                          "NH4N": null,
                          "SW": null,
                          "OC": null,
                          "EC": null,
                          "CL": null,
                          "ESP": null,
                          "PH": null,
                          "SWUnits": 0,
                          "OCUnits": 0,
                          "PHUnits": 0,
                          "Name": "Initial nitrogen",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                              "Name": "PlantAvailableNO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                              "Name": "PlantAvailableNH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "CERESSoilTemperature",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 500.0,
                      "InitialRootDM": 150.0,
                      "InitialRootDepth": 350.0,
                      "ResourceName": "AGPWhiteClover",
                      "Name": "AGPWhiteClover",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "P7",
                  "Children": [
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Diagnostics; // used with Debugger.Break(); to debug manager scripts\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil soil;\r\n        [Link] Weather Met; \r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public answerTypes allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string IrrigStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string IrrigEnd { get; set; }\r\n        [Description(\"Enter the depth to which water deficit is computed (mm)\")]\r\n        public double SoilDepth { get; set; }\r\n        [Description(\"PAW below which soil is considered 'shallow' (mm)\")]\r\n        public double CritPAWForShallow { get; set; }\r\n        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")]\r\n        public double CritRainToPause { get; set; }\r\n        [Description(\"Number of days to pause irrigator after critical rainfall (days)\")]\r\n        public double DaysToPauseOnCritRain { get; set; }\r\n\r\n        [Description(\"Shallow Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnShallow { get; set; }\r\n        [Description(\"Shallow Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtShallow { get; set; }\r\n        [Description(\"Shallow Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitShallow { get; set; }\r\n        [Description(\"Shallow Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffShallow { get; set; }\r\n\r\n        [Description(\"Deep Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnDeep { get; set; }\r\n        [Description(\"Deep Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtDeep { get; set; }\r\n        [Description(\"Deep Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitDeep { get; set; }\r\n        [Description(\"Deep Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffDeep { get; set; }\r\n\r\n        // Outputs\r\n        public double TodayDeficit { get; set; }\r\n        public double TodayDeficit_nve { get; set; }\r\n        public double IrrigDay { get; set; }\r\n        public double SoilPAW { get; set; }\r\n        public double IrrigDeficit { get; set; }\r\n        public double IrrigReturn { get; set; }\r\n        public double IrrigAmt { get; set; }\r\n        public double IrrigEff { get; set; }\r\n        public double Rain3 { get; set; }\r\n\r\n        public double Days2Pause { get; set; }\r\n\r\n        // internal use\r\n        private DateTime StartDate;               //The date when irrigation start (in date format)\r\n        private DateTime EndDate;                 //The date when irrigation finish (in date format)\r\n        private double RainToday=0;\r\n        public double[] Rain_3;\r\n\r\n        public enum answerTypes\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialising          \");\r\n            summary.WriteMessage(this, \"\");\r\n\r\n            IrrigDay = 5000;  //so will reset to 1 on first day\r\n              StartDate = DateTime.Parse(IrrigStart);\r\n              EndDate = DateTime.Parse(IrrigEnd);\r\n\r\n            Rain3 = 0;\r\n            Rain_3 = new double[4];\r\n            Rain_3[0] = 0;\r\n            Rain_3[1] = 0;\r\n            Rain_3[2] = 0;\r\n\r\n              SoilPAW = 0.0;\r\n\r\n              double[] sw_dul = soil.DULmm;\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) \r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n              }\r\n\r\n              if(SoilPAW <= CritPAWForShallow) {      \r\n                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                IrrigReturn = IrrigReturnShallow;\r\n                IrrigAmt = IrrigAmtShallow;\r\n                IrrigEff = IrrigEffShallow ;           \r\n                summary.WriteMessage(this, \"  Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW);\r\n            } \r\n            else \r\n            {\r\n                IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                IrrigReturn = IrrigReturnDeep;\r\n                IrrigAmt = IrrigAmtDeep;\r\n                IrrigEff = IrrigEffDeep;\r\n                summary.WriteMessage(this, \"  Soil is considered to be deep\");\r\n            }\r\n\r\n            summary.WriteMessage(this, \"  Irrigation critical deficit (mm): \" + IrrigDeficit);\r\n            summary.WriteMessage(this, \"          Irrigation return (days): \" + IrrigReturn);\r\n            summary.WriteMessage(this, \"     Irrigation pumped amount (mm): \" + IrrigAmt);\r\n            summary.WriteMessage(this, \"         Irrigation efficiency (%): \" + IrrigEff);\r\n            summary.WriteMessage(this, \"\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialised\");\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            \r\n        }\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n       [EventSubscribe(\"PreparingNewWeatherData\")]\r\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\r\n        {\r\n            RainToday = Met.Rain; //takes note of how much rain was due to fall today        \r\n        }\r\n\r\n        //[EventSubscribe(\"DoDailyInitialisation\")]\r\n        //private void OnDoDailyInitialisation(object sender, EventArgs e) \r\n        //{\r\n        //}\r\n\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            int rain=0;\r\n\r\n            Rain_3[2] = Rain_3[1];\r\n            Rain_3[1] = Rain_3[0];\r\n            Rain_3[0] = RainToday;\r\n            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days\r\n            if(Rain3 >= CritRainToPause)\r\n                Days2Pause = DaysToPauseOnCritRain;\r\n            else\r\n                Days2Pause = Days2Pause - 1;\r\n\r\n            double[] sw_dul = soil.DULmm;\r\n            double[] sw_sw = soil.Thickness;  // ??? was MySwim.sw_dep\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n\r\n            TodayDeficit = 0.0;\r\n            SoilPAW = 0.0;\r\n\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) {\r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);\r\n                  }\r\n              }\r\n            TodayDeficit_nve = -1 * TodayDeficit;\r\n\r\n            if (isBetween(Clock.Today, StartDate, EndDate)) {\r\n                 if(SoilPAW <= CritPAWForShallow) {      \r\n                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                    IrrigReturn = IrrigReturnShallow;\r\n                    IrrigAmt = IrrigAmtShallow;\r\n                    IrrigEff = IrrigEffShallow ;           \r\n                } \r\n                else \r\n                {\r\n                    IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                    IrrigReturn = IrrigReturnDeep;\r\n                    IrrigAmt = IrrigAmtDeep;\r\n                    IrrigEff = IrrigEffDeep;\r\n                }\r\n\r\n                if(Days2Pause < 0.5) {\r\n                    IrrigDay = IrrigDay + 1;\r\n                    if(IrrigDay > IrrigReturn)\r\n                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    \r\n\r\n                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {\r\n                        if(IrrigDay == 1){\r\n                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));\r\n                            //summary.WriteMessage(this, \"Rain today was \" + RainToday + \". Applying \" + AmountToApply+ \" mm of irrigation\");\r\n                            irrigation.Apply(AmountToApply);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "allowIrrigation",
                          "Value": "yes"
                        },
                        {
                          "Key": "IrrigStart",
                          "Value": "1-sep"
                        },
                        {
                          "Key": "IrrigEnd",
                          "Value": "30-apr"
                        },
                        {
                          "Key": "SoilDepth",
                          "Value": "500"
                        },
                        {
                          "Key": "CritPAWForShallow",
                          "Value": "60"
                        },
                        {
                          "Key": "CritRainToPause",
                          "Value": "30"
                        },
                        {
                          "Key": "DaysToPauseOnCritRain",
                          "Value": "3"
                        },
                        {
                          "Key": "IrrigReturnShallow",
                          "Value": "2"
                        },
                        {
                          "Key": "IrrigAmtShallow",
                          "Value": "10"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitShallow",
                          "Value": "30"
                        },
                        {
                          "Key": "IrrigEffShallow",
                          "Value": "100"
                        },
                        {
                          "Key": "IrrigReturnDeep",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmtDeep",
                          "Value": "20"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitDeep",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigEffDeep",
                          "Value": "100"
                        },
                        {
                          "Key": "TodayDeficit",
                          "Value": "123.894"
                        },
                        {
                          "Key": "TodayDeficit_nve",
                          "Value": "-123.894"
                        },
                        {
                          "Key": "IrrigDay",
                          "Value": "3"
                        },
                        {
                          "Key": "SoilPAW",
                          "Value": "63.65"
                        },
                        {
                          "Key": "IrrigDeficit",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigReturn",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmt",
                          "Value": "20"
                        },
                        {
                          "Key": "IrrigEff",
                          "Value": "100"
                        },
                        {
                          "Key": "Rain3",
                          "Value": "0"
                        },
                        {
                          "Key": "Days2Pause",
                          "Value": "-80"
                        }
                      ],
                      "Name": "CentrePivot",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "Canopies": [],
                      "InitialResidueName": "grass",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 500.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "FractionFaecesAdded": 1.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "soil_albedo": 0.23,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "(sum([Soil].SoilNitrogen.Urea.kgha) + sum([Soil].SoilNitrogen.NH4.kgha) + sum([Soil].SoilNitrogen.NO3.kgha)) as minNPaddock"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "Name": "Report",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": "NZ_Sedimentary",
                      "LocalName": "Lismore",
                      "Site": "Winchmore",
                      "NearestTown": "Ashburton",
                      "Region": "Canterbury",
                      "State": null,
                      "Country": "New Zealand",
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": -48.48,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 0,
                          "FractionFull": 0.987012987012987,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "ParticleSizeClay": [
                            18.333333333333332,
                            15.0,
                            12.0,
                            10.666666666666666,
                            8.0,
                            6.0,
                            5.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "BD": [
                            1.3,
                            1.35,
                            1.0,
                            0.53,
                            0.31,
                            0.3,
                            0.3
                          ],
                          "AirDry": [
                            0.05,
                            0.12,
                            0.015,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "LL15": [
                            0.15,
                            0.14,
                            0.055,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "DUL": [
                            0.36,
                            0.34,
                            0.19,
                            0.065,
                            0.04,
                            0.03,
                            0.03
                          ],
                          "SAT": [
                            0.45,
                            0.43,
                            0.25,
                            0.15,
                            0.11,
                            0.11,
                            0.11
                          ],
                          "KS": [
                            5000.0,
                            2500.0,
                            3000.0,
                            10000.0,
                            17500.0,
                            20000.0,
                            20000.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilWater, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 2.0,
                          "WinterCona": 2.0,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "slope": 0.0,
                          "discharge_width": 0.0,
                          "catchment_area": 0.0,
                          "max_pond": 0.0,
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "SWCON": [
                            0.4,
                            0.5,
                            0.6,
                            0.6,
                            0.8,
                            0.8,
                            0.8
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PrecipitationInterception": 0.0,
                          "Name": "SoilWater",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "Carbon": [
                            3.0,
                            1.0,
                            0.6,
                            0.4,
                            0.25,
                            0.15,
                            0.1
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.04,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.5,
                            0.7,
                            0.83,
                            0.9,
                            0.95,
                            0.99,
                            0.99
                          ],
                          "FOM": [
                            331.337020409173,
                            245.46050190550559,
                            164.53709493722965,
                            121.89207790753734,
                            73.931282427002344,
                            40.574348067292682,
                            22.267674346259405
                          ],
                          "Name": "Organic",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": [
                            7.619,
                            7.27,
                            3.8709999999999991,
                            3.84,
                            3.81,
                            3.7789999999999995,
                            3.6910000000000007
                          ],
                          "NH4N": [
                            0.132,
                            0.132,
                            0.132,
                            0.13200000000000003,
                            0.13199999999999998,
                            0.13199999999999998,
                            0.13199999999999998
                          ],
                          "PH": [
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "Name": "Chemical",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Sample, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": null,
                          "NH4N": null,
                          "SW": null,
                          "OC": null,
                          "EC": null,
                          "CL": null,
                          "ESP": null,
                          "PH": null,
                          "SWUnits": 0,
                          "OCUnits": 0,
                          "PHUnits": 0,
                          "Name": "Initial nitrogen",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                              "Name": "PlantAvailableNO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                              "Name": "PlantAvailableNH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "CERESSoilTemperature",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 500.0,
                      "InitialRootDM": 150.0,
                      "InitialRootDepth": 350.0,
                      "ResourceName": "AGPWhiteClover",
                      "Name": "AGPWhiteClover",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "P8",
                  "Children": [
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Diagnostics; // used with Debugger.Break(); to debug manager scripts\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil soil;\r\n        [Link] Weather Met; \r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public answerTypes allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string IrrigStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string IrrigEnd { get; set; }\r\n        [Description(\"Enter the depth to which water deficit is computed (mm)\")]\r\n        public double SoilDepth { get; set; }\r\n        [Description(\"PAW below which soil is considered 'shallow' (mm)\")]\r\n        public double CritPAWForShallow { get; set; }\r\n        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")]\r\n        public double CritRainToPause { get; set; }\r\n        [Description(\"Number of days to pause irrigator after critical rainfall (days)\")]\r\n        public double DaysToPauseOnCritRain { get; set; }\r\n\r\n        [Description(\"Shallow Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnShallow { get; set; }\r\n        [Description(\"Shallow Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtShallow { get; set; }\r\n        [Description(\"Shallow Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitShallow { get; set; }\r\n        [Description(\"Shallow Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffShallow { get; set; }\r\n\r\n        [Description(\"Deep Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnDeep { get; set; }\r\n        [Description(\"Deep Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtDeep { get; set; }\r\n        [Description(\"Deep Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitDeep { get; set; }\r\n        [Description(\"Deep Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffDeep { get; set; }\r\n\r\n        // Outputs\r\n        public double TodayDeficit { get; set; }\r\n        public double TodayDeficit_nve { get; set; }\r\n        public double IrrigDay { get; set; }\r\n        public double SoilPAW { get; set; }\r\n        public double IrrigDeficit { get; set; }\r\n        public double IrrigReturn { get; set; }\r\n        public double IrrigAmt { get; set; }\r\n        public double IrrigEff { get; set; }\r\n        public double Rain3 { get; set; }\r\n\r\n        public double Days2Pause { get; set; }\r\n\r\n        // internal use\r\n        private DateTime StartDate;               //The date when irrigation start (in date format)\r\n        private DateTime EndDate;                 //The date when irrigation finish (in date format)\r\n        private double RainToday=0;\r\n        public double[] Rain_3;\r\n\r\n        public enum answerTypes\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialising          \");\r\n            summary.WriteMessage(this, \"\");\r\n\r\n            IrrigDay = 5000;  //so will reset to 1 on first day\r\n              StartDate = DateTime.Parse(IrrigStart);\r\n              EndDate = DateTime.Parse(IrrigEnd);\r\n\r\n            Rain3 = 0;\r\n            Rain_3 = new double[4];\r\n            Rain_3[0] = 0;\r\n            Rain_3[1] = 0;\r\n            Rain_3[2] = 0;\r\n\r\n              SoilPAW = 0.0;\r\n\r\n              double[] sw_dul = soil.DULmm;\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) \r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n              }\r\n\r\n              if(SoilPAW <= CritPAWForShallow) {      \r\n                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                IrrigReturn = IrrigReturnShallow;\r\n                IrrigAmt = IrrigAmtShallow;\r\n                IrrigEff = IrrigEffShallow ;           \r\n                summary.WriteMessage(this, \"  Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW);\r\n            } \r\n            else \r\n            {\r\n                IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                IrrigReturn = IrrigReturnDeep;\r\n                IrrigAmt = IrrigAmtDeep;\r\n                IrrigEff = IrrigEffDeep;\r\n                summary.WriteMessage(this, \"  Soil is considered to be deep\");\r\n            }\r\n\r\n            summary.WriteMessage(this, \"  Irrigation critical deficit (mm): \" + IrrigDeficit);\r\n            summary.WriteMessage(this, \"          Irrigation return (days): \" + IrrigReturn);\r\n            summary.WriteMessage(this, \"     Irrigation pumped amount (mm): \" + IrrigAmt);\r\n            summary.WriteMessage(this, \"         Irrigation efficiency (%): \" + IrrigEff);\r\n            summary.WriteMessage(this, \"\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialised\");\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            \r\n        }\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n       [EventSubscribe(\"PreparingNewWeatherData\")]\r\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\r\n        {\r\n            RainToday = Met.Rain; //takes note of how much rain was due to fall today        \r\n        }\r\n\r\n        //[EventSubscribe(\"DoDailyInitialisation\")]\r\n        //private void OnDoDailyInitialisation(object sender, EventArgs e) \r\n        //{\r\n        //}\r\n\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            int rain=0;\r\n\r\n            Rain_3[2] = Rain_3[1];\r\n            Rain_3[1] = Rain_3[0];\r\n            Rain_3[0] = RainToday;\r\n            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days\r\n            if(Rain3 >= CritRainToPause)\r\n                Days2Pause = DaysToPauseOnCritRain;\r\n            else\r\n                Days2Pause = Days2Pause - 1;\r\n\r\n            double[] sw_dul = soil.DULmm;\r\n            double[] sw_sw = soil.Thickness;  // ??? was MySwim.sw_dep\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n\r\n            TodayDeficit = 0.0;\r\n            SoilPAW = 0.0;\r\n\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) {\r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);\r\n                  }\r\n              }\r\n            TodayDeficit_nve = -1 * TodayDeficit;\r\n\r\n            if (isBetween(Clock.Today, StartDate, EndDate)) {\r\n                 if(SoilPAW <= CritPAWForShallow) {      \r\n                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                    IrrigReturn = IrrigReturnShallow;\r\n                    IrrigAmt = IrrigAmtShallow;\r\n                    IrrigEff = IrrigEffShallow ;           \r\n                } \r\n                else \r\n                {\r\n                    IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                    IrrigReturn = IrrigReturnDeep;\r\n                    IrrigAmt = IrrigAmtDeep;\r\n                    IrrigEff = IrrigEffDeep;\r\n                }\r\n\r\n                if(Days2Pause < 0.5) {\r\n                    IrrigDay = IrrigDay + 1;\r\n                    if(IrrigDay > IrrigReturn)\r\n                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    \r\n\r\n                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {\r\n                        if(IrrigDay == 1){\r\n                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));\r\n                            //summary.WriteMessage(this, \"Rain today was \" + RainToday + \". Applying \" + AmountToApply+ \" mm of irrigation\");\r\n                            irrigation.Apply(AmountToApply);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "allowIrrigation",
                          "Value": "yes"
                        },
                        {
                          "Key": "IrrigStart",
                          "Value": "1-sep"
                        },
                        {
                          "Key": "IrrigEnd",
                          "Value": "30-apr"
                        },
                        {
                          "Key": "SoilDepth",
                          "Value": "500"
                        },
                        {
                          "Key": "CritPAWForShallow",
                          "Value": "60"
                        },
                        {
                          "Key": "CritRainToPause",
                          "Value": "30"
                        },
                        {
                          "Key": "DaysToPauseOnCritRain",
                          "Value": "3"
                        },
                        {
                          "Key": "IrrigReturnShallow",
                          "Value": "2"
                        },
                        {
                          "Key": "IrrigAmtShallow",
                          "Value": "10"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitShallow",
                          "Value": "30"
                        },
                        {
                          "Key": "IrrigEffShallow",
                          "Value": "100"
                        },
                        {
                          "Key": "IrrigReturnDeep",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmtDeep",
                          "Value": "20"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitDeep",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigEffDeep",
                          "Value": "100"
                        },
                        {
                          "Key": "TodayDeficit",
                          "Value": "123.894"
                        },
                        {
                          "Key": "TodayDeficit_nve",
                          "Value": "-123.894"
                        },
                        {
                          "Key": "IrrigDay",
                          "Value": "3"
                        },
                        {
                          "Key": "SoilPAW",
                          "Value": "63.65"
                        },
                        {
                          "Key": "IrrigDeficit",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigReturn",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmt",
                          "Value": "20"
                        },
                        {
                          "Key": "IrrigEff",
                          "Value": "100"
                        },
                        {
                          "Key": "Rain3",
                          "Value": "0"
                        },
                        {
                          "Key": "Days2Pause",
                          "Value": "-80"
                        }
                      ],
                      "Name": "CentrePivot",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "Canopies": [],
                      "InitialResidueName": "grass",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 500.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "FractionFaecesAdded": 1.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "soil_albedo": 0.23,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "(sum([Soil].SoilNitrogen.Urea.kgha) + sum([Soil].SoilNitrogen.NH4.kgha) + sum([Soil].SoilNitrogen.NO3.kgha)) as minNPaddock"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "Name": "Report",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": "NZ_Sedimentary",
                      "LocalName": "Lismore",
                      "Site": "Winchmore",
                      "NearestTown": "Ashburton",
                      "Region": "Canterbury",
                      "State": null,
                      "Country": "New Zealand",
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": -48.48,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 0,
                          "FractionFull": 0.987012987012987,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "ParticleSizeClay": [
                            18.333333333333332,
                            15.0,
                            12.0,
                            10.666666666666666,
                            8.0,
                            6.0,
                            5.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "BD": [
                            1.3,
                            1.35,
                            1.0,
                            0.53,
                            0.31,
                            0.3,
                            0.3
                          ],
                          "AirDry": [
                            0.05,
                            0.12,
                            0.015,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "LL15": [
                            0.15,
                            0.14,
                            0.055,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "DUL": [
                            0.36,
                            0.34,
                            0.19,
                            0.065,
                            0.04,
                            0.03,
                            0.03
                          ],
                          "SAT": [
                            0.45,
                            0.43,
                            0.25,
                            0.15,
                            0.11,
                            0.11,
                            0.11
                          ],
                          "KS": [
                            5000.0,
                            2500.0,
                            3000.0,
                            10000.0,
                            17500.0,
                            20000.0,
                            20000.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilWater, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 2.0,
                          "WinterCona": 2.0,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "slope": 0.0,
                          "discharge_width": 0.0,
                          "catchment_area": 0.0,
                          "max_pond": 0.0,
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "SWCON": [
                            0.4,
                            0.5,
                            0.6,
                            0.6,
                            0.8,
                            0.8,
                            0.8
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PrecipitationInterception": 0.0,
                          "Name": "SoilWater",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "Carbon": [
                            3.0,
                            1.0,
                            0.6,
                            0.4,
                            0.25,
                            0.15,
                            0.1
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.04,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.5,
                            0.7,
                            0.83,
                            0.9,
                            0.95,
                            0.99,
                            0.99
                          ],
                          "FOM": [
                            331.337020409173,
                            245.46050190550559,
                            164.53709493722965,
                            121.89207790753734,
                            73.931282427002344,
                            40.574348067292682,
                            22.267674346259405
                          ],
                          "Name": "Organic",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": [
                            7.619,
                            7.27,
                            3.8709999999999991,
                            3.84,
                            3.81,
                            3.7789999999999995,
                            3.6910000000000007
                          ],
                          "NH4N": [
                            0.132,
                            0.132,
                            0.132,
                            0.13200000000000003,
                            0.13199999999999998,
                            0.13199999999999998,
                            0.13199999999999998
                          ],
                          "PH": [
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "Name": "Chemical",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Sample, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": null,
                          "NH4N": null,
                          "SW": null,
                          "OC": null,
                          "EC": null,
                          "CL": null,
                          "ESP": null,
                          "PH": null,
                          "SWUnits": 0,
                          "OCUnits": 0,
                          "PHUnits": 0,
                          "Name": "Initial nitrogen",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                              "Name": "PlantAvailableNO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                              "Name": "PlantAvailableNH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "CERESSoilTemperature",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 500.0,
                      "InitialRootDM": 150.0,
                      "InitialRootDepth": 350.0,
                      "ResourceName": "AGPWhiteClover",
                      "Name": "AGPWhiteClover",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "P9",
                  "Children": [
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Diagnostics; // used with Debugger.Break(); to debug manager scripts\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil soil;\r\n        [Link] Weather Met; \r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public answerTypes allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string IrrigStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string IrrigEnd { get; set; }\r\n        [Description(\"Enter the depth to which water deficit is computed (mm)\")]\r\n        public double SoilDepth { get; set; }\r\n        [Description(\"PAW below which soil is considered 'shallow' (mm)\")]\r\n        public double CritPAWForShallow { get; set; }\r\n        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")]\r\n        public double CritRainToPause { get; set; }\r\n        [Description(\"Number of days to pause irrigator after critical rainfall (days)\")]\r\n        public double DaysToPauseOnCritRain { get; set; }\r\n\r\n        [Description(\"Shallow Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnShallow { get; set; }\r\n        [Description(\"Shallow Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtShallow { get; set; }\r\n        [Description(\"Shallow Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitShallow { get; set; }\r\n        [Description(\"Shallow Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffShallow { get; set; }\r\n\r\n        [Description(\"Deep Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnDeep { get; set; }\r\n        [Description(\"Deep Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtDeep { get; set; }\r\n        [Description(\"Deep Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitDeep { get; set; }\r\n        [Description(\"Deep Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffDeep { get; set; }\r\n\r\n        // Outputs\r\n        public double TodayDeficit { get; set; }\r\n        public double TodayDeficit_nve { get; set; }\r\n        public double IrrigDay { get; set; }\r\n        public double SoilPAW { get; set; }\r\n        public double IrrigDeficit { get; set; }\r\n        public double IrrigReturn { get; set; }\r\n        public double IrrigAmt { get; set; }\r\n        public double IrrigEff { get; set; }\r\n        public double Rain3 { get; set; }\r\n\r\n        public double Days2Pause { get; set; }\r\n\r\n        // internal use\r\n        private DateTime StartDate;               //The date when irrigation start (in date format)\r\n        private DateTime EndDate;                 //The date when irrigation finish (in date format)\r\n        private double RainToday=0;\r\n        public double[] Rain_3;\r\n\r\n        public enum answerTypes\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialising          \");\r\n            summary.WriteMessage(this, \"\");\r\n\r\n            IrrigDay = 5000;  //so will reset to 1 on first day\r\n              StartDate = DateTime.Parse(IrrigStart);\r\n              EndDate = DateTime.Parse(IrrigEnd);\r\n\r\n            Rain3 = 0;\r\n            Rain_3 = new double[4];\r\n            Rain_3[0] = 0;\r\n            Rain_3[1] = 0;\r\n            Rain_3[2] = 0;\r\n\r\n              SoilPAW = 0.0;\r\n\r\n              double[] sw_dul = soil.DULmm;\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) \r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n              }\r\n\r\n              if(SoilPAW <= CritPAWForShallow) {      \r\n                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                IrrigReturn = IrrigReturnShallow;\r\n                IrrigAmt = IrrigAmtShallow;\r\n                IrrigEff = IrrigEffShallow ;           \r\n                summary.WriteMessage(this, \"  Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW);\r\n            } \r\n            else \r\n            {\r\n                IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                IrrigReturn = IrrigReturnDeep;\r\n                IrrigAmt = IrrigAmtDeep;\r\n                IrrigEff = IrrigEffDeep;\r\n                summary.WriteMessage(this, \"  Soil is considered to be deep\");\r\n            }\r\n\r\n            summary.WriteMessage(this, \"  Irrigation critical deficit (mm): \" + IrrigDeficit);\r\n            summary.WriteMessage(this, \"          Irrigation return (days): \" + IrrigReturn);\r\n            summary.WriteMessage(this, \"     Irrigation pumped amount (mm): \" + IrrigAmt);\r\n            summary.WriteMessage(this, \"         Irrigation efficiency (%): \" + IrrigEff);\r\n            summary.WriteMessage(this, \"\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialised\");\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            \r\n        }\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n       [EventSubscribe(\"PreparingNewWeatherData\")]\r\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\r\n        {\r\n            RainToday = Met.Rain; //takes note of how much rain was due to fall today        \r\n        }\r\n\r\n        //[EventSubscribe(\"DoDailyInitialisation\")]\r\n        //private void OnDoDailyInitialisation(object sender, EventArgs e) \r\n        //{\r\n        //}\r\n\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            int rain=0;\r\n\r\n            Rain_3[2] = Rain_3[1];\r\n            Rain_3[1] = Rain_3[0];\r\n            Rain_3[0] = RainToday;\r\n            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days\r\n            if(Rain3 >= CritRainToPause)\r\n                Days2Pause = DaysToPauseOnCritRain;\r\n            else\r\n                Days2Pause = Days2Pause - 1;\r\n\r\n            double[] sw_dul = soil.DULmm;\r\n            double[] sw_sw = soil.Thickness;  // ??? was MySwim.sw_dep\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n\r\n            TodayDeficit = 0.0;\r\n            SoilPAW = 0.0;\r\n\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) {\r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);\r\n                  }\r\n              }\r\n            TodayDeficit_nve = -1 * TodayDeficit;\r\n\r\n            if (isBetween(Clock.Today, StartDate, EndDate)) {\r\n                 if(SoilPAW <= CritPAWForShallow) {      \r\n                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                    IrrigReturn = IrrigReturnShallow;\r\n                    IrrigAmt = IrrigAmtShallow;\r\n                    IrrigEff = IrrigEffShallow ;           \r\n                } \r\n                else \r\n                {\r\n                    IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                    IrrigReturn = IrrigReturnDeep;\r\n                    IrrigAmt = IrrigAmtDeep;\r\n                    IrrigEff = IrrigEffDeep;\r\n                }\r\n\r\n                if(Days2Pause < 0.5) {\r\n                    IrrigDay = IrrigDay + 1;\r\n                    if(IrrigDay > IrrigReturn)\r\n                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    \r\n\r\n                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {\r\n                        if(IrrigDay == 1){\r\n                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));\r\n                            //summary.WriteMessage(this, \"Rain today was \" + RainToday + \". Applying \" + AmountToApply+ \" mm of irrigation\");\r\n                            irrigation.Apply(AmountToApply);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "allowIrrigation",
                          "Value": "yes"
                        },
                        {
                          "Key": "IrrigStart",
                          "Value": "1-sep"
                        },
                        {
                          "Key": "IrrigEnd",
                          "Value": "30-apr"
                        },
                        {
                          "Key": "SoilDepth",
                          "Value": "500"
                        },
                        {
                          "Key": "CritPAWForShallow",
                          "Value": "60"
                        },
                        {
                          "Key": "CritRainToPause",
                          "Value": "30"
                        },
                        {
                          "Key": "DaysToPauseOnCritRain",
                          "Value": "3"
                        },
                        {
                          "Key": "IrrigReturnShallow",
                          "Value": "2"
                        },
                        {
                          "Key": "IrrigAmtShallow",
                          "Value": "10"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitShallow",
                          "Value": "30"
                        },
                        {
                          "Key": "IrrigEffShallow",
                          "Value": "100"
                        },
                        {
                          "Key": "IrrigReturnDeep",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmtDeep",
                          "Value": "20"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitDeep",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigEffDeep",
                          "Value": "100"
                        },
                        {
                          "Key": "TodayDeficit",
                          "Value": "123.894"
                        },
                        {
                          "Key": "TodayDeficit_nve",
                          "Value": "-123.894"
                        },
                        {
                          "Key": "IrrigDay",
                          "Value": "3"
                        },
                        {
                          "Key": "SoilPAW",
                          "Value": "63.65"
                        },
                        {
                          "Key": "IrrigDeficit",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigReturn",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmt",
                          "Value": "20"
                        },
                        {
                          "Key": "IrrigEff",
                          "Value": "100"
                        },
                        {
                          "Key": "Rain3",
                          "Value": "0"
                        },
                        {
                          "Key": "Days2Pause",
                          "Value": "-80"
                        }
                      ],
                      "Name": "CentrePivot",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "Canopies": [],
                      "InitialResidueName": "grass",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 500.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "FractionFaecesAdded": 1.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "soil_albedo": 0.23,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "(sum([Soil].SoilNitrogen.Urea.kgha) + sum([Soil].SoilNitrogen.NH4.kgha) + sum([Soil].SoilNitrogen.NO3.kgha)) as minNPaddock"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "Name": "Report",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": "NZ_Sedimentary",
                      "LocalName": "Lismore",
                      "Site": "Winchmore",
                      "NearestTown": "Ashburton",
                      "Region": "Canterbury",
                      "State": null,
                      "Country": "New Zealand",
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": -48.48,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 0,
                          "FractionFull": 0.987012987012987,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "ParticleSizeClay": [
                            18.333333333333332,
                            15.0,
                            12.0,
                            10.666666666666666,
                            8.0,
                            6.0,
                            5.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "BD": [
                            1.3,
                            1.35,
                            1.0,
                            0.53,
                            0.31,
                            0.3,
                            0.3
                          ],
                          "AirDry": [
                            0.05,
                            0.12,
                            0.015,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "LL15": [
                            0.15,
                            0.14,
                            0.055,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "DUL": [
                            0.36,
                            0.34,
                            0.19,
                            0.065,
                            0.04,
                            0.03,
                            0.03
                          ],
                          "SAT": [
                            0.45,
                            0.43,
                            0.25,
                            0.15,
                            0.11,
                            0.11,
                            0.11
                          ],
                          "KS": [
                            5000.0,
                            2500.0,
                            3000.0,
                            10000.0,
                            17500.0,
                            20000.0,
                            20000.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilWater, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 2.0,
                          "WinterCona": 2.0,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "slope": 0.0,
                          "discharge_width": 0.0,
                          "catchment_area": 0.0,
                          "max_pond": 0.0,
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "SWCON": [
                            0.4,
                            0.5,
                            0.6,
                            0.6,
                            0.8,
                            0.8,
                            0.8
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PrecipitationInterception": 0.0,
                          "Name": "SoilWater",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "Carbon": [
                            3.0,
                            1.0,
                            0.6,
                            0.4,
                            0.25,
                            0.15,
                            0.1
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.04,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.5,
                            0.7,
                            0.83,
                            0.9,
                            0.95,
                            0.99,
                            0.99
                          ],
                          "FOM": [
                            331.337020409173,
                            245.46050190550559,
                            164.53709493722965,
                            121.89207790753734,
                            73.931282427002344,
                            40.574348067292682,
                            22.267674346259405
                          ],
                          "Name": "Organic",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": [
                            7.619,
                            7.27,
                            3.8709999999999991,
                            3.84,
                            3.81,
                            3.7789999999999995,
                            3.6910000000000007
                          ],
                          "NH4N": [
                            0.132,
                            0.132,
                            0.132,
                            0.13200000000000003,
                            0.13199999999999998,
                            0.13199999999999998,
                            0.13199999999999998
                          ],
                          "PH": [
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "Name": "Chemical",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Sample, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": null,
                          "NH4N": null,
                          "SW": null,
                          "OC": null,
                          "EC": null,
                          "CL": null,
                          "ESP": null,
                          "PH": null,
                          "SWUnits": 0,
                          "OCUnits": 0,
                          "PHUnits": 0,
                          "Name": "Initial nitrogen",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                              "Name": "PlantAvailableNO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                              "Name": "PlantAvailableNH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "CERESSoilTemperature",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 500.0,
                      "InitialRootDM": 150.0,
                      "InitialRootDepth": 350.0,
                      "ResourceName": "AGPWhiteClover",
                      "Name": "AGPWhiteClover",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "P10",
                  "Children": [
                    {
                      "$type": "Models.Manager, Models",
                      "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Diagnostics; // used with Debugger.Break(); to debug manager scripts\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil soil;\r\n        [Link] Weather Met; \r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public answerTypes allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string IrrigStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string IrrigEnd { get; set; }\r\n        [Description(\"Enter the depth to which water deficit is computed (mm)\")]\r\n        public double SoilDepth { get; set; }\r\n        [Description(\"PAW below which soil is considered 'shallow' (mm)\")]\r\n        public double CritPAWForShallow { get; set; }\r\n        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")]\r\n        public double CritRainToPause { get; set; }\r\n        [Description(\"Number of days to pause irrigator after critical rainfall (days)\")]\r\n        public double DaysToPauseOnCritRain { get; set; }\r\n\r\n        [Description(\"Shallow Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnShallow { get; set; }\r\n        [Description(\"Shallow Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtShallow { get; set; }\r\n        [Description(\"Shallow Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitShallow { get; set; }\r\n        [Description(\"Shallow Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffShallow { get; set; }\r\n\r\n        [Description(\"Deep Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnDeep { get; set; }\r\n        [Description(\"Deep Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtDeep { get; set; }\r\n        [Description(\"Deep Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitDeep { get; set; }\r\n        [Description(\"Deep Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffDeep { get; set; }\r\n\r\n        // Outputs\r\n        public double TodayDeficit { get; set; }\r\n        public double TodayDeficit_nve { get; set; }\r\n        public double IrrigDay { get; set; }\r\n        public double SoilPAW { get; set; }\r\n        public double IrrigDeficit { get; set; }\r\n        public double IrrigReturn { get; set; }\r\n        public double IrrigAmt { get; set; }\r\n        public double IrrigEff { get; set; }\r\n        public double Rain3 { get; set; }\r\n\r\n        public double Days2Pause { get; set; }\r\n\r\n        // internal use\r\n        private DateTime StartDate;               //The date when irrigation start (in date format)\r\n        private DateTime EndDate;                 //The date when irrigation finish (in date format)\r\n        private double RainToday=0;\r\n        public double[] Rain_3;\r\n\r\n        public enum answerTypes\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialising          \");\r\n            summary.WriteMessage(this, \"\");\r\n\r\n            IrrigDay = 5000;  //so will reset to 1 on first day\r\n              StartDate = DateTime.Parse(IrrigStart);\r\n              EndDate = DateTime.Parse(IrrigEnd);\r\n\r\n            Rain3 = 0;\r\n            Rain_3 = new double[4];\r\n            Rain_3[0] = 0;\r\n            Rain_3[1] = 0;\r\n            Rain_3[2] = 0;\r\n\r\n              SoilPAW = 0.0;\r\n\r\n              double[] sw_dul = soil.DULmm;\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) \r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n              }\r\n\r\n              if(SoilPAW <= CritPAWForShallow) {      \r\n                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                IrrigReturn = IrrigReturnShallow;\r\n                IrrigAmt = IrrigAmtShallow;\r\n                IrrigEff = IrrigEffShallow ;           \r\n                summary.WriteMessage(this, \"  Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW);\r\n            } \r\n            else \r\n            {\r\n                IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                IrrigReturn = IrrigReturnDeep;\r\n                IrrigAmt = IrrigAmtDeep;\r\n                IrrigEff = IrrigEffDeep;\r\n                summary.WriteMessage(this, \"  Soil is considered to be deep\");\r\n            }\r\n\r\n            summary.WriteMessage(this, \"  Irrigation critical deficit (mm): \" + IrrigDeficit);\r\n            summary.WriteMessage(this, \"          Irrigation return (days): \" + IrrigReturn);\r\n            summary.WriteMessage(this, \"     Irrigation pumped amount (mm): \" + IrrigAmt);\r\n            summary.WriteMessage(this, \"         Irrigation efficiency (%): \" + IrrigEff);\r\n            summary.WriteMessage(this, \"\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialised\");\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            \r\n        }\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n       [EventSubscribe(\"PreparingNewWeatherData\")]\r\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\r\n        {\r\n            RainToday = Met.Rain; //takes note of how much rain was due to fall today        \r\n        }\r\n\r\n        //[EventSubscribe(\"DoDailyInitialisation\")]\r\n        //private void OnDoDailyInitialisation(object sender, EventArgs e) \r\n        //{\r\n        //}\r\n\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            int rain=0;\r\n\r\n            Rain_3[2] = Rain_3[1];\r\n            Rain_3[1] = Rain_3[0];\r\n            Rain_3[0] = RainToday;\r\n            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days\r\n            if(Rain3 >= CritRainToPause)\r\n                Days2Pause = DaysToPauseOnCritRain;\r\n            else\r\n                Days2Pause = Days2Pause - 1;\r\n\r\n            double[] sw_dul = soil.DULmm;\r\n            double[] sw_sw = soil.Thickness;  // ??? was MySwim.sw_dep\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n\r\n            TodayDeficit = 0.0;\r\n            SoilPAW = 0.0;\r\n\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) {\r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);\r\n                  }\r\n              }\r\n            TodayDeficit_nve = -1 * TodayDeficit;\r\n\r\n            if (isBetween(Clock.Today, StartDate, EndDate)) {\r\n                 if(SoilPAW <= CritPAWForShallow) {      \r\n                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                    IrrigReturn = IrrigReturnShallow;\r\n                    IrrigAmt = IrrigAmtShallow;\r\n                    IrrigEff = IrrigEffShallow ;           \r\n                } \r\n                else \r\n                {\r\n                    IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                    IrrigReturn = IrrigReturnDeep;\r\n                    IrrigAmt = IrrigAmtDeep;\r\n                    IrrigEff = IrrigEffDeep;\r\n                }\r\n\r\n                if(Days2Pause < 0.5) {\r\n                    IrrigDay = IrrigDay + 1;\r\n                    if(IrrigDay > IrrigReturn)\r\n                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    \r\n\r\n                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {\r\n                        if(IrrigDay == 1){\r\n                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));\r\n                            //summary.WriteMessage(this, \"Rain today was \" + RainToday + \". Applying \" + AmountToApply+ \" mm of irrigation\");\r\n                            irrigation.Apply(AmountToApply);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n",
                      "Parameters": [
                        {
                          "Key": "allowIrrigation",
                          "Value": "yes"
                        },
                        {
                          "Key": "IrrigStart",
                          "Value": "1-sep"
                        },
                        {
                          "Key": "IrrigEnd",
                          "Value": "30-apr"
                        },
                        {
                          "Key": "SoilDepth",
                          "Value": "500"
                        },
                        {
                          "Key": "CritPAWForShallow",
                          "Value": "60"
                        },
                        {
                          "Key": "CritRainToPause",
                          "Value": "30"
                        },
                        {
                          "Key": "DaysToPauseOnCritRain",
                          "Value": "3"
                        },
                        {
                          "Key": "IrrigReturnShallow",
                          "Value": "2"
                        },
                        {
                          "Key": "IrrigAmtShallow",
                          "Value": "10"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitShallow",
                          "Value": "30"
                        },
                        {
                          "Key": "IrrigEffShallow",
                          "Value": "100"
                        },
                        {
                          "Key": "IrrigReturnDeep",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmtDeep",
                          "Value": "20"
                        },
                        {
                          "Key": "PercPAWIrrigDeficitDeep",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigEffDeep",
                          "Value": "100"
                        },
                        {
                          "Key": "TodayDeficit",
                          "Value": "123.894"
                        },
                        {
                          "Key": "TodayDeficit_nve",
                          "Value": "-123.894"
                        },
                        {
                          "Key": "IrrigDay",
                          "Value": "3"
                        },
                        {
                          "Key": "SoilPAW",
                          "Value": "63.65"
                        },
                        {
                          "Key": "IrrigDeficit",
                          "Value": "25"
                        },
                        {
                          "Key": "IrrigReturn",
                          "Value": "4"
                        },
                        {
                          "Key": "IrrigAmt",
                          "Value": "20"
                        },
                        {
                          "Key": "IrrigEff",
                          "Value": "100"
                        },
                        {
                          "Key": "Rain3",
                          "Value": "0"
                        },
                        {
                          "Key": "Days2Pause",
                          "Value": "-80"
                        }
                      ],
                      "Name": "CentrePivot",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "Canopies": [],
                      "InitialResidueName": "grass",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 500.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "FractionFaecesAdded": 1.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "soil_albedo": 0.23,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "Name": "Fertiliser",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "(sum([Soil].SoilNitrogen.Urea.kgha) + sum([Soil].SoilNitrogen.NH4.kgha) + sum([Soil].SoilNitrogen.NO3.kgha)) as minNPaddock"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "Name": "Report",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": "NZ_Sedimentary",
                      "LocalName": "Lismore",
                      "Site": "Winchmore",
                      "NearestTown": "Ashburton",
                      "Region": "Canterbury",
                      "State": null,
                      "Country": "New Zealand",
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": -48.48,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 0,
                          "FractionFull": 0.987012987012987,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "ParticleSizeClay": [
                            18.333333333333332,
                            15.0,
                            12.0,
                            10.666666666666666,
                            8.0,
                            6.0,
                            5.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "BD": [
                            1.3,
                            1.35,
                            1.0,
                            0.53,
                            0.31,
                            0.3,
                            0.3
                          ],
                          "AirDry": [
                            0.05,
                            0.12,
                            0.015,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "LL15": [
                            0.15,
                            0.14,
                            0.055,
                            0.015,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "DUL": [
                            0.36,
                            0.34,
                            0.19,
                            0.065,
                            0.04,
                            0.03,
                            0.03
                          ],
                          "SAT": [
                            0.45,
                            0.43,
                            0.25,
                            0.15,
                            0.11,
                            0.11,
                            0.11
                          ],
                          "KS": [
                            5000.0,
                            2500.0,
                            3000.0,
                            10000.0,
                            17500.0,
                            20000.0,
                            20000.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.14,
                                0.14,
                                0.03,
                                0.03,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "KL": [
                                0.1,
                                0.1,
                                0.1,
                                0.02,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilWater, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 2.0,
                          "WinterCona": 2.0,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "slope": 0.0,
                          "discharge_width": 0.0,
                          "catchment_area": 0.0,
                          "max_pond": 0.0,
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "SWCON": [
                            0.4,
                            0.5,
                            0.6,
                            0.6,
                            0.8,
                            0.8,
                            0.8
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PrecipitationInterception": 0.0,
                          "Name": "SoilWater",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "Depth": [
                            "0-15",
                            "15-30",
                            "30-50",
                            "50-65",
                            "65-90",
                            "90-120",
                            "120-150"
                          ],
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            200.0,
                            150.0,
                            250.0,
                            300.0,
                            300.0
                          ],
                          "Carbon": [
                            3.0,
                            1.0,
                            0.6,
                            0.4,
                            0.25,
                            0.15,
                            0.1
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.04,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.5,
                            0.7,
                            0.83,
                            0.9,
                            0.95,
                            0.99,
                            0.99
                          ],
                          "FOM": [
                            331.337020409173,
                            245.46050190550559,
                            164.53709493722965,
                            121.89207790753734,
                            73.931282427002344,
                            40.574348067292682,
                            22.267674346259405
                          ],
                          "Name": "Organic",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": [
                            7.619,
                            7.27,
                            3.8709999999999991,
                            3.84,
                            3.81,
                            3.7789999999999995,
                            3.6910000000000007
                          ],
                          "NH4N": [
                            0.132,
                            0.132,
                            0.132,
                            0.13200000000000003,
                            0.13199999999999998,
                            0.13199999999999998,
                            0.13199999999999998
                          ],
                          "PH": [
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9,
                            5.9
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "Name": "Chemical",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Sample, Models",
                          "Depth": [
                            "0-10",
                            "10-30",
                            "30-60",
                            "60-90",
                            "90-120",
                            "120-150",
                            "150-180"
                          ],
                          "Thickness": [
                            100.0,
                            200.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0,
                            300.0
                          ],
                          "NO3N": null,
                          "NH4N": null,
                          "SW": null,
                          "OC": null,
                          "EC": null,
                          "CL": null,
                          "ESP": null,
                          "PH": null,
                          "SWUnits": 0,
                          "OCUnits": 0,
                          "PHUnits": 0,
                          "Name": "Initial nitrogen",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                              "Name": "PlantAvailableNO3",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                              "Name": "PlantAvailableNH4",
                              "Children": [],
                              "IncludeInDocumentation": true,
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "CERESSoilTemperature",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 500.0,
                      "InitialRootDM": 150.0,
                      "InitialRootDepth": 350.0,
                      "ResourceName": "AGPWhiteClover",
                      "Name": "AGPWhiteClover",
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "Models.Graph.Axis, Models",
                  "Type": 3,
                  "Title": null,
                  "Inverted": false,
                  "Minimum": "NaN",
                  "Maximum": "NaN",
                  "Interval": "NaN",
                  "DateTimeAxis": true,
                  "CrossesAtZero": false
                },
                {
                  "$type": "Models.Graph.Axis, Models",
                  "Type": 0,
                  "Title": null,
                  "Inverted": false,
                  "Minimum": "NaN",
                  "Maximum": "NaN",
                  "Interval": "NaN",
                  "DateTimeAxis": false,
                  "CrossesAtZero": false
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "MinNPaddock",
              "Children": [
                {
                  "$type": "Models.Graph.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "Checkpoint": "Current",
                  "TableName": "Report",
                  "XFieldName": "Date",
                  "YFieldName": "minNPaddock",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Series",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "Models.Graph.Axis, Models",
                  "Type": 3,
                  "Title": null,
                  "Inverted": false,
                  "Minimum": "NaN",
                  "Maximum": "NaN",
                  "Interval": "NaN",
                  "DateTimeAxis": false,
                  "CrossesAtZero": false
                },
                {
                  "$type": "Models.Graph.Axis, Models",
                  "Type": 0,
                  "Title": null,
                  "Inverted": false,
                  "Minimum": "NaN",
                  "Maximum": "NaN",
                  "Interval": "NaN",
                  "DateTimeAxis": false,
                  "CrossesAtZero": false
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "MinNGod",
              "Children": [
                {
                  "$type": "Models.Graph.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 0,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "Checkpoint": "Current",
                  "TableName": "ReportingWithPatches",
                  "XFieldName": "Date",
                  "YFieldName": "ReportingWithPatchesVariablesScript.MinNPatch(1)",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "P1",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Graph.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 0,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "Checkpoint": "Current",
                  "TableName": "ReportingWithPatches",
                  "XFieldName": "Date",
                  "YFieldName": "ReportingWithPatchesVariablesScript.MinNPatch(2)",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "P2",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Graph.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 0,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "Checkpoint": "Current",
                  "TableName": "ReportingWithPatches",
                  "XFieldName": "Date",
                  "YFieldName": "ReportingWithPatchesVariablesScript.MinNPatch(3)",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "P3",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Graph.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 0,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "Checkpoint": "Current",
                  "TableName": "ReportingWithPatches",
                  "XFieldName": "Date",
                  "YFieldName": "ReportingWithPatchesVariablesScript.MinNPatch(4)",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "P4",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Graph.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16747854,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 0,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "Checkpoint": "Current",
                  "TableName": "ReportingWithPatches",
                  "XFieldName": "Date",
                  "YFieldName": "ReportingWithPatchesVariablesScript.MinNPatch(5)",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "P5",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Simulation, Models",
          "Name": "GriddedGrazedPaddock",
          "Children": [
            {
              "$type": "Models.Clock, Models",
              "Start": "1972-01-01T00:00:00",
              "End": "1972-12-31T00:00:00",
              "Name": "Clock",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Summary, Models",
              "CaptureErrors": true,
              "CaptureWarnings": true,
              "CaptureSummaryText": true,
              "Name": "SummaryFile",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Weather, Models",
              "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
              "ExcelWorkSheetName": null,
              "Name": "Weather",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
              "Name": "Soil Arbitrator",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using Models.Interfaces;\r\nusing System.Diagnostics;\r\nusing System.Collections.Generic;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.Surface;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.AgPasture;\r\nusing Models.Zones;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing Models.Core;\r\nusing Models.AgPasture;\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        [Link] private Clock Clock;\r\n        [Link] private Soil soil;\r\n        [Link] private ISummary summary;\r\n        [Link] private Weather Weather;\r\n        [Link] private Zone myZone;\r\n        public string SoilType;\r\n        public string SimLocation;\r\n        public string SetIrrigation;\r\n        public string GeneralFertType;\r\n        public double GeneralFertAmt;\r\n        public string PastureType;\r\n        public int PatchCount;\r\n        private double iniOrgC;\r\n        private double iniOrgN;\r\n        private double NewArea;\r\n        private Sward sward;\r\n\r\n        public  event AddSoilCNPatchDelegate AddSoilCNPatch;\r\n        public  event BiomassRemovedDelegate BiomassRemoved;\r\n        [Link(ByName = true)]\r\n        private SoilNitrogen SoilNitrogen;\r\n\r\n\r\n        public int DaysSinceCut = 0;\r\n        public int PatchNumForFert = -1;\r\n\r\n        private int NumPaddocks = 0; // NumPaddocks is the number of AgPastures and SoilWats etc\r\n        private int NumPatchesForFertiliser = 1;\r\n        private double[] MonthlyFertAmt;\r\n        private double[] FertDepthPlacement;\r\n        private int[] PseudoRandomSeq;\r\n        private int GrazingNumber = -1;\r\n        private bool CutNow = false;\r\n\r\n        private bool ReportToday = false;\r\n        private double AmountDungCReturned = 0.0;\r\n        private int nPatchesAdded = 0;\r\n        private int[] PatchToAddTo;\r\n        private string[] PatchNmToAddTo = new string[1];\r\n\r\n\r\n        [XmlIgnore] public bool grazedToday { get; set; }\r\n        [XmlIgnore] public double Harvested { get; set; }\r\n        [XmlIgnore] public double HarvestedN { get; set; }\r\n        [XmlIgnore] public double UreaReturned  { get; set; }\r\n        [XmlIgnore] public int NumPatches { get; set; }\r\n\r\n\r\n        [Description(\"Frequency of cutting (days) (0 will be interpreted as the end of each month)\")]\r\n        public int CuttingFrequency { get; set; }\r\n\r\n        [Description(\"Residual pasture mass after cutting (kg DM /ha)\")]\r\n        public int CuttingResidual { get; set; }\r\n\r\n        [Description(\"Type of nutrient return - calculated from the amount of herbage harvested or constant\")]\r\n        public NutrientReturnTypes NutrientReturnType { get; set; }\r\n\r\n        [Description(\"Amount of fertiliser N to apply to simulation after each cutting (pretend urine) (kgN/ha) (ignored if nutrient return is FromHarvest)\")]\r\n        public double AmountFertNReturned { get; set; }\r\n\r\n        [Description(\"Amount of dung N to apply to simulation after each cutting (kgN/ha) (ignored if nutrient return is FromHarvest)\")]\r\n        public double AmountDungNReturned { get; set; }\r\n\r\n        [Description(\"Depth band (0 mm to X mm) for fertiliser placement (mm)\")]\r\n        public int FertiliserDepth { get; set; }\r\n                        \r\n        [Description(\"Pattern for fertiliser return\")]\r\n        public urineReturnTypes FertiliserReturnPattern { get; set; }\r\n\r\n        [Description(\"Frequency of reporting\")]\r\n        public reportingFrequencyTypes ReportingFreq { get; set; }\r\n\r\n        [Description(\"Patch type\")]\r\n        public patchTypes PatchType { get; set; }\r\n\r\n        [Description(\"How many patches should there be in the grid? (used to create the grid for GP and the size of the patches for PP)\")]\r\n        public int NumGPPatches { get; set; }\r\n\r\n        [Description(\"System identifier\")]\r\n        public systemTypes SystemID { get; set; }\r\n\r\n        public enum systemTypes\r\n        {\r\n            /// <summary>A</summary>\r\n            A,\r\n            /// <summary>B</summary>\r\n            B,\r\n            /// <summary>C</summary>\r\n            C,\r\n            /// <summary>D</summary>\r\n            D,\r\n            /// <summary>E</summary>\r\n            E,\r\n            /// <summary>F</summary>\r\n            F\r\n        }\r\n\r\n        public enum patchTypes\r\n        {\r\n            /// <summary>EP</summary>\r\n            EP,\r\n            /// <summary>EP</summary>\r\n            GP,\r\n            /// <summary>EP</summary>\r\n            PP,\r\n            /// <summary>EP</summary>\r\n            UP\r\n        }\r\n\r\n        public enum reportingFrequencyTypes\r\n        {\r\n            /// <summary>Daily</summary>\r\n            Daily,\r\n            /// <summary>Every 10 days</summary>\r\n            TenDaily,\r\n            /// <summary>Monthly</summary>\r\n            Monthly,\r\n            /// <summary>Annual</summary>\r\n            Annual,\r\n            /// <summary>On grazing</summary>\r\n            OnGrazing\r\n        }\r\n\r\n        public enum urineReturnTypes\r\n        {\r\n            /// <summary>Uniform</summary>\r\n            UniformAcrossAllPatches,\r\n            /// <summary>Rotating in order</summary>\r\n            RotatingInOrder,\r\n            /// <summary>Random</summary>\r\n            Random,\r\n            /// <summary>Pseudo-random</summary>\r\n            PseudoRandom\r\n        }\r\n\r\n        public enum NutrientReturnTypes\r\n        {\r\n            /// <summary>Constant</summary>\r\n            Constant,\r\n            /// <summary>FromHarvest</summary>\r\n            FromHarvest,\r\n            /// <summary>SetMonthly</summary>\r\n            SetMonthly\r\n        }\r\n\r\n        private void SetSystemParams()\r\n        {\r\n            if (SystemID == systemTypes.A)\r\n            {\r\n                SoilType = \"HE\";\r\n                SimLocation = \"Rua\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.B)\r\n            {\r\n                SoilType = \"HE\";\r\n                SimLocation = \"Rua\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 150.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.C)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.D)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 250.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.E)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 400.0;\r\n                PastureType = \"GrassOnly\";\r\n            }\r\n            else if (SystemID == systemTypes.F)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n        }\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            sward = new Sward(myZone);\r\n\r\n            if (PatchType == patchTypes.EP)\r\n                NumPatches = NumPaddocks;\r\n            else if (PatchType == patchTypes.GP)\r\n                NumPatches = NumGPPatches;\r\n            else if (PatchType == patchTypes.PP)\r\n                NumPatches = NumGPPatches; // but will actually use this to set the size of the newly created patches\r\n            else if (PatchType == patchTypes.UP)\r\n                NumPatches = NumGPPatches;\r\n            else\r\n                throw new Exception(\"Patch type not catered for\");\r\n\r\n            if ((PatchType == patchTypes.GP) && (NumPaddocks > 1))\r\n                throw new Exception(\"Patch type GP may only have one paddock/zone\");\r\n            if ((PatchType == patchTypes.PP) && (NumPaddocks > 1))\r\n                throw new Exception(\"Patch type PP may only have one paddock/zone\");\r\n\r\n            NumPatchesForFertiliser = 1;  // in the future this might be > 1\r\n            if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)  // generate a return pattern up front\r\n            {\r\n                int MaxNumGrazings = (Clock.EndDate.Year - Clock.StartDate.Year + 1) * 52; //allow for a maximum of 1 per week\r\n\r\n                PseudoRandomSeq = new int[MaxNumGrazings * NumPatchesForFertiliser];\r\n                Random rndConstSeed = new Random((int)666);\r\n                string MyString = \"\";\r\n                for (int i = 0; i < (MaxNumGrazings * NumPatchesForFertiliser); i++)\r\n                {\r\n                    PseudoRandomSeq[i] = rndConstSeed.Next(0, NumPatches);  // will never select NumPatches \r\n                    MyString += Convert.ToString(PseudoRandomSeq[i]) + \" \";\r\n                }\r\n\r\n                summary.WriteMessage(this, \"The order of patch return will be: \" + MyString);\r\n            }\r\n\r\n            // Add patches\r\n            if (PatchType == patchTypes.GP)\r\n            {\r\n                SoilNitrogen.MaximumNitrogenAvailableToPlants = 0.45;\r\n                SoilNitrogen.NPartitionApproach = \"BasedOnConcentrationAndDelta\";\r\n                SoilNitrogen.AllowPatchAutoAmalgamation = \"No\";\r\n                SoilNitrogen.AutoAmalgamationApproach = \"CompareAll\";\r\n                SoilNitrogen.basePatchApproach = \"IDBased\";\r\n                SoilNitrogen.AllowPatchAmalgamationByAge = \"No\";\r\n                SoilNitrogen.PatchAgeForForcedMerge = 3.0;                                \r\n\r\n\r\n                int[] PatchToAddTo = new int[1];  //need an array variable for this\r\n                string[] PatchNmToAddTo = new string[1];  \r\n                int nPatchesAdded = 0;\r\n                double NewArea = 1.0 / NumPatches;\r\n\r\n                while (nPatchesAdded < NumPatches - 1)\r\n                {\r\n                    AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();\r\n                    NewPatch.DepositionType = \"ToNewPatch\";\r\n                    NewPatch.AreaFraction = NewArea;\r\n                    PatchToAddTo[0] = 0;\r\n                    PatchNmToAddTo[0] = \"0\";\r\n                    NewPatch.AffectedPatches_id = PatchToAddTo;\r\n                    NewPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                    NewPatch.SuppressMessages = \"no\";\r\n\r\n                    AddSoilCNPatch.Invoke(NewPatch);\r\n                    nPatchesAdded += 1;\r\n                }                \r\n\r\n                summary.WriteMessage(this, \"NumPatches at end of initialisation (GP):\" + SoilNitrogen.PatchCount.ToString());\r\n            }\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"Initialising the Manager for grazing, urine return and reporting\");\r\n\r\n            grazedToday = false;\r\n\r\n            // count the paddocks in the simulation\r\n            NumPaddocks = 0;   \r\n            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                NumPaddocks += 1;   \r\n            summary.WriteMessage(this, \"There are \" + NumPaddocks + \" in the simulation\");\r\n\r\n            MonthlyFertAmt = new double[] { 24, 19, 17, 12, 8, 5, 5, 10, 16, 19, 23, 25 };\r\n\r\n            summary.WriteMessage(this, \"Finished initialising the Manager for grazing, urine return and reporting\");\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {    \r\n\r\n            // if this is the start of the simulation then sort out the depth for the fertiliser (aka urine) placement\r\n            // can't do this in initialisation because of the module order\r\n            if (Clock.Today == Clock.StartDate)\r\n            {\r\n                FertPlacementDepth();\r\n                int i = -1;  // to use as a patch counter\r\n\r\n                iniOrgC = 0.0; \r\n                iniOrgN = 0.0;\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                {\r\n                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n                    i += 1;\r\n                    PatchCount = SoilNitrogen.PatchCount;\r\n\r\n                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    {\r\n                        iniOrgC += SoilNitrogen.TotalC[ii] / NumPaddocks; \r\n                        iniOrgN += SoilNitrogen.organic_n[ii] / NumPaddocks;\r\n                    }\r\n                }\r\n            }\r\n\r\n            DaysSinceCut += 1;\r\n            Harvested = 0.0;\r\n            HarvestedN = 0.0;\r\n            UreaReturned = 0.0;\r\n\r\n            bool isEndOfMonth = false;\r\n            if (Clock.Today.AddDays(1).Day == 1)\r\n                isEndOfMonth = true;\r\n\r\n            bool isEndOfYear = false;\r\n            if (Clock.Today.AddDays(1).DayOfYear == 1)\r\n                isEndOfYear = true;\r\n\r\n\r\n\r\n            CutNow = false;\r\n            grazedToday = false;\r\n            if ((CuttingFrequency == 0) && (isEndOfMonth))\r\n                CutNow = true;\r\n            else if ((DaysSinceCut >= CuttingFrequency) && (CuttingFrequency > 0))\r\n                CutNow = true;\r\n\r\n            // should reporting be done today?  Do this here as need to know if grazing will happen\r\n            if (ReportingFreq == reportingFrequencyTypes.Daily)\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day == 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (CutNow))\r\n                ReportToday = true;\r\n            else\r\n                ReportToday = false;\r\n\r\n            //if (Clock.Today == Clock.StartDate) CutNow = true;\r\n\r\n            if (CutNow)\r\n            {\r\n                //if(Clock.Today.Month < 3) Debugger.Break();\r\n\r\n                grazedToday = true;\r\n                summary.WriteMessage(this, \"Doing Cutting\");\r\n                DaysSinceCut = 0;\r\n                GrazingNumber += 1;  //was initialsed as -1 - this is used to pick the pseudo-random patch return number\r\n                // GetPatchForUrineReturn();  now called in the deposition routine\r\n\r\n                // do the cutting=grazing - it doesn't matter if there one (GP) or many (EP) physical paddocks in the simulation at this point\r\n                int i = -1;  // to use as a patch counter\r\n                Harvested = 0.0;\r\n                HarvestedN = 0.0;\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                {\r\n                    i += 1;\r\n                    var sward = new Sward(zone);\r\n                    sward.Graze(amount: CuttingResidual, type: \"SetResidueAmount\");\r\n                    if (PatchType == patchTypes.EP) {\r\n                        Harvested += sward.HarvestedWt;\r\n                        HarvestedN += sward.HarvestedN;\r\n                    } \r\n                    else \r\n                    {\r\n                        Harvested += sward.HarvestedWt / NumPaddocks;\r\n                        HarvestedN += sward.HarvestedN / NumPaddocks;\r\n                    }\r\n                }\r\n\r\n                if (NutrientReturnType == NutrientReturnTypes.FromHarvest)\r\n                {\r\n                    AmountFertNReturned = HarvestedN * 0.50;  // TODO yikes - probably should not have hard-coded this, if it is not FromHarvest then the value has been set in the manager parameters\r\n                    AmountDungNReturned = HarvestedN * 0.35;  // \r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n                else if (NutrientReturnType == NutrientReturnTypes.SetMonthly)\r\n                {\r\n                    AmountFertNReturned = MonthlyFertAmt[Clock.Today.Month - 1];\r\n                    AmountDungNReturned = AmountFertNReturned * (0.35 / 0.50);  // \r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n                else\r\n                {\r\n                    // urine and dung are set from the parameters\r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n\r\n\r\n                summary.WriteMessage(this, \"The amount of urea fertiliser to be returned to the whole paddock is \" + AmountFertNReturned);\r\n\r\n                DoUrineReturn();\r\n\r\n                //DoTramplingAndDungReturn();\r\n\r\n                summary.WriteMessage(this, \"Finished Cutting\");\r\n\r\n            } // this is the end of the CutNow section\r\n\r\n            if ((GeneralFertAmt > 0.0) && (Clock.Today.AddDays(1).Day == 1))\r\n            {\r\n                //DoFertiliser();\r\n            }\r\n\r\n\r\n\r\n            summary.WriteMessage(this, \"End of DoMgmt\");\r\n            //printMinN();\r\n        }\r\n\r\n        [EventSubscribe(\"EndOfDay\")]\r\n        private void OnEndOfDay(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"Start of EndOfDay\");\r\n            //printMinN();\r\n        }\r\n\r\n        public void DoTramplingAndDungReturn()\r\n        {\r\n            int i = -1;  // patch or paddock counter\r\n            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n            {\r\n                i += 1;\r\n                SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;\r\n                SurfaceOrganicMatter surfaceOM = Apsim.Find(zone, typeof(SurfaceOrganicMatter)) as SurfaceOrganicMatter; \r\n\r\n                // do some trampling of litter\r\n                // accelerate the movement of surface litter into the soil - do this before the dung is added\r\n                double temp = surfaceOM.Wt * 0.1;\r\n\r\n                TillageType trampling = new TillageType();\r\n                surfaceOM.Incorporate(fraction: (double)0.1, depth: (double)100.0);\r\n\r\n                summary.WriteMessage(this, \"For patch \" + i + \" the amount of litter trampled was \" + temp + \" and the remaining litter is \" + (surfaceOM.Wt));\r\n\r\n                // move the dung to litter - assume dung is 40% of that harvested and a C:N ratio of \r\n                BiomassRemovedType dung = new BiomassRemovedType();\r\n                dung.crop_type = \"RuminantDung_PastureFed\";\r\n                dung.dm_type = new string[] { \"RuminantDung_PastureFed\" };\r\n                dung.dlt_crop_dm = new float[] { Convert.ToSingle(AmountDungCReturned / 0.4) };  // \r\n                dung.dlt_dm_n = new float[] { Convert.ToSingle(AmountDungNReturned) };    // \r\n                dung.dlt_dm_p = new float[] { 0.0F };\r\n                dung.fraction_to_residue = new float[] { 1.0F };\r\n                BiomassRemoved.Invoke(dung);\r\n                summary.WriteMessage(this, \"For patch \" + i + \" the amount of dung DM added to the litter was \" + (AmountDungCReturned / 0.4) + \" and the amount of N added in the dung was \" + (AmountDungNReturned));\r\n\r\n            } \r\n        }\r\n        // this is the end of the trampling and dung patch/paddock section\r\n\r\n\r\n        public void printMinN()\r\n        {\r\n            List<IModel> zones = Apsim.FindAll(this, typeof(Zone));\r\n            Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first zone\r\n\r\n            for (int ii = 0; ii < (SoilNitrogen.PatchCount); ii++)\r\n            {\r\n                double MinNPatch = SoilNitrogen.PatchTotalUrea[ii] + SoilNitrogen.PatchTotalNH4[ii] + SoilNitrogen.PatchTotalNO3[ii];\r\n                summary.WriteMessage(this, \"Patch \" + ii + \":\" + MinNPatch);\r\n            }\r\n\r\n        }\r\n\r\n        public void DoUrineReturn()\r\n        {\r\n            if (PatchType == patchTypes.EP)\r\n            {                \r\n\r\n                GetPatchForUrineReturn();  //sets the value for PatchNumForFert\r\n                int i = -1; //to count the paddocks\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                {\r\n                    i += 1;\r\n                    if (i == PatchNumForFert)\r\n                    {\r\n                        Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;\r\n                        Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n\r\n                        double tempDepth = 0.0;\r\n                        for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                        {\r\n                            tempDepth += soil.Thickness[ii];\r\n                            thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * NumPatches * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));\r\n                        }\r\n                        UreaReturned += AmountFertNReturned;\r\n                    }\r\n                } \r\n\r\n            }\r\n            else if (PatchType == patchTypes.GP)\r\n            {\r\n                GetPatchForUrineReturn();  //sets the value for PatchNumForFert\r\n                int[] PatchToAddTo = new int[1];  //because need an array variable for this\r\n                string[] PatchNmToAddTo = new string[0];  //need an array variable for this\r\n                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));\r\n                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first\r\n                double[] UreaToAdd = new double[soil.Thickness.Length];  \r\n\r\n                for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;\r\n\r\n                UreaReturned += AmountFertNReturned;\r\n\r\n\r\n                AddSoilCNPatchType CurrentPatch = new AddSoilCNPatchType();\r\n                CurrentPatch.Sender = \"manager\";\r\n                CurrentPatch.DepositionType = \"ToSpecificPatch\";\r\n                PatchToAddTo[0] = PatchNumForFert;\r\n                CurrentPatch.AffectedPatches_id = PatchToAddTo;\r\n                CurrentPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                CurrentPatch.Urea = UreaToAdd;\r\n\r\n\r\n                summary.WriteMessage(this, \"Patch MinN prior to urine return:\");\r\n\r\n                //printMinN();\r\n                AddSoilCNPatch.Invoke(CurrentPatch); \r\n                summary.WriteMessage(this, \"Patch MinN after urine return:\");\r\n                //printMinN();\r\n            }\r\n            else if (PatchType == patchTypes.PP)\r\n            {\r\n                // create a new patch from base of area 1/NumGPPatches\r\n                // add the fertiliser to that patch\r\n                // set amalgamation autmomatic\r\n                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));\r\n                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first\r\n\r\n                double[] UreaToAdd = new double[soil.Thickness.Length];  \r\n\r\n                for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;\r\n\r\n                int[] PatchToAddTo = new int[1];\r\n                string[] PatchNmToAddTo = new string[0];  //need an array variable for this\r\n\r\n                UreaReturned += AmountFertNReturned;\r\n\r\n                AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();\r\n                NewPatch.DepositionType = \"ToNewPatch\";\r\n                NewPatch.AreaFraction = 1.0 / NumPatches;\r\n                PatchToAddTo[0] = 0;\r\n                NewPatch.AffectedPatches_id = PatchToAddTo;\r\n                NewPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                NewPatch.Urea = UreaToAdd;\r\n\r\n                summary.WriteMessage(this, \"UreaToAdd \" + UreaToAdd[0] + \" \" + UreaToAdd[1] + \" \" + UreaToAdd[2] + \" \" + UreaToAdd[3] + \" \" + UreaToAdd[4]);\r\n\r\n\r\n                AddSoilCNPatch.Invoke(NewPatch);\r\n\r\n                //throw new Exception(\"Have not set up the PP for DoUrineReturn yet\");\r\n            }\r\n            else if (PatchType == patchTypes.UP)\r\n            {\r\n                int i = -1;  // patch or paddock counter\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                {\r\n                    i += 1;\r\n\r\n                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;\r\n                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n\r\n                    double tempDepth = 0.0;\r\n                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    {\r\n                        tempDepth += soil.Thickness[ii];\r\n                        thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));\r\n                    } \r\n                    UreaReturned += AmountFertNReturned;\r\n                }\r\n            }\r\n            else\r\n                throw new Exception(\"Patch type not catered for\");\r\n\r\n\r\n\r\n        }\r\n        // end of DoUrineReturn\r\n\r\n        public void GetPatchForUrineReturn()\r\n        {\r\n            \r\n            if (FertiliserReturnPattern == urineReturnTypes.UniformAcrossAllPatches)\r\n                PatchNumForFert = 0;  // but will not be used\r\n            else if (FertiliserReturnPattern == urineReturnTypes.RotatingInOrder)\r\n            {\r\n                PatchNumForFert += 1;  //increment the patch number\r\n                if (PatchNumForFert >= NumPatches)\r\n                    PatchNumForFert = 0;  // but reset back to the first patch if needed\r\n                //summary.WriteMessage(this, \"The patch for fertiliser return is \" + PatchNumForFert);\r\n            }\r\n            else if (FertiliserReturnPattern == urineReturnTypes.Random)\r\n            {\r\n                Random rnd = new Random();\r\n                PatchNumForFert = rnd.Next(0, NumPatches);\r\n                //summary.WriteMessage(this, \"The next random number patch for fertiliser return is \" + PatchNumForFert);\r\n            }\r\n            else if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)\r\n            {\r\n                PatchNumForFert = PseudoRandomSeq[GrazingNumber];\r\n                //summary.WriteMessage(this, \"The next pseudo-random number patch for fertiliser return is \" + PatchNumForFert);\r\n            }\r\n        }\r\n        // this is the end of GetPatchForUrineReturn\r\n\r\n\r\n        public void FertPlacementDepth()\r\n        {\r\n            // note that this only looks at the first paddock and assumes that all the paddocks are the same\r\n            int iii = -1;  // to use as a patch counter\r\n            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n            {\r\n                iii += 1;\r\n                if (iii == 0)\r\n                {\r\n                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n                    double tempDepth = 0.0;\r\n                    FertDepthPlacement = new double[soil.Thickness.Length];\r\n                    for (int i = 0; i <= (soil.Thickness.Length - 1); i++)\r\n                    {\r\n                        tempDepth += soil.Thickness[i];\r\n                        if (tempDepth <= FertiliserDepth)\r\n                        {\r\n                            FertDepthPlacement[i] = soil.Thickness[i] / FertiliserDepth;\r\n                        }\r\n                        else\r\n                        {\r\n                            FertDepthPlacement[i] = (FertiliserDepth - (tempDepth - soil.Thickness[i])) / (tempDepth - (tempDepth - soil.Thickness[i])) * soil.Thickness[i] / FertiliserDepth;\r\n                            FertDepthPlacement[i] = Math.Max(0.0, Math.Min(1.0, FertDepthPlacement[i]));\r\n                        }\r\n                        //if (FertiliserReturnPattern == \"UniformAcrossAllPatches\")\r\n                        //   summary.WriteMessage(this, \"The proportion of fertiliser applied to the \" + i + \"th layer will be \" + FertDepthPlacement[i]);\r\n                        //else\r\n                        summary.WriteMessage(this, \"The proportion of fertiliser (* NumPatches) applied to the \" + i + \"th layer will be \" + FertDepthPlacement[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        // this is the end of FertPlacementDepth\r\n\r\n\r\n        public void DoFertiliser()\r\n        {\r\n            bool ApplyFert = true; // the test for first day of the month has already been done\r\n            double NumMonths = 0;\r\n\r\n            if (GeneralFertType == \"Monthly\")\r\n                NumMonths = 12;\r\n            else if (GeneralFertType == \"NoWinter\")\r\n            {\r\n                if ((Clock.Today.Month < 5) || (Clock.Today.Month > 7))\r\n                {\r\n                    ApplyFert = true;\r\n                    NumMonths = 9;\r\n                }\r\n            }\r\n            else\r\n                throw new Exception(\"Wrong general fertiliser setting\");\r\n\r\n            if (ApplyFert)\r\n            {\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))  // but actually there will only be a single paddock\r\n                {\r\n                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;\r\n\r\n                    //thisFert.Apply((float)(GeneralFertAmt / NumMonths), (float) (0.0), \"urea_n\");\r\n                    thisFert.Apply(Amount: (double)(GeneralFertAmt / NumMonths), Type: Fertiliser.Types.UreaN, Depth: FertiliserDepth);\r\n                    summary.WriteMessage(this, \"Applying \" + (GeneralFertAmt / NumMonths) + \" kg of general fertiliser\");\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    [Serializable]\r\n    class Sward\r\n    {\r\n        private const double Epsilon = 0.000000001;\r\n        private List<PastureSpecies> species;\r\n\r\n        public Sward(Zone zone)\r\n        {\r\n            species = Apsim.ChildrenRecursively(zone, typeof(PastureSpecies)).Cast<PastureSpecies>().ToList();\r\n        }\r\n\r\n        public double HarvestableWt {    get { return species.Sum(sp => sp.HarvestableWt); }    }\r\n\r\n        public double HarvestedWt {    get { return species.Sum(sp => sp.HarvestableWt); }    }\r\n\r\n        public double HarvestedN {    get { return species.Sum(sp => sp.HarvestedN); } }\r\n\r\n        public double StandingHerbageWt {    get { return species.Sum(sp => sp.StandingHerbageWt); }    }\r\n\r\n        public bool IsAlive\r\n        {\r\n            get\r\n            {\r\n                bool alive = true;\r\n                species.ForEach(sp => alive = alive && sp.PlantStatus == \"alive\");\r\n                return alive;\r\n            }\r\n        }\r\n\r\n        /// <summary>Removes plant material simulating a graze event.</summary>\r\n        /// <param name=\"amount\">The DM amount (kg/ha)</param>\r\n        /// <param name=\"type\">How the amount is interpreted (SetResidueAmount or SetRemoveAmount)</param>\r\n        public void Graze(double amount, string type)\r\n        {\r\n            double amountAvailable = HarvestableWt;\r\n            if (IsAlive || (amountAvailable > Epsilon))\r\n            {\r\n                // Get the amount required to remove\r\n                double amountRequired;\r\n                if (type.ToLower() == \"setresidueamount\")\r\n                {\r\n                    // Remove all DM above given residual amount\r\n                    amountRequired = Math.Max(0.0, StandingHerbageWt - amount);\r\n                }\r\n                else if (type.ToLower() == \"setremoveamount\")\r\n                {\r\n                    // Remove a given amount\r\n                    amountRequired = Math.Max(0.0, amount);\r\n                }\r\n                else\r\n                {\r\n                    throw new Exception(\"Type of amount to remove on graze not recognized (use \\'SetResidueAmount\\' or \\'SetRemoveAmount\\'\");\r\n                }\r\n                // Get the actual amount to remove\r\n                double amountToRemove = Math.Max(0.0, Math.Min(amountRequired, amountAvailable));\r\n\r\n                // Get the amounts to remove by mySpecies:\r\n                if (amountToRemove > Epsilon)\r\n                {\r\n                    double[] fractionToRemove = new double[species.Count];\r\n                    for (int s = 0; s < species.Count; s++)\r\n                    {\r\n                        // get the fraction to required for each mySpecies, partition according to available DM to harvest\r\n                        fractionToRemove[s] = species[s].HarvestableWt / amountAvailable;\r\n\r\n                        // remove DM and N for each mySpecies (digestibility is also evaluated)\r\n                        species[s].RemoveBiomass(amountToRemove * fractionToRemove[s]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "CuttingFrequency",
                  "Value": "0"
                },
                {
                  "Key": "CuttingResidual",
                  "Value": "1000"
                },
                {
                  "Key": "NutrientReturnType",
                  "Value": "Constant"
                },
                {
                  "Key": "AmountFertNReturned",
                  "Value": "40"
                },
                {
                  "Key": "AmountDungNReturned",
                  "Value": "0"
                },
                {
                  "Key": "FertiliserDepth",
                  "Value": "200"
                },
                {
                  "Key": "FertiliserReturnPattern",
                  "Value": "RotatingInOrder"
                },
                {
                  "Key": "ReportingFreq",
                  "Value": "OnGrazing"
                },
                {
                  "Key": "PatchType",
                  "Value": "GP"
                },
                {
                  "Key": "NumGPPatches",
                  "Value": "10"
                },
                {
                  "Key": "SystemID",
                  "Value": "A"
                }
              ],
              "Name": "PatchManager",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using Models.Interfaces;\r\nusing System;\r\nusing Models.Core;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Zones;\r\nusing Models.AgPasture;\r\nusing System.Xml.Serialization;\r\nusing Models.Soils;\r\nusing Models.Surface;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System;\r\nusing System.Linq;\r\nusing Models.Interfaces;\r\n\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        [Link] private Clock Clock;\r\n        [Link] private Simulation Simulation;\r\n        [Link] private Soil soil;\r\n        [Link] private ISummary summary;\r\n        [Link] private Weather Weather;\r\n        [Link] private Zone zone;\r\n        public int PatchCount;\r\n        public int PaddockCount;\r\n        public double Grazed;\r\n        public double GrazedN;\r\n        public double UrineNReturned;\r\n        private double iniOrgC;\r\n        private double iniOrgN;\r\n        private double myVariable;\r\n        [Link(ByName = true)]\r\n        private ISolute NO3;\r\n        [Link(ByName = true)]\r\n        private ISolute NH4;\r\n        [Link(ByName = true)]\r\n        private ISolute Urea;\r\n        [Link(ByName = true)]\r\n        private SoilNitrogen SoilNitrogen;\r\n\r\n        private Zone[] Zones {get; set; }\r\n\r\n        private Models.Report.Report ReportingWithPatches;\r\n\r\n        [Description(\"Verbose reporting mode (True/False)\")]\r\n        public bool verbose { get; set; }\r\n\r\n        [Description(\"Name of the patch manager for input\")]\r\n        public string InputModule { get; set; }\r\n\r\n        [Description(\"Name of the report for output\")]\r\n        public string OutputModule { get; set; }\r\n\r\n        [Description(\"Frequency of reporting\")]\r\n        public reportingFrequencyTypes ReportingFreq { get; set; }\r\n\r\n        [XmlIgnore] public int DaysSinceReport { get; set; }\r\n        [XmlIgnore] public double NHA { get; set; }\r\n        [XmlIgnore] public double PGR { get; set; }\r\n        [XmlIgnore] public double HerbageGrazed { get; set; }\r\n        [XmlIgnore] public double HerbageGrazedN { get; set; }\r\n        [XmlIgnore] public double AreaUrinePatchesToday { get; set; }\r\n        [XmlIgnore] public double UreaReturned { get; set; }\r\n        [XmlIgnore] public double Fixation { get; set; }\r\n        [XmlIgnore] public double LeachN { get; set; }\r\n        [XmlIgnore] public double Denit { get; set; }\r\n        [XmlIgnore] public double DenitN2O { get; set; }\r\n        [XmlIgnore] public double OrgC { get; set; }\r\n        [XmlIgnore] public double OrgN { get; set; }\r\n        [XmlIgnore] public double dltOrgC { get; set; }\r\n        [XmlIgnore] public double dltOrgN { get; set; }\r\n        [XmlIgnore] public double MinN { get; set; }\r\n        [XmlIgnore] public double UreaN { get; set; }\r\n        [XmlIgnore] public double NH4N { get; set; }\r\n        [XmlIgnore] public double NO3N { get; set; }\r\n        [XmlIgnore] public double UreaAddedInGrazing { get; set; }\r\n\r\n        [XmlIgnore] public double[] MinNPatch { get; set; }\r\n\r\n\r\n\r\n\r\n        private bool ReportToday = false;      \r\n\r\n        public enum reportingFrequencyTypes\r\n        {\r\n            /// <summary>Daily</summary>\r\n            Daily,\r\n            /// <summary>Every 10 days</summary>\r\n            TenDaily,\r\n            /// <summary>Monthly</summary>\r\n            Monthly,\r\n            /// <summary>Annual</summary>\r\n            Annual,\r\n            /// <summary>On grazing</summary>\r\n            OnGrazing\r\n        }\r\n\r\n    \r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n\r\n               if (verbose)\r\n                summary.WriteMessage(this, \"Initialising the Manager for grazing, urine return and reporting\");\r\n            DaysSinceReport = 0;\r\n            PatchCount = SoilNitrogen.PatchCount;\r\n            PaddockCount=0;\r\n\r\n\r\n\r\n            // Get list of zones in the simulation\r\n            List<Zone> zones = new List<Zone>();\r\n\r\n            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n            {\r\n                zones.Add(zone as Zone);\r\n                ReportingWithPatches = (Models.Report.Report)zone.Get(\"[\" + OutputModule+ \"]\");\r\n                PaddockCount++;\r\n            }\r\n            Zones = zones.ToArray();\r\n\r\n\r\n            //myVariable = (double)ManageGriddedPaddock.Get(\"Script.Var1\");\r\n            //double grazedN = ManageGriddedPaddock.Get(\"Script.grazedN\");\r\n\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"Finished initialising the Manager for grazing, urine return and reporting\");\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"DoDailyInitialisation\")]\r\n        private void OnDoDailyInitialisation(object sender, EventArgs e)\r\n        {    \r\n                    \r\n            if (verbose)\r\n                summary.WriteMessage(this, \"In Daily Initialisation for the Reporting Manager on \" + Clock.Today);\r\n            if(Clock.Today == Clock.StartDate) {\r\n\r\n                iniOrgC = 0.0; \r\n                iniOrgN = 0.0;            \r\n\r\n                foreach (Zone zone in Zones)\r\n                {\r\n                    SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;\r\n                    for (int ii = 0; ii < soil.Thickness.Length; ii++)\r\n                    {\r\n                        iniOrgC += soilN.TotalC[ii]; // TODO RJM Check this is right!\r\n                        iniOrgN += soilN.organic_n[ii];\r\n                    }\r\n                }\r\n            }        \r\n\r\n\r\n        }\r\n\r\n            \r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void DoManagement(object sender, EventArgs e)\r\n        {\r\n               bool isEndOfMonth = false;\r\n            if (Clock.Today.AddDays(1).Day == 1) \r\n                isEndOfMonth = true;\r\n            \r\n\r\n            bool isEndOfYear = false;\r\n            if (Clock.Today.Day == 31 && Clock.Today.Month == 12)\r\n                isEndOfYear = true;\r\n\r\n\r\n            bool GrazedToday = (bool) Apsim.Get(Simulation, InputModule + \".Script.grazedToday\"); \r\n\r\n            // should reporting be done today?  \r\n            if (ReportingFreq == reportingFrequencyTypes.Daily)\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day == 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (GrazedToday))\r\n                ReportToday = true;\r\n            else\r\n                ReportToday = false;\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"Finished Prepare for the Reporting Manager on \" + Clock.Today);\r\n        } \r\n\r\n        [EventSubscribe(\"EndOfDay\")]\r\n        private void OnEndOfDay(object sender, EventArgs e)\r\n        {\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"In EndOfDay for the Reporting Manager on  \" + Clock.Today);\r\n\r\n            DaysSinceReport += 1;\r\n\r\n\r\n\r\n            foreach (Zone zone in Zones)\r\n            {\r\n                var sward = Apsim.Children(zone, typeof(PastureSpecies)).Cast<PastureSpecies>().ToList();\r\n                  NHA += sward.Sum(species => species.HerbageGrowthWt) / PaddockCount;\r\n                PGR = NHA;  // divide this by the number of days just before reporting\r\n                Fixation += sward.Sum(species => species.FixedN) / PaddockCount;\r\n\r\n                Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n                LeachN += soil.SoilWater.FlowNO3[soil.SoilWater.FlowNO3.Length-1]/PaddockCount;  // only take the deepest element\r\n\r\n                for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                {\r\n                    Denit += SoilNitrogen.Denitrification[ii]/PaddockCount;\r\n                    DenitN2O += SoilNitrogen.n2o_atm[ii]/PaddockCount;\r\n                }\r\n\r\n\r\n                Grazed = (double)zone.Get(\"[\" + InputModule + \"].Script.Harvested\")/PaddockCount;\r\n                GrazedN = (double)zone.Get(\"[\" + InputModule + \"].Script.HarvestedN\")/PaddockCount;\r\n                UrineNReturned = (double)zone.Get(\"[\" + InputModule + \"].Script.UreaReturned\")/PaddockCount;\r\n                //AreaUrinePatchesToday = (double)zone.Get(\"[\" + InputModule + \"].Script.areaUrinePatchesToday\");\r\n            } \r\n\r\n            HerbageGrazed += Grazed;\r\n            HerbageGrazedN += GrazedN;\r\n            UreaReturned += UrineNReturned;\r\n\r\n            if(ReportToday) {\r\n\r\n                OrgC = 0.0;\r\n                OrgN = 0.0;\r\n                UreaN = 0.0;\r\n                NH4N = 0.0;\r\n                NO3N = 0.0;\r\n                MinN = 0.0;\r\n\r\n\r\n                Soil soil1 = Apsim.Find(Zones[0], typeof(Soil)) as Soil;\r\n\r\n                if(PaddockCount>1)\r\n                    MinNPatch = new double[PaddockCount];\r\n                else \r\n                    MinNPatch = new double[SoilNitrogen.PatchCount];\r\n\r\n\r\n                int currentZoneNum = 0;\r\n                foreach (Zone zone in Zones)\r\n                {\r\n                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n\r\n                    double minNPatch = 0;\r\n\r\n                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    {\r\n                        OrgC += SoilNitrogen.TotalC[ii]/PaddockCount;  \r\n                        OrgN += SoilNitrogen.organic_n[ii]/PaddockCount;\r\n                        UreaN += Urea.kgha[ii]/PaddockCount;\r\n                        NH4N += NH4.kgha[ii]/PaddockCount;\r\n                        NO3N += NO3.kgha[ii]/PaddockCount;\r\n                        MinN = UreaN + NH4N + NO3N;                    \r\n                        minNPatch += Urea.kgha[ii] + NH4.kgha[ii] + NO3.kgha[ii];\r\n                    }\r\n\r\n\r\n                    //MinN = (UreaN*PaddockCount + NH4N*PaddockCount + NO3N*PaddockCount);\r\n                    if(PaddockCount>1) MinNPatch[currentZoneNum] = minNPatch;\r\n\r\n                    dltOrgC = OrgC - iniOrgC; \r\n                    dltOrgN = OrgN - iniOrgN;\r\n                    iniOrgC = OrgC; // ready for the next calculation of change in pools\r\n                    iniOrgN = OrgN;\r\n                    currentZoneNum++;\r\n                }\r\n\r\n                if(SoilNitrogen.PatchCount>1) {  // TODO will break if there is more than one paddock/zone AND more than one patch                    \r\n\r\n                    for (int ii = 0; ii < (SoilNitrogen.PatchCount); ii++)\r\n                    {\r\n                        MinNPatch[ii] = SoilNitrogen.PatchTotalUrea[ii]+SoilNitrogen.PatchTotalNH4[ii] + SoilNitrogen.PatchTotalNO3[ii];\r\n                    }\r\n                }\r\n\r\n                PGR = NHA / DaysSinceReport; \r\n\r\n                ReportingWithPatches.DoOutput();\r\n\r\n                // now zero the reported variables\r\n                DaysSinceReport = 0;\r\n                HerbageGrazed = 0.0;\r\n                HerbageGrazedN = 0.0;\r\n                DaysSinceReport = 0;\r\n                NHA = 0;\r\n                PGR = 0;\r\n                UreaReturned = 0;\r\n                Fixation = 0;\r\n                LeachN = 0;\r\n                Denit = 0;\r\n                DenitN2O = 0;\r\n                OrgC = 0;\r\n                OrgN = 0;\r\n                MinN = 0;\r\n                UreaN = 0;\r\n                NH4N = 0;\r\n                NO3N = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "verbose",
                  "Value": "False"
                },
                {
                  "Key": "InputModule",
                  "Value": "PatchManager"
                },
                {
                  "Key": "OutputModule",
                  "Value": "ReportingWithPatches"
                },
                {
                  "Key": "ReportingFreq",
                  "Value": "Daily"
                }
              ],
              "Name": "ReportingWithPatchesVariables",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "Parent.Name as Zone",
                "[Clock].Today as Date",
                "[Clock].Today.Month as Month",
                "[Clock].Today.Year as Year",
                "[ReportingWithPatchesVariables].Script.UreaReturned as UrineNReturned",
                "[ReportingWithPatchesVariables].Script.NHA as NHA",
                "[PatchManager].Script.NumPatches as NumPatches",
                "[ReportingWithPatchesVariables].Script.AreaUrinePatchesToday as AreaUrinePatchesToday",
                "[ReportingWithPatchesVariables].Script.HerbageGrazed as HerbageGrazed",
                "[ReportingWithPatchesVariables].Script.HerbageGrazedN as HerbageGrazedN",
                "[ReportingWithPatchesVariables].Script.LeachN as LeachN",
                "[ReportingWithPatchesVariables].Script.Denit as Denit",
                "[ReportingWithPatchesVariables].Script.Fixation as Fixation",
                "[ReportingWithPatchesVariables].Script.MinN as MinN",
                "[ReportingWithPatchesVariables].Script.UreaN as UreaN",
                "[ReportingWithPatchesVariables].Script.NH4N as NH4N",
                "[ReportingWithPatchesVariables].Script.NO3N as NO3N",
                "[ReportingWithPatchesVariables].Script.dltOrgC as dltOrgC",
                "[ReportingWithPatchesVariables].Script.dltOrgN as dltOrgN"
              ],
              "EventNames": [
                ""
              ],
              "Name": "ReportingWithPatches",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Zone, Models",
              "Area": 1.0,
              "Slope": 0.0,
              "AspectAngle": 0.0,
              "Altitude": 50.0,
              "Name": "Paddock",
              "Children": [
                {
                  "$type": "Models.Manager, Models",
                  "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Diagnostics; // used with Debugger.Break(); to debug manager scripts\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil soil;\r\n        [Link] Weather Met; \r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public answerTypes allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string IrrigStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string IrrigEnd { get; set; }\r\n        [Description(\"Enter the depth to which water deficit is computed (mm)\")]\r\n        public double SoilDepth { get; set; }\r\n        [Description(\"PAW below which soil is considered 'shallow' (mm)\")]\r\n        public double CritPAWForShallow { get; set; }\r\n        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")]\r\n        public double CritRainToPause { get; set; }\r\n        [Description(\"Number of days to pause irrigator after critical rainfall (days)\")]\r\n        public double DaysToPauseOnCritRain { get; set; }\r\n\r\n        [Description(\"Shallow Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnShallow { get; set; }\r\n        [Description(\"Shallow Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtShallow { get; set; }\r\n        [Description(\"Shallow Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitShallow { get; set; }\r\n        [Description(\"Shallow Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffShallow { get; set; }\r\n\r\n        [Description(\"Deep Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnDeep { get; set; }\r\n        [Description(\"Deep Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtDeep { get; set; }\r\n        [Description(\"Deep Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitDeep { get; set; }\r\n        [Description(\"Deep Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffDeep { get; set; }\r\n\r\n        // Outputs\r\n        public double TodayDeficit { get; set; }\r\n        public double TodayDeficit_nve { get; set; }\r\n        public double IrrigDay { get; set; }\r\n        public double SoilPAW { get; set; }\r\n        public double IrrigDeficit { get; set; }\r\n        public double IrrigReturn { get; set; }\r\n        public double IrrigAmt { get; set; }\r\n        public double IrrigEff { get; set; }\r\n        public double Rain3 { get; set; }\r\n\r\n        public double Days2Pause { get; set; }\r\n\r\n        // internal use\r\n        private DateTime StartDate;               //The date when irrigation start (in date format)\r\n        private DateTime EndDate;                 //The date when irrigation finish (in date format)\r\n        private double RainToday=0;\r\n        public double[] Rain_3;\r\n\r\n        public enum answerTypes\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialising          \");\r\n            summary.WriteMessage(this, \"\");\r\n\r\n            IrrigDay = 5000;  //so will reset to 1 on first day\r\n              StartDate = DateTime.Parse(IrrigStart);\r\n              EndDate = DateTime.Parse(IrrigEnd);\r\n\r\n            Rain3 = 0;\r\n            Rain_3 = new double[4];\r\n            Rain_3[0] = 0;\r\n            Rain_3[1] = 0;\r\n            Rain_3[2] = 0;\r\n\r\n              SoilPAW = 0.0;\r\n\r\n              double[] sw_dul = soil.DULmm;\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) \r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n              }\r\n\r\n              if(SoilPAW <= CritPAWForShallow) {      \r\n                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                IrrigReturn = IrrigReturnShallow;\r\n                IrrigAmt = IrrigAmtShallow;\r\n                IrrigEff = IrrigEffShallow ;           \r\n                summary.WriteMessage(this, \"  Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW);\r\n            } \r\n            else \r\n            {\r\n                IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                IrrigReturn = IrrigReturnDeep;\r\n                IrrigAmt = IrrigAmtDeep;\r\n                IrrigEff = IrrigEffDeep;\r\n                summary.WriteMessage(this, \"  Soil is considered to be deep\");\r\n            }\r\n\r\n            summary.WriteMessage(this, \"  Irrigation critical deficit (mm): \" + IrrigDeficit);\r\n            summary.WriteMessage(this, \"          Irrigation return (days): \" + IrrigReturn);\r\n            summary.WriteMessage(this, \"     Irrigation pumped amount (mm): \" + IrrigAmt);\r\n            summary.WriteMessage(this, \"         Irrigation efficiency (%): \" + IrrigEff);\r\n            summary.WriteMessage(this, \"\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialised\");\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            \r\n        }\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n       [EventSubscribe(\"PreparingNewWeatherData\")]\r\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\r\n        {\r\n            RainToday = Met.Rain; //takes note of how much rain was due to fall today        \r\n        }\r\n\r\n        //[EventSubscribe(\"DoDailyInitialisation\")]\r\n        //private void OnDoDailyInitialisation(object sender, EventArgs e) \r\n        //{\r\n        //}\r\n\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            int rain=0;\r\n\r\n            Rain_3[2] = Rain_3[1];\r\n            Rain_3[1] = Rain_3[0];\r\n            Rain_3[0] = RainToday;\r\n            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days\r\n            if(Rain3 >= CritRainToPause)\r\n                Days2Pause = DaysToPauseOnCritRain;\r\n            else\r\n                Days2Pause = Days2Pause - 1;\r\n\r\n            double[] sw_dul = soil.DULmm;\r\n            double[] sw_sw = soil.Thickness;  // ??? was MySwim.sw_dep\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n\r\n            TodayDeficit = 0.0;\r\n            SoilPAW = 0.0;\r\n\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) {\r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);\r\n                  }\r\n              }\r\n            TodayDeficit_nve = -1 * TodayDeficit;\r\n\r\n            if (isBetween(Clock.Today, StartDate, EndDate)) {\r\n                 if(SoilPAW <= CritPAWForShallow) {      \r\n                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                    IrrigReturn = IrrigReturnShallow;\r\n                    IrrigAmt = IrrigAmtShallow;\r\n                    IrrigEff = IrrigEffShallow ;           \r\n                } \r\n                else \r\n                {\r\n                    IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                    IrrigReturn = IrrigReturnDeep;\r\n                    IrrigAmt = IrrigAmtDeep;\r\n                    IrrigEff = IrrigEffDeep;\r\n                }\r\n\r\n                if(Days2Pause < 0.5) {\r\n                    IrrigDay = IrrigDay + 1;\r\n                    if(IrrigDay > IrrigReturn)\r\n                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    \r\n\r\n                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {\r\n                        if(IrrigDay == 1){\r\n                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));\r\n                            //summary.WriteMessage(this, \"Rain today was \" + RainToday + \". Applying \" + AmountToApply+ \" mm of irrigation\");\r\n                            irrigation.Apply(AmountToApply);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n",
                  "Parameters": [
                    {
                      "Key": "allowIrrigation",
                      "Value": "yes"
                    },
                    {
                      "Key": "IrrigStart",
                      "Value": "1-sep"
                    },
                    {
                      "Key": "IrrigEnd",
                      "Value": "30-apr"
                    },
                    {
                      "Key": "SoilDepth",
                      "Value": "500"
                    },
                    {
                      "Key": "CritPAWForShallow",
                      "Value": "60"
                    },
                    {
                      "Key": "CritRainToPause",
                      "Value": "30"
                    },
                    {
                      "Key": "DaysToPauseOnCritRain",
                      "Value": "3"
                    },
                    {
                      "Key": "IrrigReturnShallow",
                      "Value": "2"
                    },
                    {
                      "Key": "IrrigAmtShallow",
                      "Value": "10"
                    },
                    {
                      "Key": "PercPAWIrrigDeficitShallow",
                      "Value": "30"
                    },
                    {
                      "Key": "IrrigEffShallow",
                      "Value": "100"
                    },
                    {
                      "Key": "IrrigReturnDeep",
                      "Value": "4"
                    },
                    {
                      "Key": "IrrigAmtDeep",
                      "Value": "20"
                    },
                    {
                      "Key": "PercPAWIrrigDeficitDeep",
                      "Value": "25"
                    },
                    {
                      "Key": "IrrigEffDeep",
                      "Value": "100"
                    },
                    {
                      "Key": "TodayDeficit",
                      "Value": "123.894"
                    },
                    {
                      "Key": "TodayDeficit_nve",
                      "Value": "-123.894"
                    },
                    {
                      "Key": "IrrigDay",
                      "Value": "3"
                    },
                    {
                      "Key": "SoilPAW",
                      "Value": "63.65"
                    },
                    {
                      "Key": "IrrigDeficit",
                      "Value": "25"
                    },
                    {
                      "Key": "IrrigReturn",
                      "Value": "4"
                    },
                    {
                      "Key": "IrrigAmt",
                      "Value": "20"
                    },
                    {
                      "Key": "IrrigEff",
                      "Value": "100"
                    },
                    {
                      "Key": "Rain3",
                      "Value": "0"
                    },
                    {
                      "Key": "Days2Pause",
                      "Value": "-80"
                    }
                  ],
                  "Name": "CentrePivot",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                  "Canopies": [],
                  "InitialResidueName": "grass",
                  "InitialResidueType": "grass",
                  "InitialResidueMass": 500.0,
                  "InitialStandingFraction": 0.0,
                  "InitialCPR": 0.0,
                  "InitialCNR": 15.0,
                  "FractionFaecesAdded": 1.0,
                  "ResourceName": "SurfaceOrganicMatter",
                  "Name": "SurfaceOrganicMatter",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.MicroClimate, Models",
                  "a_interception": 0.0,
                  "b_interception": 1.0,
                  "c_interception": 0.0,
                  "d_interception": 0.0,
                  "soil_albedo": 0.23,
                  "SoilHeatFluxFraction": 0.4,
                  "MinimumHeightDiffForNewLayer": 0.0,
                  "NightInterceptionFraction": 0.5,
                  "ReferenceHeight": 2.0,
                  "Name": "MicroClimate",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Irrigation, Models",
                  "Name": "Irrigation",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Fertiliser, Models",
                  "Name": "Fertiliser",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Soil, Models",
                  "RecordNumber": 0,
                  "ASCOrder": null,
                  "ASCSubOrder": null,
                  "SoilType": "NZ_Sedimentary",
                  "LocalName": "Lismore",
                  "Site": "Winchmore",
                  "NearestTown": "Ashburton",
                  "Region": "Canterbury",
                  "State": null,
                  "Country": "New Zealand",
                  "NaturalVegetation": null,
                  "ApsoilNumber": null,
                  "Latitude": -48.48,
                  "Longitude": 0.0,
                  "LocationAccuracy": null,
                  "DataSource": null,
                  "Comments": null,
                  "Name": "Soil",
                  "Children": [
                    {
                      "$type": "Models.Soils.InitialWater, Models",
                      "PercentMethod": 0,
                      "FractionFull": 0.987012987012987,
                      "DepthWetSoil": "NaN",
                      "RelativeTo": null,
                      "Name": "Initial water",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Physical, Models",
                      "Depth": [
                        "0-15",
                        "15-30",
                        "30-50",
                        "50-65",
                        "65-90",
                        "90-120",
                        "120-150"
                      ],
                      "Thickness": [
                        150.0,
                        150.0,
                        200.0,
                        150.0,
                        250.0,
                        300.0,
                        300.0
                      ],
                      "ParticleSizeClay": [
                        18.333333333333332,
                        15.0,
                        12.0,
                        10.666666666666666,
                        8.0,
                        6.0,
                        5.0
                      ],
                      "ParticleSizeSand": null,
                      "ParticleSizeSilt": null,
                      "BD": [
                        1.3,
                        1.35,
                        1.0,
                        0.53,
                        0.31,
                        0.3,
                        0.3
                      ],
                      "AirDry": [
                        0.05,
                        0.12,
                        0.015,
                        0.015,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "LL15": [
                        0.15,
                        0.14,
                        0.055,
                        0.015,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "DUL": [
                        0.36,
                        0.34,
                        0.19,
                        0.065,
                        0.04,
                        0.03,
                        0.03
                      ],
                      "SAT": [
                        0.45,
                        0.43,
                        0.25,
                        0.15,
                        0.11,
                        0.11,
                        0.11
                      ],
                      "KS": [
                        5000.0,
                        2500.0,
                        3000.0,
                        10000.0,
                        17500.0,
                        20000.0,
                        20000.0
                      ],
                      "BDMetadata": null,
                      "AirDryMetadata": null,
                      "LL15Metadata": null,
                      "DULMetadata": null,
                      "SATMetadata": null,
                      "KSMetadata": null,
                      "Name": "Physical",
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.14,
                            0.14,
                            0.03,
                            0.03,
                            0.03,
                            0.03,
                            0.03
                          ],
                          "KL": [
                            0.1,
                            0.1,
                            0.1,
                            0.02,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "AGPRyegrassSoil",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.14,
                            0.14,
                            0.03,
                            0.03,
                            0.03,
                            0.03,
                            0.03
                          ],
                          "KL": [
                            0.1,
                            0.1,
                            0.1,
                            0.02,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "AGPWhiteCloverSoil",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilWater, Models",
                      "SummerDate": "1-Nov",
                      "SummerU": 6.0,
                      "SummerCona": 3.5,
                      "WinterDate": "1-apr",
                      "WinterU": 2.0,
                      "WinterCona": 2.0,
                      "DiffusConst": 88.0,
                      "DiffusSlope": 35.0,
                      "Salb": 0.13,
                      "CN2Bare": 73.0,
                      "CNRed": 20.0,
                      "CNCov": 0.8,
                      "slope": 0.0,
                      "discharge_width": 0.0,
                      "catchment_area": 0.0,
                      "max_pond": 0.0,
                      "Thickness": [
                        100.0,
                        200.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "Depth": [
                        "0-10",
                        "10-30",
                        "30-60",
                        "60-90",
                        "90-120",
                        "120-150",
                        "150-180"
                      ],
                      "SWCON": [
                        0.4,
                        0.5,
                        0.6,
                        0.6,
                        0.8,
                        0.8,
                        0.8
                      ],
                      "KLAT": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "PrecipitationInterception": 0.0,
                      "Name": "SoilWater",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Organic, Models",
                      "Depth": [
                        "0-15",
                        "15-30",
                        "30-50",
                        "50-65",
                        "65-90",
                        "90-120",
                        "120-150"
                      ],
                      "FOMCNRatio": 40.0,
                      "Thickness": [
                        150.0,
                        150.0,
                        200.0,
                        150.0,
                        250.0,
                        300.0,
                        300.0
                      ],
                      "Carbon": [
                        3.0,
                        1.0,
                        0.6,
                        0.4,
                        0.25,
                        0.15,
                        0.1
                      ],
                      "SoilCNRatio": [
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0
                      ],
                      "FBiom": [
                        0.04,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.0,
                        0.0
                      ],
                      "FInert": [
                        0.5,
                        0.7,
                        0.83,
                        0.9,
                        0.95,
                        0.99,
                        0.99
                      ],
                      "FOM": [
                        331.337020409173,
                        245.46050190550559,
                        164.53709493722965,
                        121.89207790753734,
                        73.931282427002344,
                        40.574348067292682,
                        22.267674346259405
                      ],
                      "Name": "Organic",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Chemical, Models",
                      "Depth": [
                        "0-10",
                        "10-30",
                        "30-60",
                        "60-90",
                        "90-120",
                        "120-150",
                        "150-180"
                      ],
                      "Thickness": [
                        100.0,
                        200.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "NO3N": [
                        7.619,
                        7.27,
                        3.8709999999999991,
                        3.84,
                        3.81,
                        3.7789999999999995,
                        3.6910000000000007
                      ],
                      "NH4N": [
                        0.132,
                        0.132,
                        0.132,
                        0.13200000000000003,
                        0.13199999999999998,
                        0.13199999999999998,
                        0.13199999999999998
                      ],
                      "PH": [
                        5.9,
                        5.9,
                        5.9,
                        5.9,
                        5.9,
                        5.9,
                        5.9
                      ],
                      "CL": null,
                      "EC": null,
                      "ESP": null,
                      "Name": "Chemical",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Sample, Models",
                      "Depth": [
                        "0-10",
                        "10-30",
                        "30-60",
                        "60-90",
                        "90-120",
                        "120-150",
                        "150-180"
                      ],
                      "Thickness": [
                        100.0,
                        200.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "NO3N": null,
                      "NH4N": null,
                      "SW": null,
                      "OC": null,
                      "EC": null,
                      "CL": null,
                      "ESP": null,
                      "PH": null,
                      "SWUnits": 0,
                      "OCUnits": 0,
                      "PHUnits": 0,
                      "Name": "Initial nitrogen",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogen, Models",
                      "fom_types": [
                        "default",
                        "manure",
                        "mucuna",
                        "lablab",
                        "shemp",
                        "stable"
                      ],
                      "fract_carb": [
                        0.2,
                        0.3,
                        0.54,
                        0.57,
                        0.45,
                        0.0
                      ],
                      "fract_cell": [
                        0.7,
                        0.3,
                        0.37,
                        0.37,
                        0.47,
                        0.1
                      ],
                      "fract_lign": [
                        0.1,
                        0.4,
                        0.09,
                        0.06,
                        0.08,
                        0.9
                      ],
                      "Name": "SoilNitrogen",
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilNitrogenNO3, Models",
                          "Name": "NO3",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenNH4, Models",
                          "Name": "NH4",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenUrea, Models",
                          "Name": "Urea",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                          "Name": "PlantAvailableNO3",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                          "Name": "PlantAvailableNH4",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.CERESSoilTemperature, Models",
                      "Name": "CERESSoilTemperature",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Report.Report, Models",
                  "VariableNames": [
                    "[Clock].Today as Date",
                    "[Soil].SoilNitrogen.PatchCount as PatchCount",
                    "[Soil].SoilNitrogen.PatchTotalUrea + [Soil].SoilNitrogen.PatchTotalNH4 + [Soil].SoilNitrogen.PatchTotalNO3 as MinN",
                    "[Soil].SoilNitrogen.MaximumNitrogenAvailableToPlants"
                  ],
                  "EventNames": [
                    "[Clock].EndOfDay"
                  ],
                  "Name": "Report",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "InitialShootDM": 1500.0,
                  "InitialRootDM": 450.0,
                  "InitialRootDepth": 750.0,
                  "ResourceName": "AGPRyegrass",
                  "Name": "AGPRyegrass",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "InitialShootDM": 500.0,
                  "InitialRootDM": 150.0,
                  "InitialRootDepth": 350.0,
                  "ResourceName": "AGPWhiteClover",
                  "Name": "AGPWhiteClover",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Simulation, Models",
          "Name": "UniformGrazedPaddock",
          "Children": [
            {
              "$type": "Models.Clock, Models",
              "Start": "1972-01-01T00:00:00",
              "End": "1972-12-31T00:00:00",
              "Name": "Clock",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Summary, Models",
              "CaptureErrors": true,
              "CaptureWarnings": true,
              "CaptureSummaryText": true,
              "Name": "SummaryFile",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Weather, Models",
              "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
              "ExcelWorkSheetName": null,
              "Name": "Weather",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
              "Name": "Soil Arbitrator",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using Models.Interfaces;\r\nusing System.Diagnostics;\r\nusing System.Collections.Generic;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.Surface;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.AgPasture;\r\nusing Models.Zones;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing Models.Core;\r\nusing Models.AgPasture;\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        [Link] private Clock Clock;\r\n        [Link] private Soil soil;\r\n        [Link] private ISummary summary;\r\n        [Link] private Weather Weather;\r\n        [Link] private Zone myZone;\r\n        public string SoilType;\r\n        public string SimLocation;\r\n        public string SetIrrigation;\r\n        public string GeneralFertType;\r\n        public double GeneralFertAmt;\r\n        public string PastureType;\r\n        public int PatchCount;\r\n        private double iniOrgC;\r\n        private double iniOrgN;\r\n        private double NewArea;\r\n        private Sward sward;\r\n\r\n        public  event AddSoilCNPatchDelegate AddSoilCNPatch;\r\n        public  event BiomassRemovedDelegate BiomassRemoved;\r\n        [Link(ByName = true)]\r\n        private SoilNitrogen SoilNitrogen;\r\n\r\n\r\n        public int DaysSinceCut = 0;\r\n        public int PatchNumForFert = -1;\r\n\r\n        private int NumPaddocks = 0; // NumPaddocks is the number of AgPastures and SoilWats etc\r\n        private int NumPatchesForFertiliser = 1;\r\n        private double[] MonthlyFertAmt;\r\n        private double[] FertDepthPlacement;\r\n        private int[] PseudoRandomSeq;\r\n        private int GrazingNumber = -1;\r\n        private bool CutNow = false;\r\n\r\n        private bool ReportToday = false;\r\n        private double AmountDungCReturned = 0.0;\r\n        private int nPatchesAdded = 0;\r\n        private int[] PatchToAddTo;\r\n        private string[] PatchNmToAddTo = new string[1];\r\n\r\n\r\n        [XmlIgnore] public bool grazedToday { get; set; }\r\n        [XmlIgnore] public double Harvested { get; set; }\r\n        [XmlIgnore] public double HarvestedN { get; set; }\r\n        [XmlIgnore] public double UreaReturned  { get; set; }\r\n        [XmlIgnore] public int NumPatches { get; set; }\r\n\r\n\r\n        [Description(\"Frequency of cutting (days) (0 will be interpreted as the end of each month)\")]\r\n        public int CuttingFrequency { get; set; }\r\n\r\n        [Description(\"Residual pasture mass after cutting (kg DM /ha)\")]\r\n        public int CuttingResidual { get; set; }\r\n\r\n        [Description(\"Type of nutrient return - calculated from the amount of herbage harvested or constant\")]\r\n        public NutrientReturnTypes NutrientReturnType { get; set; }\r\n\r\n        [Description(\"Amount of fertiliser N to apply to simulation after each cutting (pretend urine) (kgN/ha) (ignored if nutrient return is FromHarvest)\")]\r\n        public double AmountFertNReturned { get; set; }\r\n\r\n        [Description(\"Amount of dung N to apply to simulation after each cutting (kgN/ha) (ignored if nutrient return is FromHarvest)\")]\r\n        public double AmountDungNReturned { get; set; }\r\n\r\n        [Description(\"Depth band (0 mm to X mm) for fertiliser placement (mm)\")]\r\n        public int FertiliserDepth { get; set; }\r\n                        \r\n        [Description(\"Pattern for fertiliser return\")]\r\n        public urineReturnTypes FertiliserReturnPattern { get; set; }\r\n\r\n        [Description(\"Frequency of reporting\")]\r\n        public reportingFrequencyTypes ReportingFreq { get; set; }\r\n\r\n        [Description(\"Patch type\")]\r\n        public patchTypes PatchType { get; set; }\r\n\r\n        [Description(\"How many patches should there be in the grid? (used to create the grid for GP and the size of the patches for PP)\")]\r\n        public int NumGPPatches { get; set; }\r\n\r\n        [Description(\"System identifier\")]\r\n        public systemTypes SystemID { get; set; }\r\n\r\n        public enum systemTypes\r\n        {\r\n            /// <summary>A</summary>\r\n            A,\r\n            /// <summary>B</summary>\r\n            B,\r\n            /// <summary>C</summary>\r\n            C,\r\n            /// <summary>D</summary>\r\n            D,\r\n            /// <summary>E</summary>\r\n            E,\r\n            /// <summary>F</summary>\r\n            F\r\n        }\r\n\r\n        public enum patchTypes\r\n        {\r\n            /// <summary>EP</summary>\r\n            EP,\r\n            /// <summary>EP</summary>\r\n            GP,\r\n            /// <summary>EP</summary>\r\n            PP,\r\n            /// <summary>EP</summary>\r\n            UP\r\n        }\r\n\r\n        public enum reportingFrequencyTypes\r\n        {\r\n            /// <summary>Daily</summary>\r\n            Daily,\r\n            /// <summary>Every 10 days</summary>\r\n            TenDaily,\r\n            /// <summary>Monthly</summary>\r\n            Monthly,\r\n            /// <summary>Annual</summary>\r\n            Annual,\r\n            /// <summary>On grazing</summary>\r\n            OnGrazing\r\n        }\r\n\r\n        public enum urineReturnTypes\r\n        {\r\n            /// <summary>Uniform</summary>\r\n            UniformAcrossAllPatches,\r\n            /// <summary>Rotating in order</summary>\r\n            RotatingInOrder,\r\n            /// <summary>Random</summary>\r\n            Random,\r\n            /// <summary>Pseudo-random</summary>\r\n            PseudoRandom\r\n        }\r\n\r\n        public enum NutrientReturnTypes\r\n        {\r\n            /// <summary>Constant</summary>\r\n            Constant,\r\n            /// <summary>FromHarvest</summary>\r\n            FromHarvest,\r\n            /// <summary>SetMonthly</summary>\r\n            SetMonthly\r\n        }\r\n\r\n        private void SetSystemParams()\r\n        {\r\n            if (SystemID == systemTypes.A)\r\n            {\r\n                SoilType = \"HE\";\r\n                SimLocation = \"Rua\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.B)\r\n            {\r\n                SoilType = \"HE\";\r\n                SimLocation = \"Rua\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 150.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.C)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.D)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 250.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.E)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 400.0;\r\n                PastureType = \"GrassOnly\";\r\n            }\r\n            else if (SystemID == systemTypes.F)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n        }\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            sward = new Sward(myZone);\r\n\r\n            if (PatchType == patchTypes.EP)\r\n                NumPatches = NumPaddocks;\r\n            else if (PatchType == patchTypes.GP)\r\n                NumPatches = NumGPPatches;\r\n            else if (PatchType == patchTypes.PP)\r\n                NumPatches = NumGPPatches; // but will actually use this to set the size of the newly created patches\r\n            else if (PatchType == patchTypes.UP)\r\n                NumPatches = NumGPPatches;\r\n            else\r\n                throw new Exception(\"Patch type not catered for\");\r\n\r\n            if ((PatchType == patchTypes.GP) && (NumPaddocks > 1))\r\n                throw new Exception(\"Patch type GP may only have one paddock/zone\");\r\n            if ((PatchType == patchTypes.PP) && (NumPaddocks > 1))\r\n                throw new Exception(\"Patch type PP may only have one paddock/zone\");\r\n\r\n            NumPatchesForFertiliser = 1;  // in the future this might be > 1\r\n            if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)  // generate a return pattern up front\r\n            {\r\n                int MaxNumGrazings = (Clock.EndDate.Year - Clock.StartDate.Year + 1) * 52; //allow for a maximum of 1 per week\r\n\r\n                PseudoRandomSeq = new int[MaxNumGrazings * NumPatchesForFertiliser];\r\n                Random rndConstSeed = new Random((int)666);\r\n                string MyString = \"\";\r\n                for (int i = 0; i < (MaxNumGrazings * NumPatchesForFertiliser); i++)\r\n                {\r\n                    PseudoRandomSeq[i] = rndConstSeed.Next(0, NumPatches);  // will never select NumPatches \r\n                    MyString += Convert.ToString(PseudoRandomSeq[i]) + \" \";\r\n                }\r\n\r\n                summary.WriteMessage(this, \"The order of patch return will be: \" + MyString);\r\n            }\r\n\r\n            // Add patches\r\n            if (PatchType == patchTypes.GP)\r\n            {\r\n                SoilNitrogen.MaximumNitrogenAvailableToPlants = 0.45;\r\n                SoilNitrogen.NPartitionApproach = \"BasedOnConcentrationAndDelta\";\r\n                SoilNitrogen.AllowPatchAutoAmalgamation = \"No\";\r\n                SoilNitrogen.AutoAmalgamationApproach = \"CompareAll\";\r\n                SoilNitrogen.basePatchApproach = \"IDBased\";\r\n                SoilNitrogen.AllowPatchAmalgamationByAge = \"No\";\r\n                SoilNitrogen.PatchAgeForForcedMerge = 3.0;                                \r\n\r\n\r\n                int[] PatchToAddTo = new int[1];  //need an array variable for this\r\n                string[] PatchNmToAddTo = new string[1];  \r\n                int nPatchesAdded = 0;\r\n                double NewArea = 1.0 / NumPatches;\r\n\r\n                while (nPatchesAdded < NumPatches - 1)\r\n                {\r\n                    AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();\r\n                    NewPatch.DepositionType = \"ToNewPatch\";\r\n                    NewPatch.AreaFraction = NewArea;\r\n                    PatchToAddTo[0] = 0;\r\n                    PatchNmToAddTo[0] = \"0\";\r\n                    NewPatch.AffectedPatches_id = PatchToAddTo;\r\n                    NewPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                    NewPatch.SuppressMessages = \"no\";\r\n\r\n                    AddSoilCNPatch.Invoke(NewPatch);\r\n                    nPatchesAdded += 1;\r\n                }                \r\n\r\n                summary.WriteMessage(this, \"NumPatches at end of initialisation (GP):\" + SoilNitrogen.PatchCount.ToString());\r\n            }\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"Initialising the Manager for grazing, urine return and reporting\");\r\n\r\n            grazedToday = false;\r\n\r\n            // count the paddocks in the simulation\r\n            NumPaddocks = 0;   \r\n            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                NumPaddocks += 1;   \r\n            summary.WriteMessage(this, \"There are \" + NumPaddocks + \" in the simulation\");\r\n\r\n            MonthlyFertAmt = new double[] { 24, 19, 17, 12, 8, 5, 5, 10, 16, 19, 23, 25 };\r\n\r\n            summary.WriteMessage(this, \"Finished initialising the Manager for grazing, urine return and reporting\");\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {    \r\n\r\n            // if this is the start of the simulation then sort out the depth for the fertiliser (aka urine) placement\r\n            // can't do this in initialisation because of the module order\r\n            if (Clock.Today == Clock.StartDate)\r\n            {\r\n                FertPlacementDepth();\r\n                int i = -1;  // to use as a patch counter\r\n\r\n                iniOrgC = 0.0; \r\n                iniOrgN = 0.0;\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                {\r\n                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n                    i += 1;\r\n                    PatchCount = SoilNitrogen.PatchCount;\r\n\r\n                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    {\r\n                        iniOrgC += SoilNitrogen.TotalC[ii] / NumPaddocks; \r\n                        iniOrgN += SoilNitrogen.organic_n[ii] / NumPaddocks;\r\n                    }\r\n                }\r\n            }\r\n\r\n            DaysSinceCut += 1;\r\n            Harvested = 0.0;\r\n            HarvestedN = 0.0;\r\n            UreaReturned = 0.0;\r\n\r\n            bool isEndOfMonth = false;\r\n            if (Clock.Today.AddDays(1).Day == 1)\r\n                isEndOfMonth = true;\r\n\r\n            bool isEndOfYear = false;\r\n            if (Clock.Today.AddDays(1).DayOfYear == 1)\r\n                isEndOfYear = true;\r\n\r\n\r\n\r\n            CutNow = false;\r\n            grazedToday = false;\r\n            if ((CuttingFrequency == 0) && (isEndOfMonth))\r\n                CutNow = true;\r\n            else if ((DaysSinceCut >= CuttingFrequency) && (CuttingFrequency > 0))\r\n                CutNow = true;\r\n\r\n            // should reporting be done today?  Do this here as need to know if grazing will happen\r\n            if (ReportingFreq == reportingFrequencyTypes.Daily)\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day == 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (CutNow))\r\n                ReportToday = true;\r\n            else\r\n                ReportToday = false;\r\n\r\n            //if (Clock.Today == Clock.StartDate) CutNow = true;\r\n\r\n            if (CutNow)\r\n            {\r\n                //if(Clock.Today.Month < 3) Debugger.Break();\r\n\r\n                grazedToday = true;\r\n                summary.WriteMessage(this, \"Doing Cutting\");\r\n                DaysSinceCut = 0;\r\n                GrazingNumber += 1;  //was initialsed as -1 - this is used to pick the pseudo-random patch return number\r\n                // GetPatchForUrineReturn();  now called in the deposition routine\r\n\r\n                // do the cutting=grazing - it doesn't matter if there one (GP) or many (EP) physical paddocks in the simulation at this point\r\n                int i = -1;  // to use as a patch counter\r\n                Harvested = 0.0;\r\n                HarvestedN = 0.0;\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                {\r\n                    i += 1;\r\n                    var sward = new Sward(zone);\r\n                    sward.Graze(amount: CuttingResidual, type: \"SetResidueAmount\");\r\n                    if (PatchType == patchTypes.EP) {\r\n                        Harvested += sward.HarvestedWt;\r\n                        HarvestedN += sward.HarvestedN;\r\n                    } \r\n                    else \r\n                    {\r\n                        Harvested += sward.HarvestedWt / NumPaddocks;\r\n                        HarvestedN += sward.HarvestedN / NumPaddocks;\r\n                    }\r\n                }\r\n\r\n                if (NutrientReturnType == NutrientReturnTypes.FromHarvest)\r\n                {\r\n                    AmountFertNReturned = HarvestedN * 0.50;  // TODO yikes - probably should not have hard-coded this, if it is not FromHarvest then the value has been set in the manager parameters\r\n                    AmountDungNReturned = HarvestedN * 0.35;  // \r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n                else if (NutrientReturnType == NutrientReturnTypes.SetMonthly)\r\n                {\r\n                    AmountFertNReturned = MonthlyFertAmt[Clock.Today.Month - 1];\r\n                    AmountDungNReturned = AmountFertNReturned * (0.35 / 0.50);  // \r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n                else\r\n                {\r\n                    // urine and dung are set from the parameters\r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n\r\n\r\n                summary.WriteMessage(this, \"The amount of urea fertiliser to be returned to the whole paddock is \" + AmountFertNReturned);\r\n\r\n                DoUrineReturn();\r\n\r\n                //DoTramplingAndDungReturn();\r\n\r\n                summary.WriteMessage(this, \"Finished Cutting\");\r\n\r\n            } // this is the end of the CutNow section\r\n\r\n            if ((GeneralFertAmt > 0.0) && (Clock.Today.AddDays(1).Day == 1))\r\n            {\r\n                //DoFertiliser();\r\n            }\r\n\r\n\r\n\r\n            summary.WriteMessage(this, \"End of DoMgmt\");\r\n            //printMinN();\r\n        }\r\n\r\n        [EventSubscribe(\"EndOfDay\")]\r\n        private void OnEndOfDay(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"Start of EndOfDay\");\r\n            //printMinN();\r\n        }\r\n\r\n        public void DoTramplingAndDungReturn()\r\n        {\r\n            int i = -1;  // patch or paddock counter\r\n            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n            {\r\n                i += 1;\r\n                SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;\r\n                SurfaceOrganicMatter surfaceOM = Apsim.Find(zone, typeof(SurfaceOrganicMatter)) as SurfaceOrganicMatter; \r\n\r\n                // do some trampling of litter\r\n                // accelerate the movement of surface litter into the soil - do this before the dung is added\r\n                double temp = surfaceOM.Wt * 0.1;\r\n\r\n                TillageType trampling = new TillageType();\r\n                surfaceOM.Incorporate(fraction: (double)0.1, depth: (double)100.0);\r\n\r\n                summary.WriteMessage(this, \"For patch \" + i + \" the amount of litter trampled was \" + temp + \" and the remaining litter is \" + (surfaceOM.Wt));\r\n\r\n                // move the dung to litter - assume dung is 40% of that harvested and a C:N ratio of \r\n                BiomassRemovedType dung = new BiomassRemovedType();\r\n                dung.crop_type = \"RuminantDung_PastureFed\";\r\n                dung.dm_type = new string[] { \"RuminantDung_PastureFed\" };\r\n                dung.dlt_crop_dm = new float[] { Convert.ToSingle(AmountDungCReturned / 0.4) };  // \r\n                dung.dlt_dm_n = new float[] { Convert.ToSingle(AmountDungNReturned) };    // \r\n                dung.dlt_dm_p = new float[] { 0.0F };\r\n                dung.fraction_to_residue = new float[] { 1.0F };\r\n                BiomassRemoved.Invoke(dung);\r\n                summary.WriteMessage(this, \"For patch \" + i + \" the amount of dung DM added to the litter was \" + (AmountDungCReturned / 0.4) + \" and the amount of N added in the dung was \" + (AmountDungNReturned));\r\n\r\n            } \r\n        }\r\n        // this is the end of the trampling and dung patch/paddock section\r\n\r\n\r\n        public void printMinN()\r\n        {\r\n            List<IModel> zones = Apsim.FindAll(this, typeof(Zone));\r\n            Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first zone\r\n\r\n            for (int ii = 0; ii < (SoilNitrogen.PatchCount); ii++)\r\n            {\r\n                double MinNPatch = SoilNitrogen.PatchTotalUrea[ii] + SoilNitrogen.PatchTotalNH4[ii] + SoilNitrogen.PatchTotalNO3[ii];\r\n                summary.WriteMessage(this, \"Patch \" + ii + \":\" + MinNPatch);\r\n            }\r\n\r\n        }\r\n\r\n        public void DoUrineReturn()\r\n        {\r\n            if (PatchType == patchTypes.EP)\r\n            {                \r\n\r\n                GetPatchForUrineReturn();  //sets the value for PatchNumForFert\r\n                int i = -1; //to count the paddocks\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                {\r\n                    i += 1;\r\n                    if (i == PatchNumForFert)\r\n                    {\r\n                        Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;\r\n                        Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n\r\n                        double tempDepth = 0.0;\r\n                        for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                        {\r\n                            tempDepth += soil.Thickness[ii];\r\n                            thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * NumPatches * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));\r\n                        }\r\n                        UreaReturned += AmountFertNReturned;\r\n                    }\r\n                } \r\n\r\n            }\r\n            else if (PatchType == patchTypes.GP)\r\n            {\r\n                GetPatchForUrineReturn();  //sets the value for PatchNumForFert\r\n                int[] PatchToAddTo = new int[1];  //because need an array variable for this\r\n                string[] PatchNmToAddTo = new string[0];  //need an array variable for this\r\n                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));\r\n                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first\r\n                double[] UreaToAdd = new double[soil.Thickness.Length];  \r\n\r\n                for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;\r\n\r\n                UreaReturned += AmountFertNReturned;\r\n\r\n\r\n                AddSoilCNPatchType CurrentPatch = new AddSoilCNPatchType();\r\n                CurrentPatch.Sender = \"manager\";\r\n                CurrentPatch.DepositionType = \"ToSpecificPatch\";\r\n                PatchToAddTo[0] = PatchNumForFert;\r\n                CurrentPatch.AffectedPatches_id = PatchToAddTo;\r\n                CurrentPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                CurrentPatch.Urea = UreaToAdd;\r\n\r\n\r\n                summary.WriteMessage(this, \"Patch MinN prior to urine return:\");\r\n\r\n                //printMinN();\r\n                AddSoilCNPatch.Invoke(CurrentPatch); \r\n                summary.WriteMessage(this, \"Patch MinN after urine return:\");\r\n                //printMinN();\r\n            }\r\n            else if (PatchType == patchTypes.PP)\r\n            {\r\n                // create a new patch from base of area 1/NumGPPatches\r\n                // add the fertiliser to that patch\r\n                // set amalgamation autmomatic\r\n                List<IModel> zones = Apsim.FindAll(this, typeof(Zone));\r\n                Soil soil = Apsim.Find(zones[0], typeof(Soil)) as Soil; // Only one zone allowed for GP so use the first\r\n\r\n                double[] UreaToAdd = new double[soil.Thickness.Length];  \r\n\r\n                for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;\r\n\r\n                int[] PatchToAddTo = new int[1];\r\n                string[] PatchNmToAddTo = new string[0];  //need an array variable for this\r\n\r\n                UreaReturned += AmountFertNReturned;\r\n\r\n                AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();\r\n                NewPatch.DepositionType = \"ToNewPatch\";\r\n                NewPatch.AreaFraction = 1.0 / NumPatches;\r\n                PatchToAddTo[0] = 0;\r\n                NewPatch.AffectedPatches_id = PatchToAddTo;\r\n                NewPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                NewPatch.Urea = UreaToAdd;\r\n\r\n                summary.WriteMessage(this, \"UreaToAdd \" + UreaToAdd[0] + \" \" + UreaToAdd[1] + \" \" + UreaToAdd[2] + \" \" + UreaToAdd[3] + \" \" + UreaToAdd[4]);\r\n\r\n\r\n                AddSoilCNPatch.Invoke(NewPatch);\r\n\r\n                //throw new Exception(\"Have not set up the PP for DoUrineReturn yet\");\r\n            }\r\n            else if (PatchType == patchTypes.UP)\r\n            {\r\n                int i = -1;  // patch or paddock counter\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n                {\r\n                    i += 1;\r\n\r\n                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;\r\n                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n\r\n                    double tempDepth = 0.0;\r\n                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    {\r\n                        tempDepth += soil.Thickness[ii];\r\n                        thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soil.Thickness[ii] / 2));\r\n                    } \r\n                    UreaReturned += AmountFertNReturned;\r\n                }\r\n            }\r\n            else\r\n                throw new Exception(\"Patch type not catered for\");\r\n\r\n\r\n\r\n        }\r\n        // end of DoUrineReturn\r\n\r\n        public void GetPatchForUrineReturn()\r\n        {\r\n            \r\n            if (FertiliserReturnPattern == urineReturnTypes.UniformAcrossAllPatches)\r\n                PatchNumForFert = 0;  // but will not be used\r\n            else if (FertiliserReturnPattern == urineReturnTypes.RotatingInOrder)\r\n            {\r\n                PatchNumForFert += 1;  //increment the patch number\r\n                if (PatchNumForFert >= NumPatches)\r\n                    PatchNumForFert = 0;  // but reset back to the first patch if needed\r\n                //summary.WriteMessage(this, \"The patch for fertiliser return is \" + PatchNumForFert);\r\n            }\r\n            else if (FertiliserReturnPattern == urineReturnTypes.Random)\r\n            {\r\n                Random rnd = new Random();\r\n                PatchNumForFert = rnd.Next(0, NumPatches);\r\n                //summary.WriteMessage(this, \"The next random number patch for fertiliser return is \" + PatchNumForFert);\r\n            }\r\n            else if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)\r\n            {\r\n                PatchNumForFert = PseudoRandomSeq[GrazingNumber];\r\n                //summary.WriteMessage(this, \"The next pseudo-random number patch for fertiliser return is \" + PatchNumForFert);\r\n            }\r\n        }\r\n        // this is the end of GetPatchForUrineReturn\r\n\r\n\r\n        public void FertPlacementDepth()\r\n        {\r\n            // note that this only looks at the first paddock and assumes that all the paddocks are the same\r\n            int iii = -1;  // to use as a patch counter\r\n            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n            {\r\n                iii += 1;\r\n                if (iii == 0)\r\n                {\r\n                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n                    double tempDepth = 0.0;\r\n                    FertDepthPlacement = new double[soil.Thickness.Length];\r\n                    for (int i = 0; i <= (soil.Thickness.Length - 1); i++)\r\n                    {\r\n                        tempDepth += soil.Thickness[i];\r\n                        if (tempDepth <= FertiliserDepth)\r\n                        {\r\n                            FertDepthPlacement[i] = soil.Thickness[i] / FertiliserDepth;\r\n                        }\r\n                        else\r\n                        {\r\n                            FertDepthPlacement[i] = (FertiliserDepth - (tempDepth - soil.Thickness[i])) / (tempDepth - (tempDepth - soil.Thickness[i])) * soil.Thickness[i] / FertiliserDepth;\r\n                            FertDepthPlacement[i] = Math.Max(0.0, Math.Min(1.0, FertDepthPlacement[i]));\r\n                        }\r\n                        //if (FertiliserReturnPattern == \"UniformAcrossAllPatches\")\r\n                        //   summary.WriteMessage(this, \"The proportion of fertiliser applied to the \" + i + \"th layer will be \" + FertDepthPlacement[i]);\r\n                        //else\r\n                        summary.WriteMessage(this, \"The proportion of fertiliser (* NumPatches) applied to the \" + i + \"th layer will be \" + FertDepthPlacement[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        // this is the end of FertPlacementDepth\r\n\r\n\r\n        public void DoFertiliser()\r\n        {\r\n            bool ApplyFert = true; // the test for first day of the month has already been done\r\n            double NumMonths = 0;\r\n\r\n            if (GeneralFertType == \"Monthly\")\r\n                NumMonths = 12;\r\n            else if (GeneralFertType == \"NoWinter\")\r\n            {\r\n                if ((Clock.Today.Month < 5) || (Clock.Today.Month > 7))\r\n                {\r\n                    ApplyFert = true;\r\n                    NumMonths = 9;\r\n                }\r\n            }\r\n            else\r\n                throw new Exception(\"Wrong general fertiliser setting\");\r\n\r\n            if (ApplyFert)\r\n            {\r\n                foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))  // but actually there will only be a single paddock\r\n                {\r\n                    Fertiliser thisFert = Apsim.Find(zone, typeof(Fertiliser)) as Fertiliser;\r\n\r\n                    //thisFert.Apply((float)(GeneralFertAmt / NumMonths), (float) (0.0), \"urea_n\");\r\n                    thisFert.Apply(Amount: (double)(GeneralFertAmt / NumMonths), Type: Fertiliser.Types.UreaN, Depth: FertiliserDepth);\r\n                    summary.WriteMessage(this, \"Applying \" + (GeneralFertAmt / NumMonths) + \" kg of general fertiliser\");\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    [Serializable]\r\n    class Sward\r\n    {\r\n        private const double Epsilon = 0.000000001;\r\n        private List<PastureSpecies> species;\r\n\r\n        public Sward(Zone zone)\r\n        {\r\n            species = Apsim.ChildrenRecursively(zone, typeof(PastureSpecies)).Cast<PastureSpecies>().ToList();\r\n        }\r\n\r\n        public double HarvestableWt {    get { return species.Sum(sp => sp.HarvestableWt); }    }\r\n\r\n        public double HarvestedWt {    get { return species.Sum(sp => sp.HarvestableWt); }    }\r\n\r\n        public double HarvestedN {    get { return species.Sum(sp => sp.HarvestedN); } }\r\n\r\n        public double StandingHerbageWt {    get { return species.Sum(sp => sp.StandingHerbageWt); }    }\r\n\r\n        public bool IsAlive\r\n        {\r\n            get\r\n            {\r\n                bool alive = true;\r\n                species.ForEach(sp => alive = alive && sp.PlantStatus == \"alive\");\r\n                return alive;\r\n            }\r\n        }\r\n\r\n        /// <summary>Removes plant material simulating a graze event.</summary>\r\n        /// <param name=\"amount\">The DM amount (kg/ha)</param>\r\n        /// <param name=\"type\">How the amount is interpreted (SetResidueAmount or SetRemoveAmount)</param>\r\n        public void Graze(double amount, string type)\r\n        {\r\n            double amountAvailable = HarvestableWt;\r\n            if (IsAlive || (amountAvailable > Epsilon))\r\n            {\r\n                // Get the amount required to remove\r\n                double amountRequired;\r\n                if (type.ToLower() == \"setresidueamount\")\r\n                {\r\n                    // Remove all DM above given residual amount\r\n                    amountRequired = Math.Max(0.0, StandingHerbageWt - amount);\r\n                }\r\n                else if (type.ToLower() == \"setremoveamount\")\r\n                {\r\n                    // Remove a given amount\r\n                    amountRequired = Math.Max(0.0, amount);\r\n                }\r\n                else\r\n                {\r\n                    throw new Exception(\"Type of amount to remove on graze not recognized (use \\'SetResidueAmount\\' or \\'SetRemoveAmount\\'\");\r\n                }\r\n                // Get the actual amount to remove\r\n                double amountToRemove = Math.Max(0.0, Math.Min(amountRequired, amountAvailable));\r\n\r\n                // Get the amounts to remove by mySpecies:\r\n                if (amountToRemove > Epsilon)\r\n                {\r\n                    double[] fractionToRemove = new double[species.Count];\r\n                    for (int s = 0; s < species.Count; s++)\r\n                    {\r\n                        // get the fraction to required for each mySpecies, partition according to available DM to harvest\r\n                        fractionToRemove[s] = species[s].HarvestableWt / amountAvailable;\r\n\r\n                        // remove DM and N for each mySpecies (digestibility is also evaluated)\r\n                        species[s].RemoveBiomass(amountToRemove * fractionToRemove[s]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "CuttingFrequency",
                  "Value": "0"
                },
                {
                  "Key": "CuttingResidual",
                  "Value": "1000"
                },
                {
                  "Key": "NutrientReturnType",
                  "Value": "Constant"
                },
                {
                  "Key": "AmountFertNReturned",
                  "Value": "40"
                },
                {
                  "Key": "AmountDungNReturned",
                  "Value": "0"
                },
                {
                  "Key": "FertiliserDepth",
                  "Value": "200"
                },
                {
                  "Key": "FertiliserReturnPattern",
                  "Value": "RotatingInOrder"
                },
                {
                  "Key": "ReportingFreq",
                  "Value": "OnGrazing"
                },
                {
                  "Key": "PatchType",
                  "Value": "UP"
                },
                {
                  "Key": "NumGPPatches",
                  "Value": "1"
                },
                {
                  "Key": "SystemID",
                  "Value": "A"
                }
              ],
              "Name": "PatchManager",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using Models.Interfaces;\r\nusing System;\r\nusing Models.Core;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Zones;\r\nusing Models.AgPasture;\r\nusing System.Xml.Serialization;\r\nusing Models.Soils;\r\nusing Models.Surface;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System;\r\nusing System.Linq;\r\nusing Models.Interfaces;\r\n\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        [Link] private Clock Clock;\r\n        [Link] private Simulation Simulation;\r\n        [Link] private Soil soil;\r\n        [Link] private ISummary summary;\r\n        [Link] private Weather Weather;\r\n        [Link] private Zone zone;\r\n        public int PatchCount;\r\n        public int PaddockCount;\r\n        public double Grazed;\r\n        public double GrazedN;\r\n        public double UrineNReturned;\r\n        private double iniOrgC;\r\n        private double iniOrgN;\r\n        private double myVariable;\r\n        [Link(ByName = true)]\r\n        private ISolute NO3;\r\n        [Link(ByName = true)]\r\n        private ISolute NH4;\r\n        [Link(ByName = true)]\r\n        private ISolute Urea;\r\n        [Link(ByName = true)]\r\n        private SoilNitrogen SoilNitrogen;\r\n\r\n        private Zone[] Zones {get; set; }\r\n\r\n        private Models.Report.Report ReportingWithPatches;\r\n\r\n        [Description(\"Verbose reporting mode (True/False)\")]\r\n        public bool verbose { get; set; }\r\n\r\n        [Description(\"Name of the patch manager for input\")]\r\n        public string InputModule { get; set; }\r\n\r\n        [Description(\"Name of the report for output\")]\r\n        public string OutputModule { get; set; }\r\n\r\n        [Description(\"Frequency of reporting\")]\r\n        public reportingFrequencyTypes ReportingFreq { get; set; }\r\n\r\n        [XmlIgnore] public int DaysSinceReport { get; set; }\r\n        [XmlIgnore] public double NHA { get; set; }\r\n        [XmlIgnore] public double PGR { get; set; }\r\n        [XmlIgnore] public double HerbageGrazed { get; set; }\r\n        [XmlIgnore] public double HerbageGrazedN { get; set; }\r\n        [XmlIgnore] public double AreaUrinePatchesToday { get; set; }\r\n        [XmlIgnore] public double UreaReturned { get; set; }\r\n        [XmlIgnore] public double Fixation { get; set; }\r\n        [XmlIgnore] public double LeachN { get; set; }\r\n        [XmlIgnore] public double Denit { get; set; }\r\n        [XmlIgnore] public double DenitN2O { get; set; }\r\n        [XmlIgnore] public double OrgC { get; set; }\r\n        [XmlIgnore] public double OrgN { get; set; }\r\n        [XmlIgnore] public double dltOrgC { get; set; }\r\n        [XmlIgnore] public double dltOrgN { get; set; }\r\n        [XmlIgnore] public double MinN { get; set; }\r\n        [XmlIgnore] public double UreaN { get; set; }\r\n        [XmlIgnore] public double NH4N { get; set; }\r\n        [XmlIgnore] public double NO3N { get; set; }\r\n        [XmlIgnore] public double UreaAddedInGrazing { get; set; }\r\n\r\n        [XmlIgnore] public double[] MinNPatch { get; set; }\r\n\r\n\r\n\r\n\r\n        private bool ReportToday = false;      \r\n\r\n        public enum reportingFrequencyTypes\r\n        {\r\n            /// <summary>Daily</summary>\r\n            Daily,\r\n            /// <summary>Every 10 days</summary>\r\n            TenDaily,\r\n            /// <summary>Monthly</summary>\r\n            Monthly,\r\n            /// <summary>Annual</summary>\r\n            Annual,\r\n            /// <summary>On grazing</summary>\r\n            OnGrazing\r\n        }\r\n\r\n    \r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n\r\n               if (verbose)\r\n                summary.WriteMessage(this, \"Initialising the Manager for grazing, urine return and reporting\");\r\n            DaysSinceReport = 0;\r\n            PatchCount = SoilNitrogen.PatchCount;\r\n            PaddockCount=0;\r\n\r\n\r\n\r\n            // Get list of zones in the simulation\r\n            List<Zone> zones = new List<Zone>();\r\n\r\n            foreach (Zone zone in Apsim.FindAll(this.Parent, typeof(Zone)))\r\n            {\r\n                zones.Add(zone as Zone);\r\n                ReportingWithPatches = (Models.Report.Report)zone.Get(\"[\" + OutputModule+ \"]\");\r\n                PaddockCount++;\r\n            }\r\n            Zones = zones.ToArray();\r\n\r\n\r\n            //myVariable = (double)ManageGriddedPaddock.Get(\"Script.Var1\");\r\n            //double grazedN = ManageGriddedPaddock.Get(\"Script.grazedN\");\r\n\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"Finished initialising the Manager for grazing, urine return and reporting\");\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"DoDailyInitialisation\")]\r\n        private void OnDoDailyInitialisation(object sender, EventArgs e)\r\n        {    \r\n                    \r\n            if (verbose)\r\n                summary.WriteMessage(this, \"In Daily Initialisation for the Reporting Manager on \" + Clock.Today);\r\n            if(Clock.Today == Clock.StartDate) {\r\n\r\n                iniOrgC = 0.0; \r\n                iniOrgN = 0.0;            \r\n\r\n                foreach (Zone zone in Zones)\r\n                {\r\n                    SoilNitrogen soilN = Apsim.Find(zone, typeof(SoilNitrogen)) as SoilNitrogen;\r\n                    for (int ii = 0; ii < soil.Thickness.Length; ii++)\r\n                    {\r\n                        iniOrgC += soilN.TotalC[ii]; // TODO RJM Check this is right!\r\n                        iniOrgN += soilN.organic_n[ii];\r\n                    }\r\n                }\r\n            }        \r\n\r\n\r\n        }\r\n\r\n            \r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void DoManagement(object sender, EventArgs e)\r\n        {\r\n               bool isEndOfMonth = false;\r\n            if (Clock.Today.AddDays(1).Day == 1) \r\n                isEndOfMonth = true;\r\n            \r\n\r\n            bool isEndOfYear = false;\r\n            if (Clock.Today.Day == 31 && Clock.Today.Month == 12)\r\n                isEndOfYear = true;\r\n\r\n\r\n            bool GrazedToday = (bool) Apsim.Get(Simulation, InputModule + \".Script.grazedToday\"); \r\n\r\n            // should reporting be done today?  \r\n            if (ReportingFreq == reportingFrequencyTypes.Daily)\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day == 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (GrazedToday))\r\n                ReportToday = true;\r\n            else\r\n                ReportToday = false;\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"Finished Prepare for the Reporting Manager on \" + Clock.Today);\r\n        } \r\n\r\n        [EventSubscribe(\"EndOfDay\")]\r\n        private void OnEndOfDay(object sender, EventArgs e)\r\n        {\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"In EndOfDay for the Reporting Manager on  \" + Clock.Today);\r\n\r\n            DaysSinceReport += 1;\r\n\r\n\r\n\r\n            foreach (Zone zone in Zones)\r\n            {\r\n                var sward = Apsim.Children(zone, typeof(PastureSpecies)).Cast<PastureSpecies>().ToList();\r\n                  NHA += sward.Sum(species => species.HerbageGrowthWt) / PaddockCount;\r\n                PGR = NHA;  // divide this by the number of days just before reporting\r\n                Fixation += sward.Sum(species => species.FixedN) / PaddockCount;\r\n\r\n                Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n                LeachN += soil.SoilWater.FlowNO3[soil.SoilWater.FlowNO3.Length-1]/PaddockCount;  // only take the deepest element\r\n\r\n                for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                {\r\n                    Denit += SoilNitrogen.Denitrification[ii]/PaddockCount;\r\n                    DenitN2O += SoilNitrogen.n2o_atm[ii]/PaddockCount;\r\n                }\r\n\r\n\r\n                Grazed = (double)zone.Get(\"[\" + InputModule + \"].Script.Harvested\")/PaddockCount;\r\n                GrazedN = (double)zone.Get(\"[\" + InputModule + \"].Script.HarvestedN\")/PaddockCount;\r\n                UrineNReturned = (double)zone.Get(\"[\" + InputModule + \"].Script.UreaReturned\")/PaddockCount;\r\n                //AreaUrinePatchesToday = (double)zone.Get(\"[\" + InputModule + \"].Script.areaUrinePatchesToday\");\r\n            } \r\n\r\n            HerbageGrazed += Grazed;\r\n            HerbageGrazedN += GrazedN;\r\n            UreaReturned += UrineNReturned;\r\n\r\n            if(ReportToday) {\r\n\r\n                OrgC = 0.0;\r\n                OrgN = 0.0;\r\n                UreaN = 0.0;\r\n                NH4N = 0.0;\r\n                NO3N = 0.0;\r\n                MinN = 0.0;\r\n\r\n\r\n                Soil soil1 = Apsim.Find(Zones[0], typeof(Soil)) as Soil;\r\n\r\n                if(PaddockCount>1)\r\n                    MinNPatch = new double[PaddockCount];\r\n                else \r\n                    MinNPatch = new double[SoilNitrogen.PatchCount];\r\n\r\n\r\n                int currentZoneNum = 0;\r\n                foreach (Zone zone in Zones)\r\n                {\r\n                    Soil soil = Apsim.Find(zone, typeof(Soil)) as Soil;\r\n\r\n                    double minNPatch = 0;\r\n\r\n                    for (int ii = 0; ii <= (soil.Thickness.Length - 1); ii++)\r\n                    {\r\n                        OrgC += SoilNitrogen.TotalC[ii]/PaddockCount;  \r\n                        OrgN += SoilNitrogen.organic_n[ii]/PaddockCount;\r\n                        UreaN += Urea.kgha[ii]/PaddockCount;\r\n                        NH4N += NH4.kgha[ii]/PaddockCount;\r\n                        NO3N += NO3.kgha[ii]/PaddockCount;\r\n                        MinN = UreaN + NH4N + NO3N;                    \r\n                        minNPatch += Urea.kgha[ii] + NH4.kgha[ii] + NO3.kgha[ii];\r\n                    }\r\n\r\n\r\n                    //MinN = (UreaN*PaddockCount + NH4N*PaddockCount + NO3N*PaddockCount);\r\n                    if(PaddockCount>1) MinNPatch[currentZoneNum] = minNPatch;\r\n\r\n                    dltOrgC = OrgC - iniOrgC; \r\n                    dltOrgN = OrgN - iniOrgN;\r\n                    iniOrgC = OrgC; // ready for the next calculation of change in pools\r\n                    iniOrgN = OrgN;\r\n                    currentZoneNum++;\r\n                }\r\n\r\n                if(SoilNitrogen.PatchCount>1) {  // TODO will break if there is more than one paddock/zone AND more than one patch                    \r\n\r\n                    for (int ii = 0; ii < (SoilNitrogen.PatchCount); ii++)\r\n                    {\r\n                        MinNPatch[ii] = SoilNitrogen.PatchTotalUrea[ii]+SoilNitrogen.PatchTotalNH4[ii] + SoilNitrogen.PatchTotalNO3[ii];\r\n                    }\r\n                }\r\n\r\n                PGR = NHA / DaysSinceReport; \r\n\r\n                ReportingWithPatches.DoOutput();\r\n\r\n                // now zero the reported variables\r\n                DaysSinceReport = 0;\r\n                HerbageGrazed = 0.0;\r\n                HerbageGrazedN = 0.0;\r\n                DaysSinceReport = 0;\r\n                NHA = 0;\r\n                PGR = 0;\r\n                UreaReturned = 0;\r\n                Fixation = 0;\r\n                LeachN = 0;\r\n                Denit = 0;\r\n                DenitN2O = 0;\r\n                OrgC = 0;\r\n                OrgN = 0;\r\n                MinN = 0;\r\n                UreaN = 0;\r\n                NH4N = 0;\r\n                NO3N = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "verbose",
                  "Value": "False"
                },
                {
                  "Key": "InputModule",
                  "Value": "PatchManager"
                },
                {
                  "Key": "OutputModule",
                  "Value": "ReportingWithPatches"
                },
                {
                  "Key": "ReportingFreq",
                  "Value": "Daily"
                }
              ],
              "Name": "ReportingWithPatchesVariables",
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report.Report, Models",
              "VariableNames": [
                "Parent.Name as Zone",
                "[Clock].Today as Date",
                "[Clock].Today.Month as Month",
                "[Clock].Today.Month as Year",
                "[ReportingWithPatchesVariables]Script.UreaReturned as UrineNReturned",
                "[ReportingWithPatchesVariables]Script.NHA as NHA",
                "[PatchManager]Script.NumPatches as NumPatches",
                "[ReportingWithPatchesVariables]Script.AreaUrinePatchesToday as AreaUrinePatchesToday",
                "[ReportingWithPatchesVariables]Script.HerbageGrazed as HerbageGrazed",
                "[ReportingWithPatchesVariables]Script.HerbageGrazedN as HerbageGrazedN",
                "[ReportingWithPatchesVariables]Script.LeachN as LeachN",
                "[ReportingWithPatchesVariables]Script.Denit as Denit",
                "[ReportingWithPatchesVariables]Script.Fixation as Fixation",
                "[ReportingWithPatchesVariables]Script.MinN as MinN",
                "[ReportingWithPatchesVariables]Script.UreaN as UreaN",
                "[ReportingWithPatchesVariables]Script.NH4N as NH4N",
                "[ReportingWithPatchesVariables]Script.NO3N as NO3N",
                "[ReportingWithPatchesVariables]Script.dltOrgC as dltOrgC",
                "[ReportingWithPatchesVariables]Script.dltOrgN as dltOrgN"
              ],
              "EventNames": [
                ""
              ],
              "Name": "ReportingWithPatches",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Zone, Models",
              "Area": 1.0,
              "Slope": 0.0,
              "AspectAngle": 0.0,
              "Altitude": 50.0,
              "Name": "Paddock",
              "Children": [
                {
                  "$type": "Models.Manager, Models",
                  "Code": "using System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Diagnostics; // used with Debugger.Break(); to debug manager scripts\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        //Communication to other modules\r\n        [Link] ISummary summary = null;\r\n        [Link] Irrigation irrigation;\r\n        [Link] Clock Clock;\r\n        [Link] Soil soil;\r\n        [Link] Weather Met; \r\n        [Link(IsOptional = true)] IPlant existingCrop;\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public answerTypes allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string IrrigStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string IrrigEnd { get; set; }\r\n        [Description(\"Enter the depth to which water deficit is computed (mm)\")]\r\n        public double SoilDepth { get; set; }\r\n        [Description(\"PAW below which soil is considered 'shallow' (mm)\")]\r\n        public double CritPAWForShallow { get; set; }\r\n        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")]\r\n        public double CritRainToPause { get; set; }\r\n        [Description(\"Number of days to pause irrigator after critical rainfall (days)\")]\r\n        public double DaysToPauseOnCritRain { get; set; }\r\n\r\n        [Description(\"Shallow Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnShallow { get; set; }\r\n        [Description(\"Shallow Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtShallow { get; set; }\r\n        [Description(\"Shallow Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitShallow { get; set; }\r\n        [Description(\"Shallow Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffShallow { get; set; }\r\n\r\n        [Description(\"Deep Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnDeep { get; set; }\r\n        [Description(\"Deep Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtDeep { get; set; }\r\n        [Description(\"Deep Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitDeep { get; set; }\r\n        [Description(\"Deep Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffDeep { get; set; }\r\n\r\n        // Outputs\r\n        public double TodayDeficit { get; set; }\r\n        public double TodayDeficit_nve { get; set; }\r\n        public double IrrigDay { get; set; }\r\n        public double SoilPAW { get; set; }\r\n        public double IrrigDeficit { get; set; }\r\n        public double IrrigReturn { get; set; }\r\n        public double IrrigAmt { get; set; }\r\n        public double IrrigEff { get; set; }\r\n        public double Rain3 { get; set; }\r\n\r\n        public double Days2Pause { get; set; }\r\n\r\n        // internal use\r\n        private DateTime StartDate;               //The date when irrigation start (in date format)\r\n        private DateTime EndDate;                 //The date when irrigation finish (in date format)\r\n        private double RainToday=0;\r\n        public double[] Rain_3;\r\n\r\n        public enum answerTypes\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialising          \");\r\n            summary.WriteMessage(this, \"\");\r\n\r\n            IrrigDay = 5000;  //so will reset to 1 on first day\r\n              StartDate = DateTime.Parse(IrrigStart);\r\n              EndDate = DateTime.Parse(IrrigEnd);\r\n\r\n            Rain3 = 0;\r\n            Rain_3 = new double[4];\r\n            Rain_3[0] = 0;\r\n            Rain_3[1] = 0;\r\n            Rain_3[2] = 0;\r\n\r\n              SoilPAW = 0.0;\r\n\r\n              double[] sw_dul = soil.DULmm;\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) \r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n              }\r\n\r\n              if(SoilPAW <= CritPAWForShallow) {      \r\n                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                IrrigReturn = IrrigReturnShallow;\r\n                IrrigAmt = IrrigAmtShallow;\r\n                IrrigEff = IrrigEffShallow ;           \r\n                summary.WriteMessage(this, \"  Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW);\r\n            } \r\n            else \r\n            {\r\n                IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                IrrigReturn = IrrigReturnDeep;\r\n                IrrigAmt = IrrigAmtDeep;\r\n                IrrigEff = IrrigEffDeep;\r\n                summary.WriteMessage(this, \"  Soil is considered to be deep\");\r\n            }\r\n\r\n            summary.WriteMessage(this, \"  Irrigation critical deficit (mm): \" + IrrigDeficit);\r\n            summary.WriteMessage(this, \"          Irrigation return (days): \" + IrrigReturn);\r\n            summary.WriteMessage(this, \"     Irrigation pumped amount (mm): \" + IrrigAmt);\r\n            summary.WriteMessage(this, \"         Irrigation efficiency (%): \" + IrrigEff);\r\n            summary.WriteMessage(this, \"\");\r\n            summary.WriteMessage(this, \"                CentrePivot initialised\");\r\n            summary.WriteMessage(this, \"==================================================\");\r\n            \r\n        }\r\n\r\n        [EventSubscribe(\"Commencing\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n       [EventSubscribe(\"PreparingNewWeatherData\")]\r\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\r\n        {\r\n            RainToday = Met.Rain; //takes note of how much rain was due to fall today        \r\n        }\r\n\r\n        //[EventSubscribe(\"DoDailyInitialisation\")]\r\n        //private void OnDoDailyInitialisation(object sender, EventArgs e) \r\n        //{\r\n        //}\r\n\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            int rain=0;\r\n\r\n            Rain_3[2] = Rain_3[1];\r\n            Rain_3[1] = Rain_3[0];\r\n            Rain_3[0] = RainToday;\r\n            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days\r\n            if(Rain3 >= CritRainToPause)\r\n                Days2Pause = DaysToPauseOnCritRain;\r\n            else\r\n                Days2Pause = Days2Pause - 1;\r\n\r\n            double[] sw_dul = soil.DULmm;\r\n            double[] sw_sw = soil.Thickness;  // ??? was MySwim.sw_dep\r\n              double[] sw_15 = soil.LL15mm;  \r\n              double MySoilDepth = 0;\r\n\r\n            TodayDeficit = 0.0;\r\n            SoilPAW = 0.0;\r\n\r\n              for(int z=0;z<soil.Thickness.Length;z++) {\r\n                  MySoilDepth+=soil.Thickness[z];\r\n                  if (MySoilDepth<= SoilDepth) {\r\n                      SoilPAW+=sw_dul[z] - sw_15[z];    \r\n                      TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);\r\n                  }\r\n              }\r\n            TodayDeficit_nve = -1 * TodayDeficit;\r\n\r\n            if (isBetween(Clock.Today, StartDate, EndDate)) {\r\n                 if(SoilPAW <= CritPAWForShallow) {      \r\n                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                    IrrigReturn = IrrigReturnShallow;\r\n                    IrrigAmt = IrrigAmtShallow;\r\n                    IrrigEff = IrrigEffShallow ;           \r\n                } \r\n                else \r\n                {\r\n                    IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                    IrrigReturn = IrrigReturnDeep;\r\n                    IrrigAmt = IrrigAmtDeep;\r\n                    IrrigEff = IrrigEffDeep;\r\n                }\r\n\r\n                if(Days2Pause < 0.5) {\r\n                    IrrigDay = IrrigDay + 1;\r\n                    if(IrrigDay > IrrigReturn)\r\n                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    \r\n\r\n                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes)) {\r\n                        if(IrrigDay == 1){\r\n                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));\r\n                            //summary.WriteMessage(this, \"Rain today was \" + RainToday + \". Applying \" + AmountToApply+ \" mm of irrigation\");\r\n                            irrigation.Apply(AmountToApply);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n",
                  "Parameters": [
                    {
                      "Key": "allowIrrigation",
                      "Value": "yes"
                    },
                    {
                      "Key": "IrrigStart",
                      "Value": "1-sep"
                    },
                    {
                      "Key": "IrrigEnd",
                      "Value": "30-apr"
                    },
                    {
                      "Key": "SoilDepth",
                      "Value": "500"
                    },
                    {
                      "Key": "CritPAWForShallow",
                      "Value": "60"
                    },
                    {
                      "Key": "CritRainToPause",
                      "Value": "30"
                    },
                    {
                      "Key": "DaysToPauseOnCritRain",
                      "Value": "3"
                    },
                    {
                      "Key": "IrrigReturnShallow",
                      "Value": "2"
                    },
                    {
                      "Key": "IrrigAmtShallow",
                      "Value": "10"
                    },
                    {
                      "Key": "PercPAWIrrigDeficitShallow",
                      "Value": "30"
                    },
                    {
                      "Key": "IrrigEffShallow",
                      "Value": "100"
                    },
                    {
                      "Key": "IrrigReturnDeep",
                      "Value": "4"
                    },
                    {
                      "Key": "IrrigAmtDeep",
                      "Value": "20"
                    },
                    {
                      "Key": "PercPAWIrrigDeficitDeep",
                      "Value": "25"
                    },
                    {
                      "Key": "IrrigEffDeep",
                      "Value": "100"
                    },
                    {
                      "Key": "TodayDeficit",
                      "Value": "123.894"
                    },
                    {
                      "Key": "TodayDeficit_nve",
                      "Value": "-123.894"
                    },
                    {
                      "Key": "IrrigDay",
                      "Value": "3"
                    },
                    {
                      "Key": "SoilPAW",
                      "Value": "63.65"
                    },
                    {
                      "Key": "IrrigDeficit",
                      "Value": "25"
                    },
                    {
                      "Key": "IrrigReturn",
                      "Value": "4"
                    },
                    {
                      "Key": "IrrigAmt",
                      "Value": "20"
                    },
                    {
                      "Key": "IrrigEff",
                      "Value": "100"
                    },
                    {
                      "Key": "Rain3",
                      "Value": "0"
                    },
                    {
                      "Key": "Days2Pause",
                      "Value": "-80"
                    }
                  ],
                  "Name": "CentrePivot",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                  "Canopies": [],
                  "InitialResidueName": "grass",
                  "InitialResidueType": "grass",
                  "InitialResidueMass": 500.0,
                  "InitialStandingFraction": 0.0,
                  "InitialCPR": 0.0,
                  "InitialCNR": 15.0,
                  "FractionFaecesAdded": 1.0,
                  "ResourceName": "SurfaceOrganicMatter",
                  "Name": "SurfaceOrganicMatter",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.MicroClimate, Models",
                  "a_interception": 0.0,
                  "b_interception": 1.0,
                  "c_interception": 0.0,
                  "d_interception": 0.0,
                  "soil_albedo": 0.23,
                  "SoilHeatFluxFraction": 0.4,
                  "MinimumHeightDiffForNewLayer": 0.0,
                  "NightInterceptionFraction": 0.5,
                  "ReferenceHeight": 2.0,
                  "Name": "MicroClimate",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Irrigation, Models",
                  "Name": "Irrigation",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Fertiliser, Models",
                  "Name": "Fertiliser",
                  "Children": [],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Soil, Models",
                  "RecordNumber": 0,
                  "ASCOrder": null,
                  "ASCSubOrder": null,
                  "SoilType": "NZ_Sedimentary",
                  "LocalName": "Lismore",
                  "Site": "Winchmore",
                  "NearestTown": "Ashburton",
                  "Region": "Canterbury",
                  "State": null,
                  "Country": "New Zealand",
                  "NaturalVegetation": null,
                  "ApsoilNumber": null,
                  "Latitude": -48.48,
                  "Longitude": 0.0,
                  "LocationAccuracy": null,
                  "DataSource": null,
                  "Comments": null,
                  "Name": "Soil",
                  "Children": [
                    {
                      "$type": "Models.Soils.InitialWater, Models",
                      "PercentMethod": 0,
                      "FractionFull": 0.987012987012987,
                      "DepthWetSoil": "NaN",
                      "RelativeTo": null,
                      "Name": "Initial water",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Physical, Models",
                      "Depth": [
                        "0-15",
                        "15-30",
                        "30-50",
                        "50-65",
                        "65-90",
                        "90-120",
                        "120-150"
                      ],
                      "Thickness": [
                        150.0,
                        150.0,
                        200.0,
                        150.0,
                        250.0,
                        300.0,
                        300.0
                      ],
                      "ParticleSizeClay": [
                        18.333333333333332,
                        15.0,
                        12.0,
                        10.666666666666666,
                        8.0,
                        6.0,
                        5.0
                      ],
                      "ParticleSizeSand": null,
                      "ParticleSizeSilt": null,
                      "BD": [
                        1.3,
                        1.35,
                        1.0,
                        0.53,
                        0.31,
                        0.3,
                        0.3
                      ],
                      "AirDry": [
                        0.05,
                        0.12,
                        0.015,
                        0.015,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "LL15": [
                        0.15,
                        0.14,
                        0.055,
                        0.015,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "DUL": [
                        0.36,
                        0.34,
                        0.19,
                        0.065,
                        0.04,
                        0.03,
                        0.03
                      ],
                      "SAT": [
                        0.45,
                        0.43,
                        0.25,
                        0.15,
                        0.11,
                        0.11,
                        0.11
                      ],
                      "KS": [
                        5000.0,
                        2500.0,
                        3000.0,
                        10000.0,
                        17500.0,
                        20000.0,
                        20000.0
                      ],
                      "BDMetadata": null,
                      "AirDryMetadata": null,
                      "LL15Metadata": null,
                      "DULMetadata": null,
                      "SATMetadata": null,
                      "KSMetadata": null,
                      "Name": "Physical",
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.14,
                            0.14,
                            0.03,
                            0.03,
                            0.03,
                            0.03,
                            0.03
                          ],
                          "KL": [
                            0.1,
                            0.1,
                            0.1,
                            0.02,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "AGPRyegrassSoil",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.14,
                            0.14,
                            0.03,
                            0.03,
                            0.03,
                            0.03,
                            0.03
                          ],
                          "KL": [
                            0.1,
                            0.1,
                            0.1,
                            0.02,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "AGPWhiteCloverSoil",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilWater, Models",
                      "SummerDate": "1-Nov",
                      "SummerU": 6.0,
                      "SummerCona": 3.5,
                      "WinterDate": "1-apr",
                      "WinterU": 2.0,
                      "WinterCona": 2.0,
                      "DiffusConst": 88.0,
                      "DiffusSlope": 35.0,
                      "Salb": 0.13,
                      "CN2Bare": 73.0,
                      "CNRed": 20.0,
                      "CNCov": 0.8,
                      "slope": 0.0,
                      "discharge_width": 0.0,
                      "catchment_area": 0.0,
                      "max_pond": 0.0,
                      "Thickness": [
                        100.0,
                        200.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "Depth": [
                        "0-10",
                        "10-30",
                        "30-60",
                        "60-90",
                        "90-120",
                        "120-150",
                        "150-180"
                      ],
                      "SWCON": [
                        0.4,
                        0.5,
                        0.6,
                        0.6,
                        0.8,
                        0.8,
                        0.8
                      ],
                      "KLAT": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "PrecipitationInterception": 0.0,
                      "Name": "SoilWater",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Organic, Models",
                      "Depth": [
                        "0-15",
                        "15-30",
                        "30-50",
                        "50-65",
                        "65-90",
                        "90-120",
                        "120-150"
                      ],
                      "FOMCNRatio": 40.0,
                      "Thickness": [
                        150.0,
                        150.0,
                        200.0,
                        150.0,
                        250.0,
                        300.0,
                        300.0
                      ],
                      "Carbon": [
                        3.0,
                        1.0,
                        0.6,
                        0.4,
                        0.25,
                        0.15,
                        0.1
                      ],
                      "SoilCNRatio": [
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0
                      ],
                      "FBiom": [
                        0.04,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.0,
                        0.0
                      ],
                      "FInert": [
                        0.5,
                        0.7,
                        0.83,
                        0.9,
                        0.95,
                        0.99,
                        0.99
                      ],
                      "FOM": [
                        331.337020409173,
                        245.46050190550559,
                        164.53709493722965,
                        121.89207790753734,
                        73.931282427002344,
                        40.574348067292682,
                        22.267674346259405
                      ],
                      "Name": "Organic",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Chemical, Models",
                      "Depth": [
                        "0-10",
                        "10-30",
                        "30-60",
                        "60-90",
                        "90-120",
                        "120-150",
                        "150-180"
                      ],
                      "Thickness": [
                        100.0,
                        200.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "NO3N": [
                        7.619,
                        7.27,
                        3.8709999999999991,
                        3.84,
                        3.81,
                        3.7789999999999995,
                        3.6910000000000007
                      ],
                      "NH4N": [
                        0.132,
                        0.132,
                        0.132,
                        0.13200000000000003,
                        0.13199999999999998,
                        0.13199999999999998,
                        0.13199999999999998
                      ],
                      "PH": [
                        5.9,
                        5.9,
                        5.9,
                        5.9,
                        5.9,
                        5.9,
                        5.9
                      ],
                      "CL": null,
                      "EC": null,
                      "ESP": null,
                      "Name": "Chemical",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Sample, Models",
                      "Depth": [
                        "0-10",
                        "10-30",
                        "30-60",
                        "60-90",
                        "90-120",
                        "120-150",
                        "150-180"
                      ],
                      "Thickness": [
                        100.0,
                        200.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "NO3N": null,
                      "NH4N": null,
                      "SW": null,
                      "OC": null,
                      "EC": null,
                      "CL": null,
                      "ESP": null,
                      "PH": null,
                      "SWUnits": 0,
                      "OCUnits": 0,
                      "PHUnits": 0,
                      "Name": "Initial nitrogen",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogen, Models",
                      "fom_types": [
                        "default",
                        "manure",
                        "mucuna",
                        "lablab",
                        "shemp",
                        "stable"
                      ],
                      "fract_carb": [
                        0.2,
                        0.3,
                        0.54,
                        0.57,
                        0.45,
                        0.0
                      ],
                      "fract_cell": [
                        0.7,
                        0.3,
                        0.37,
                        0.37,
                        0.47,
                        0.1
                      ],
                      "fract_lign": [
                        0.1,
                        0.4,
                        0.09,
                        0.06,
                        0.08,
                        0.9
                      ],
                      "Name": "SoilNitrogen",
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilNitrogenNO3, Models",
                          "Name": "NO3",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenNH4, Models",
                          "Name": "NH4",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenUrea, Models",
                          "Name": "Urea",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenPlantAvailableNO3, Models",
                          "Name": "PlantAvailableNO3",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenPlantAvailableNH4, Models",
                          "Name": "PlantAvailableNH4",
                          "Children": [],
                          "IncludeInDocumentation": true,
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.CERESSoilTemperature, Models",
                      "Name": "CERESSoilTemperature",
                      "Children": [],
                      "IncludeInDocumentation": true,
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "InitialShootDM": 1500.0,
                  "InitialRootDM": 450.0,
                  "InitialRootDepth": 750.0,
                  "ResourceName": "AGPRyegrass",
                  "Name": "AGPRyegrass",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "InitialShootDM": 500.0,
                  "InitialRootDM": 150.0,
                  "InitialRootDepth": 350.0,
                  "ResourceName": "AGPWhiteClover",
                  "Name": "AGPWhiteClover",
                  "IncludeInDocumentation": true,
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 3,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": true,
              "CrossesAtZero": false
            },
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 0,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": false,
              "CrossesAtZero": false
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "NHA",
          "Children": [
            {
              "$type": "Models.Graph.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": "SimulationName",
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "Checkpoint": "Current",
              "TableName": "ReportingWithPatches",
              "XFieldName": "Date",
              "YFieldName": "NHA",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": true,
              "CumulativeX": false,
              "Filter": null,
              "Name": "NHA",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 3,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": true,
              "CrossesAtZero": false
            },
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 0,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": false,
              "CrossesAtZero": false
            }
          ],
          "LegendPosition": 1,
          "LegendOrientation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Denitrification",
          "Children": [
            {
              "$type": "Models.Graph.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": "SimulationName",
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "Checkpoint": "Current",
              "TableName": "ReportingWithPatches",
              "XFieldName": "Date",
              "YFieldName": "Denit",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": true,
              "CumulativeX": false,
              "Filter": null,
              "Name": "denit",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 3,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": true,
              "CrossesAtZero": false
            },
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 0,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": false,
              "CrossesAtZero": false
            }
          ],
          "LegendPosition": 1,
          "LegendOrientation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Leaching",
          "Children": [
            {
              "$type": "Models.Graph.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": "SimulationName",
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "Checkpoint": "Current",
              "TableName": "ReportingWithPatches",
              "XFieldName": "Date",
              "YFieldName": "LeachN",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": true,
              "CumulativeX": false,
              "Filter": null,
              "Name": "leach",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 3,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": true,
              "CrossesAtZero": false
            },
            {
              "$type": "Models.Graph.Axis, Models",
              "Type": 0,
              "Title": null,
              "Inverted": false,
              "Minimum": "NaN",
              "Maximum": "NaN",
              "Interval": "NaN",
              "DateTimeAxis": false,
              "CrossesAtZero": false
            }
          ],
          "LegendPosition": 1,
          "LegendOrientation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Fixation",
          "Children": [
            {
              "$type": "Models.Graph.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": "SimulationName",
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "Checkpoint": "Current",
              "TableName": "ReportingWithPatches",
              "XFieldName": "Date",
              "YFieldName": "Fixation",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": true,
              "Cumulative": true,
              "CumulativeX": false,
              "Filter": null,
              "Name": "fix",
              "Children": [],
              "IncludeInDocumentation": true,
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "IncludeInDocumentation": true,
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "IncludeInDocumentation": true,
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "IncludeInDocumentation": true,
  "Enabled": true,
  "ReadOnly": false
}