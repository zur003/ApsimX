{
  "$type": "Models.Core.Simulations, Models",
  "ExplorerWidth": 401,
  "Version": 159,
  "Name": "Simulations",
  "ResourceName": null,
  "Children": [
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.PostSimulationTools.ExcelInput, Models",
          "FileNames": [
            "PatchyMcPatchFace.xlsx"
          ],
          "SheetNames": [
            "Sheet1"
          ],
          "Name": "ExcelInput",
          "ResourceName": null,
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.PostSimulationTools.PredictedObserved, Models",
          "PredictedTableName": "ReportingWithPatches",
          "ObservedTableName": "ReportingWithPatches",
          "FieldNameUsedForMatch": "SimulationName",
          "FieldName2UsedForMatch": "Date",
          "FieldName3UsedForMatch": null,
          "FieldName4UsedForMatch": null,
          "AllColumns": false,
          "Name": "PredictedObserved",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Tests, Models",
              "AcceptedStats": [
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "AreaUrinePatchesToday",
                  "n": 1098,
                  "Slope": "NaN",
                  "Intercept": "NaN",
                  "SEslope": "NaN",
                  "SEintercept": "NaN",
                  "R2": "NaN",
                  "RMSE": 0.0,
                  "NSE": "NaN",
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": "NaN"
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "Denit",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "dltOrgC",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "dltOrgN",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "Fixation",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "HerbageGrazed",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "HerbageGrazedN",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "LeachN",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "MinN",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "Month",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "NH4N",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "NHA",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "NO3N",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "NumPatches",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "UreaN",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "UrineNReturned",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                },
                {
                  "$type": "APSIM.Shared.Utilities.MathUtilities+RegrStats, APSIM.Shared",
                  "Name": "Year",
                  "n": 1098,
                  "Slope": 1.0,
                  "Intercept": 0.0,
                  "SEslope": 0.0,
                  "SEintercept": 0.0,
                  "R2": 1.0,
                  "RMSE": 0.0,
                  "NSE": 1.0,
                  "ME": 0.0,
                  "MAE": 0.0,
                  "RSR": 0.0
                }
              ],
              "AcceptedStatsName": "Name n Slope Intercept SEslope SEintercept R2 RMSE NSE ME MAE RSR",
              "POName": "PredictedObserved",
              "Name": "Tests",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            }
          ],
          "Enabled": false,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Factorial.Experiment, Models",
      "DisabledSimNames": null,
      "Name": "Patch",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Factorial.Factors, Models",
          "Name": "Factors",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Factorial.CompositeFactor, Models",
              "Specifications": [
                "[PatchManager].Script.PatchType = EP",
                "[PatchManager].Script.SystemID = A",
                "[PatchManager].Script.NumPatches = 10"
              ],
              "Paths": null,
              "Values": null,
              "Name": "Explicit",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.CompositeFactor, Models",
              "Specifications": [
                "[PatchManager].Script.PatchType = GP",
                "[PatchManager].Script.SystemID = A",
                "[PatchManager].Script.NumPatches = 10"
              ],
              "Paths": null,
              "Values": null,
              "Name": "Gridded",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.CompositeFactor, Models",
              "Specifications": [
                "[PatchManager].Script.PatchType = UP",
                "[PatchManager].Script.SystemID = A",
                "[PatchManager].Script.NumPatches = 1"
              ],
              "Paths": null,
              "Values": null,
              "Name": "Uniform",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            }
          ],
          "Enabled": false,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Simulation, Models",
          "Descriptors": null,
          "Name": "Base",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Clock, Models",
              "Start": "1972-08-01T00:00:00",
              "End": "1976-07-31T00:00:00",
              "Name": "Clock",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Summary, Models",
              "Verbosity": 100,
              "Name": "SummaryFile",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Climate.Weather, Models",
              "ConstantsFile": null,
              "FileName": "%root%\\Tests\\WeatherFiles\\Ruakura.met",
              "ExcelWorkSheetName": "",
              "Name": "Weather",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
              "Name": "Soil Arbitrator",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using Newtonsoft.Json;\r\nusing Models.Soils.Nutrients;\r\nusing Models.Soils.NutrientPatching;\r\nusing Models.Interfaces;\r\nusing System.Diagnostics;\r\nusing System.Collections.Generic;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.Surface;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.AgPasture;\r\nusing Models.Zones;\r\nusing Models.PMF;\r\nusing Models.Core;\r\nusing Models.Core.ApsimFile;\r\nusing System;\r\nusing System.Linq;\r\nusing Models.Climate;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        [Link] private Clock Clock;\r\n        [Link] private Soil soil;\r\n        [Link] private ISummary summary;\r\n        [Link] private Weather Weather;\r\n        [Link] private Zone myZone;\r\n        public string SoilType;\r\n        public string SimLocation;\r\n        public string SetIrrigation;\r\n        public string GeneralFertType;\r\n        public double GeneralFertAmt;\r\n        public string PastureType;\r\n        public int PatchCount;\r\n        private double iniOrgC;\r\n        private double iniOrgN;\r\n        private double NewArea;\r\n        private Sward sward;\r\n        [Link]\r\n        private IPhysical soilPhysical;\r\n\r\n        [Link]\r\n        private List<NutrientPatchManager> patchManagers;\r\n\r\n\r\n        public int DaysSinceCut = 0;\r\n        public int PatchNumForFert = -1;\r\n\r\n        private int NumPaddocks = 0;\r\n        // NumPaddocks is the number of AgPastures and SoilWats etc\r\n        private int NumPatchesForFertiliser = 1;\r\n        private double[] MonthlyFertAmt;\r\n        private double[] FertDepthPlacement;\r\n        private int[] PseudoRandomSeq;\r\n        private int GrazingNumber = -1;\r\n        private bool CutNow = false;\r\n\r\n        private double AmountDungCReturned = 0.0;\r\n        private int nPatchesAdded = 0;\r\n        private int[] PatchToAddTo;\r\n        private string[] PatchNmToAddTo = new string[1];\r\n\r\n\r\n        [JsonIgnore] public bool grazedToday { get; set; }\r\n        [JsonIgnore] public double Harvested { get; set; }\r\n        [JsonIgnore] public double HarvestedN { get; set; }\r\n        [JsonIgnore] public double UreaReturned  { get; set; }\r\n\r\n        [Description(\"Frequency of cutting (days) (0 will be interpreted as the end of each month)\")]\r\n        public int CuttingFrequency { get; set; }\r\n\r\n        [Description(\"Residual pasture mass after cutting (kg DM /ha)\")]\r\n        public int CuttingResidual { get; set; }\r\n\r\n        [Description(\"Type of nutrient return - calculated from the amount of herbage harvested or constant\")]\r\n        public NutrientReturnTypes NutrientReturnType { get; set; }\r\n\r\n        [Description(\"Amount of fertiliser N to apply to simulation after each cutting (pretend urine) (kgN/ha) (ignored if nutrient return is FromHarvest)\")]\r\n        public double AmountFertNReturned { get; set; }\r\n\r\n        [Description(\"Amount of dung N to apply to simulation after each cutting (kgN/ha) (ignored if nutrient return is FromHarvest)\")]\r\n        public double AmountDungNReturned { get; set; }\r\n\r\n        [Description(\"Depth band (0 mm to X mm) for fertiliser placement (mm)\")]\r\n        public int FertiliserDepth { get; set; }\r\n                        \r\n        [Description(\"Pattern for fertiliser return\")]\r\n        public urineReturnTypes FertiliserReturnPattern { get; set; }\r\n\r\n        [Description(\"Frequency of reporting\")]\r\n        public reportingFrequencyTypes ReportingFreq { get; set; }\r\n\r\n        [Description(\"Patch type\")]\r\n        public patchTypes PatchType { get; set; }\r\n\r\n        [Description(\"How many patches should there be in the grid? (used to create the grid for EP & GP and the size of the patches for PP)\")]\r\n        public int NumPatches { get; set; }\r\n\r\n        [Description(\"System identifier\")]\r\n        public systemTypes SystemID { get; set; }\r\n\r\n        public enum systemTypes\r\n        {\r\n            /// <summary>A</summary>\r\n            A,\r\n            /// <summary>B</summary>\r\n            B,\r\n            /// <summary>C</summary>\r\n            C,\r\n            /// <summary>D</summary>\r\n            D,\r\n            /// <summary>E</summary>\r\n            E,\r\n            /// <summary>F</summary>\r\n            F\r\n        }\r\n\r\n        public enum patchTypes\r\n        {\r\n            /// <summary>EP</summary>\r\n            EP,\r\n            /// <summary>EP</summary>\r\n            GP,\r\n            /// <summary>EP</summary>\r\n            PP,\r\n            /// <summary>EP</summary>\r\n            UP\r\n        }\r\n\r\n        public enum reportingFrequencyTypes\r\n        {\r\n            /// <summary>Daily</summary>\r\n            Daily,\r\n            /// <summary>Every 10 days</summary>\r\n            TenDaily,\r\n            /// <summary>Monthly</summary>\r\n            Monthly,\r\n            /// <summary>Annual</summary>\r\n            Annual,\r\n            /// <summary>On grazing</summary>\r\n            OnGrazing\r\n        }\r\n\r\n        public enum urineReturnTypes\r\n        {\r\n            /// <summary>Uniform</summary>\r\n            UniformAcrossAllPatches,\r\n            /// <summary>Rotating in order</summary>\r\n            RotatingInOrder,\r\n            /// <summary>Random</summary>\r\n            Random,\r\n            /// <summary>Pseudo-random</summary>\r\n            PseudoRandom\r\n        }\r\n\r\n        public enum NutrientReturnTypes\r\n        {\r\n            /// <summary>Constant</summary>\r\n            Constant,\r\n            /// <summary>FromHarvest</summary>\r\n            FromHarvest,\r\n            /// <summary>SetMonthly</summary>\r\n            SetMonthly\r\n        }\r\n\r\n        // Called just before a simulation is run.\r\n        public override void OnPreLink()\r\n        {\r\n            if (PatchType == patchTypes.EP)\r\n            {\r\n                // Create the required number of paddocks.\r\n                var simulation = Parent.Parent as Simulation;\r\n                var paddock = simulation.FindChild<Zone>();\r\n                for (int i = 0; i < NumPatches-1; i++)\r\n                {\r\n                    var newPaddock = Apsim.Clone(paddock);\r\n                    Structure.Add(newPaddock, simulation);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Called at beginning of a simulation run.\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"Initialising the Manager for grazing, urine return and reporting\", MessageType.Diagnostic);\r\n\r\n            grazedToday = false;\r\n            foreach (var patchManager in patchManagers)\r\n                patchManager.MaximumNitrogenAvailableToPlants = 200.0;\r\n\r\n            // count the paddocks in the simulation\r\n            NumPaddocks = 0;   \r\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n                NumPaddocks += 1;   \r\n            summary.WriteMessage(this, \"There are \" + NumPaddocks + \" in the simulation\", MessageType.Diagnostic);\r\n\r\n            MonthlyFertAmt = new double[] { 24, 19, 17, 12, 8, 5, 5, 10, 16, 19, 23, 25 };\r\n\r\n            summary.WriteMessage(this, \"Finished initialising the Manager for grazing, urine return and reporting\", MessageType.Diagnostic);\r\n\r\n            SetSystemParams();\r\n\r\n            sward = new Sward(myZone);\r\n\r\n            if ((PatchType == patchTypes.GP) && (NumPaddocks > 1))\r\n                throw new Exception(\"Patch type GP may only have one paddock/zone\");\r\n            if ((PatchType == patchTypes.PP) && (NumPaddocks > 1))\r\n                throw new Exception(\"Patch type PP may only have one paddock/zone\");\r\n\r\n            NumPatchesForFertiliser = 1;  // in the future this might be > 1\r\n            if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)  // generate a return pattern up front\r\n            {\r\n                int MaxNumGrazings = (Clock.EndDate.Year - Clock.StartDate.Year + 1) * 52; //allow for a maximum of 1 per week\r\n\r\n                PseudoRandomSeq = new int[MaxNumGrazings * NumPatchesForFertiliser];\r\n                Random rndConstSeed = new Random((int)666);\r\n                string MyString = \"\";\r\n                for (int i = 0; i < (MaxNumGrazings * NumPatchesForFertiliser); i++)\r\n                {\r\n                    PseudoRandomSeq[i] = rndConstSeed.Next(0, NumPatches);  // will never select NumPatches \r\n                    MyString += Convert.ToString(PseudoRandomSeq[i]) + \" \";\r\n                }\r\n\r\n                summary.WriteMessage(this, \"The order of patch return will be: \" + MyString, MessageType.Diagnostic);\r\n            }\r\n\r\n            // Add patches\r\n            if (PatchType == patchTypes.GP)\r\n            {\r\n                foreach (var patchManager in patchManagers)\r\n                {\r\n                    //patchManager.MaximumNitrogenAvailableToPlants = 0.45;\r\n                    patchManager.NPartitionApproach = PartitionApproachEnum.BasedOnConcentrationAndDelta;\r\n                    patchManager.AutoAmalgamationApproach = AutoAmalgamationApproachEnum.None;\r\n                    patchManager.basePatchApproach = BaseApproachEnum.IDBased;\r\n                    patchManager.AllowPatchAmalgamationByAge = false;\r\n                    patchManager.PatchAgeForForcedMerge = 3.0;                                \r\n                }\r\n\r\n                int[] PatchToAddTo = new int[1];  //need an array variable for this\r\n                string[] PatchNmToAddTo = new string[1];  \r\n                int nPatchesAdded = 0;\r\n                double NewArea = 1.0 / NumPatches;\r\n\r\n                while (nPatchesAdded < NumPatches - 1)\r\n                {\r\n                    AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();\r\n                    NewPatch.DepositionType = DepositionTypeEnum.ToNewPatch;\r\n                    NewPatch.AreaFraction = NewArea;\r\n                    PatchToAddTo[0] = 0;\r\n                    PatchNmToAddTo[0] = \"0\";\r\n                    NewPatch.AffectedPatches_id = PatchToAddTo;\r\n                    NewPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                    NewPatch.SuppressMessages = false;\r\n\r\n                    foreach (var patchManager in patchManagers)\r\n                        patchManager.Add(NewPatch);\r\n                    nPatchesAdded += 1;\r\n                }                \r\n\r\n                summary.WriteMessage(this, \"NumPatches at end of initialisation (GP):\" + patchManagers[0].NumPatches.ToString(), MessageType.Diagnostic);\r\n            }\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {    \r\n\r\n            // if this is the start of the simulation then sort out the depth for the fertiliser (aka urine) placement\r\n            // can't do this in initialisation because of the module order\r\n            if (Clock.Today == Clock.StartDate)\r\n            {\r\n                FertPlacementDepth();\r\n                int i = -1;  // to use as a patch counter\r\n\r\n                iniOrgC = 0.0; \r\n                iniOrgN = 0.0;\r\n                foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n                {\r\n                    Soil soil = zone.FindInScope<Soil>() as Soil;\r\n                    i += 1;\r\n\r\n                    var patchManager = soil.FindChild<NutrientPatchManager>();\r\n                    PatchCount = patchManager.NumPatches;\r\n\r\n                    for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                    {\r\n                        iniOrgC += patchManager.TotalC[ii] / NumPaddocks; \r\n                        iniOrgN += patchManager.Organic.N[ii] / NumPaddocks;\r\n                    }\r\n                }\r\n            }\r\n\r\n            DaysSinceCut += 1;\r\n            Harvested = 0.0;\r\n            HarvestedN = 0.0;\r\n            UreaReturned = 0.0;\r\n\r\n            bool isEndOfMonth = false;\r\n            if (Clock.Today.AddDays(1).Day == 1)\r\n                isEndOfMonth = true;\r\n\r\n            bool isEndOfYear = false;\r\n            if (Clock.Today.AddDays(1).DayOfYear == 1)\r\n                isEndOfYear = true;\r\n\r\n            CutNow = false;\r\n            grazedToday = false;\r\n            if ((CuttingFrequency == 0) && (isEndOfMonth))\r\n                CutNow = true;\r\n            else if ((DaysSinceCut >= CuttingFrequency) && (CuttingFrequency > 0))\r\n                CutNow = true;\r\n\r\n            if (CutNow)\r\n            {\r\n                grazedToday = true;\r\n                summary.WriteMessage(this, \"Doing Cutting\", MessageType.Diagnostic);\r\n                DaysSinceCut = 0;\r\n                GrazingNumber += 1;  //was initialsed as -1 - this is used to pick the pseudo-random patch return number\r\n                // GetPatchForUrineReturn();  now called in the deposition routine\r\n\r\n                // do the cutting=grazing - it doesn't matter if there one (GP) or many (EP) physical paddocks in the simulation at this point\r\n                int i = -1;  // to use as a patch counter\r\n                Harvested = 0.0;\r\n                HarvestedN = 0.0;\r\n                foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n                {\r\n                    i += 1;\r\n                    var sward = new Sward(zone);\r\n                    sward.Graze(amount: CuttingResidual, type: \"SetResidueAmount\");\r\n                    Harvested += sward.HarvestedWt / NumPaddocks;\r\n                    HarvestedN += sward.HarvestedN / NumPaddocks;\r\n                }\r\n\r\n                if (NutrientReturnType == NutrientReturnTypes.FromHarvest)\r\n                {\r\n                    AmountFertNReturned = HarvestedN * 0.50;  // TODO yikes - probably should not have hard-coded this, if it is not FromHarvest then the value has been set in the manager parameters\r\n                    AmountDungNReturned = HarvestedN * 0.35;  // \r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n                else if (NutrientReturnType == NutrientReturnTypes.SetMonthly)\r\n                {\r\n                    AmountFertNReturned = MonthlyFertAmt[Clock.Today.Month - 1];\r\n                    AmountDungNReturned = AmountFertNReturned * (0.35 / 0.50);  // \r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n                else\r\n                {\r\n                    // urine and dung are set from the parameters\r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n\r\n\r\n                summary.WriteMessage(this, \"The amount of urea fertiliser to be returned to the whole paddock is \" + AmountFertNReturned, MessageType.Diagnostic);\r\n\r\n                DoUrineReturn();\r\n\r\n                DoTramplingAndDungReturn();\r\n\r\n                summary.WriteMessage(this, \"Finished Cutting\", MessageType.Diagnostic);\r\n\r\n            } // this is the end of the CutNow section\r\n\r\n            if ((GeneralFertAmt > 0.0) && (Clock.Today.AddDays(1).Day == 1))\r\n                DoFertiliser();\r\n        }\r\n\r\n        public void DoTramplingAndDungReturn()\r\n        {\r\n            int i = -1;  // patch or paddock counter\r\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n            {\r\n                i += 1;\r\n                SurfaceOrganicMatter surfaceOM = zone.FindInScope<SurfaceOrganicMatter>() as SurfaceOrganicMatter; \r\n\r\n                // do some trampling of litter\r\n                // accelerate the movement of surface litter into the soil - do this before the dung is added\r\n                double temp = surfaceOM.Wt * 0.1;\r\n\r\n                TillageType trampling = new TillageType();\r\n                surfaceOM.Incorporate(fraction: (double)0.1, depth: (double)100.0);\r\n\r\n                summary.WriteMessage(this, \"For patch \" + i + \" the amount of litter trampled was \" + temp + \" and the remaining litter is \" + (surfaceOM.Wt), MessageType.Diagnostic);\r\n\r\n                // move the dung to litter - assume dung is 40% of that harvested and a C:N ratio of \r\n                AddFaecesType dung = new AddFaecesType();\r\n                dung.OMWeight = AmountDungCReturned / 0.4;\r\n                dung.OMN = AmountDungNReturned;\r\n                surfaceOM.AddFaeces(dung);\r\n                summary.WriteMessage(this, \"For patch \" + i + \" the amount of dung DM added to the litter was \" + (AmountDungCReturned / 0.4) + \" and the amount of N added in the dung was \" + (AmountDungNReturned), MessageType.Diagnostic);\r\n\r\n            } \r\n        }\r\n        // this is the end of the trampling and dung patch/paddock section\r\n\r\n        public void DoUrineReturn()\r\n        {\r\n            if (PatchType == patchTypes.EP)\r\n            {                \r\n\r\n                GetPatchForUrineReturn();  //sets the value for PatchNumForFert\r\n                int i = -1; //to count the paddocks\r\n                foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n                {\r\n                    i += 1;\r\n                    if (i == PatchNumForFert)\r\n                    {\r\n                        Fertiliser thisFert = zone.FindInScope<Fertiliser>() as Fertiliser;\r\n                        Soil soil = zone.FindInScope<Soil>() as Soil;\r\n\r\n                        double tempDepth = 0.0;\r\n                        for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                        {\r\n                            tempDepth += soilPhysical.Thickness[ii];\r\n                            thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * NumPatches * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soilPhysical.Thickness[ii] / 2));\r\n                        }\r\n                        UreaReturned += AmountFertNReturned * NumPatches;\r\n                    }\r\n                } \r\n\r\n            }\r\n            else if (PatchType == patchTypes.GP)\r\n            {\r\n                GetPatchForUrineReturn();  //sets the value for PatchNumForFert\r\n                int[] PatchToAddTo = new int[1];  //because need an array variable for this\r\n                string[] PatchNmToAddTo = new string[0];  //need an array variable for this\r\n                List<IModel> zones = this.FindAllInScope<Zone>().OfType<IModel>().ToList();\r\n                Soil soil = zones[0].FindInScope<Soil>() as Soil; // Only one zone allowed for GP so use the first\r\n                double[] UreaToAdd = new double[soilPhysical.Thickness.Length];  \r\n\r\n                for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;\r\n\r\n                UreaReturned += AmountFertNReturned;\r\n\r\n\r\n                AddSoilCNPatchType CurrentPatch = new AddSoilCNPatchType();\r\n                CurrentPatch.Sender = \"manager\";\r\n                CurrentPatch.DepositionType = DepositionTypeEnum.ToSpecificPatch;\r\n                PatchToAddTo[0] = PatchNumForFert;\r\n                CurrentPatch.AffectedPatches_id = PatchToAddTo;\r\n                CurrentPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                CurrentPatch.Urea = UreaToAdd;\r\n\r\n\r\n                summary.WriteMessage(this, \"Patch MinN prior to urine return:\", MessageType.Diagnostic);\r\n\r\n                var patchManager = soil.FindChild<INutrientPatchManager>(); \r\n                patchManager.Add(CurrentPatch); \r\n                summary.WriteMessage(this, \"Patch MinN after urine return:\", MessageType.Diagnostic);\r\n            }\r\n            else if (PatchType == patchTypes.PP)\r\n            {\r\n                // create a new patch from base of area 1/NumPatches\r\n                // add the fertiliser to that patch\r\n                // set amalgamation autmomatic\r\n                List<IModel> zones = this.FindAllInScope<Zone>().OfType<IModel>().ToList();\r\n                Soil soil = zones[0].FindInScope<Soil>() as Soil; // Only one zone allowed for GP so use the first\r\n\r\n                double[] UreaToAdd = new double[soilPhysical.Thickness.Length];  \r\n\r\n                for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;\r\n\r\n                int[] PatchToAddTo = new int[1];\r\n                string[] PatchNmToAddTo = new string[0];  //need an array variable for this\r\n\r\n                UreaReturned += AmountFertNReturned;\r\n\r\n                AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();\r\n                NewPatch.DepositionType = DepositionTypeEnum.ToNewPatch;\r\n                NewPatch.AreaFraction = 1.0 / NumPatches;\r\n                PatchToAddTo[0] = 0;\r\n                NewPatch.AffectedPatches_id = PatchToAddTo;\r\n                NewPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                NewPatch.Urea = UreaToAdd;\r\n\r\n                summary.WriteMessage(this, \"UreaToAdd \" + UreaToAdd[0] + \" \" + UreaToAdd[1] + \" \" + UreaToAdd[2] + \" \" + UreaToAdd[3] + \" \" + UreaToAdd[4], MessageType.Diagnostic);\r\n\r\n                var patchManager = soil.FindChild<INutrientPatchManager>(); \r\n                patchManager.Add(NewPatch);\r\n\r\n                //throw new Exception(\"Have not set up the PP for DoUrineReturn yet\");\r\n            }\r\n            else if (PatchType == patchTypes.UP)\r\n            {\r\n                int i = -1;  // patch or paddock counter\r\n                foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n                {\r\n                    i += 1;\r\n\r\n                    Fertiliser thisFert = zone.FindInScope<Fertiliser>() as Fertiliser;\r\n                    Soil soil = zone.FindInScope<Soil>() as Soil;\r\n\r\n                    double tempDepth = 0.0;\r\n                    for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                    {\r\n                        tempDepth += soilPhysical.Thickness[ii];\r\n                        thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soilPhysical.Thickness[ii] / 2));\r\n                    } \r\n                    UreaReturned += AmountFertNReturned;\r\n                }\r\n            }\r\n            else\r\n                throw new Exception(\"Patch type not catered for\");\r\n\r\n\r\n\r\n        }\r\n        // end of DoUrineReturn\r\n\r\n        public void GetPatchForUrineReturn()\r\n        {\r\n            \r\n            if (FertiliserReturnPattern == urineReturnTypes.UniformAcrossAllPatches)\r\n                PatchNumForFert = 0;  // but will not be used\r\n            else if (FertiliserReturnPattern == urineReturnTypes.RotatingInOrder)\r\n            {\r\n                PatchNumForFert += 1;  //increment the patch number\r\n                if (PatchNumForFert >= NumPatches)\r\n                    PatchNumForFert = 0;  // but reset back to the first patch if needed\r\n                //summary.WriteMessage(this, \"The patch for fertiliser return is \" + PatchNumForFert, MessageType.Diagnostic);\r\n            }\r\n            else if (FertiliserReturnPattern == urineReturnTypes.Random)\r\n            {\r\n                Random rnd = new Random();\r\n                PatchNumForFert = rnd.Next(0, NumPatches);\r\n                //summary.WriteMessage(this, \"The next random number patch for fertiliser return is \" + PatchNumForFert, MessageType.Diagnostic);\r\n            }\r\n            else if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)\r\n            {\r\n                PatchNumForFert = PseudoRandomSeq[GrazingNumber];\r\n                //summary.WriteMessage(this, \"The next pseudo-random number patch for fertiliser return is \" + PatchNumForFert, MessageType.Diagnostic);\r\n            }\r\n        }\r\n        // this is the end of GetPatchForUrineReturn\r\n\r\n\r\n        public void FertPlacementDepth()\r\n        {\r\n            // note that this only looks at the first paddock and assumes that all the paddocks are the same\r\n            int iii = -1;  // to use as a patch counter\r\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n            {\r\n                iii += 1;\r\n                if (iii == 0)\r\n                {\r\n                    Soil soil = zone.FindInScope<Soil>() as Soil;\r\n                    double tempDepth = 0.0;\r\n                    FertDepthPlacement = new double[soilPhysical.Thickness.Length];\r\n                    for (int i = 0; i <= (soilPhysical.Thickness.Length - 1); i++)\r\n                    {\r\n                        tempDepth += soilPhysical.Thickness[i];\r\n                        if (tempDepth <= FertiliserDepth)\r\n                        {\r\n                            FertDepthPlacement[i] = soilPhysical.Thickness[i] / FertiliserDepth;\r\n                        }\r\n                        else\r\n                        {\r\n                            FertDepthPlacement[i] = (FertiliserDepth - (tempDepth - soilPhysical.Thickness[i])) / (tempDepth - (tempDepth - soilPhysical.Thickness[i])) * soilPhysical.Thickness[i] / FertiliserDepth;\r\n                            FertDepthPlacement[i] = Math.Max(0.0, Math.Min(1.0, FertDepthPlacement[i]));\r\n                        }\r\n                        //if (FertiliserReturnPattern == \"UniformAcrossAllPatches\")\r\n                        //   summary.WriteMessage(this, \"The proportion of fertiliser applied to the \" + i + \"th layer will be \" + FertDepthPlacement[i], MessageType.Diagnostic);\r\n                        //else\r\n                        summary.WriteMessage(this, \"The proportion of fertiliser (* NumPatches) applied to the \" + i + \"th layer will be \" + FertDepthPlacement[i], MessageType.Diagnostic);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        // this is the end of FertPlacementDepth\r\n\r\n\r\n        public void DoFertiliser()\r\n        {\r\n            bool ApplyFert = true; // the test for first day of the month has already been done\r\n            double NumMonths = 0;\r\n\r\n            if (GeneralFertType == \"Monthly\")\r\n                NumMonths = 12;\r\n            else if (GeneralFertType == \"NoWinter\")\r\n            {\r\n                if ((Clock.Today.Month < 5) || (Clock.Today.Month > 7))\r\n                {\r\n                    ApplyFert = true;\r\n                    NumMonths = 9;\r\n                }\r\n                else\r\n                    ApplyFert = false;\r\n            }\r\n            else\r\n                throw new Exception(\"Wrong general fertiliser setting\");\r\n\r\n            if (ApplyFert)\r\n            {\r\n                foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())  // but actually there will only be a single paddock\r\n                {\r\n                    Fertiliser thisFert = zone.FindInScope<Fertiliser>() as Fertiliser;\r\n\r\n                    //thisFert.Apply((float)(GeneralFertAmt / NumMonths), (float) (0.0), \"urea_n\");\r\n                    thisFert.Apply(Amount: (double)(GeneralFertAmt / NumMonths), Type: Fertiliser.Types.UreaN, Depth: FertiliserDepth);\r\n                    summary.WriteMessage(this, \"Applying \" + (GeneralFertAmt / NumMonths) + \" kg of general fertiliser\", MessageType.Diagnostic);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Definition of all systems\r\n        private void SetSystemParams()\r\n        {\r\n            if (SystemID == systemTypes.A)\r\n            {\r\n                SoilType = \"HE\";\r\n                SimLocation = \"Rua\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.B)\r\n            {\r\n                SoilType = \"HE\";\r\n                SimLocation = \"Rua\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 150.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.C)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.D)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 250.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.E)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 400.0;\r\n                PastureType = \"GrassOnly\";\r\n            }\r\n            else if (SystemID == systemTypes.F)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n        }\r\n    }\r\n\r\n    // A class for aggregating a pasture species mix.\r\n    [Serializable]\r\n    class Sward\r\n    {\r\n        private const double Epsilon = 0.000000001;\r\n        private List<PastureSpecies> species;\r\n        private double amountRequired;\r\n\r\n        public Sward(Zone zone)\r\n        {\r\n            species = zone.FindAllDescendants<PastureSpecies>().OfType<IModel>().ToList().Cast<PastureSpecies>().ToList();\r\n        }\r\n\r\n        public double HarvestableWt { get { return species.Sum(sp => sp.Harvestable.Wt); } }\r\n\r\n        public double HarvestedWt { get { return species.Sum(sp => sp.HarvestedWt); } }\r\n\r\n        public double HarvestedN { get { return species.Sum(sp => sp.HarvestedN); } }\r\n\r\n        public double StandingHerbageWt { get { return species.Sum(sp => sp.Standing.Wt); } }\r\n\r\n        public double AboveGroundWt { get { return species.Sum(sp => sp.AboveGroundWt); } }\r\n\r\n        public bool IsAlive\r\n        {\r\n            get\r\n            {\r\n                bool alive = true;\r\n                species.ForEach(sp => alive = alive && sp.PlantStatus == \"alive\");\r\n                return alive;\r\n            }\r\n        }\r\n\r\n        /// <summary>Removes plant material simulating a graze event.</summary>\r\n        /// <param name=\"amount\">The DM amount (kg/ha)</param>\r\n        /// <param name=\"type\">How the amount is interpreted (SetResidueAmount or SetRemoveAmount)</param>\r\n        public void Graze(double amount, string type)\r\n        {\r\n            double amountAvailable = HarvestableWt;\r\n            if (IsAlive || (amountAvailable > Epsilon))\r\n            {\r\n                // Get the amount required to remove\r\n                if (type.ToLower() == \"setresidueamount\")\r\n                {\r\n                    // Remove all DM above given residual amount\r\n                    amountRequired = Math.Max(0.0, AboveGroundWt - amount);\r\n                }\r\n                else if (type.ToLower() == \"setremoveamount\")\r\n                {\r\n                    // Remove a given amount\r\n                    amountRequired = Math.Max(0.0, amount);\r\n                }\r\n                else\r\n                {\r\n                    throw new Exception(\"Type of amount to remove on graze not recognized (use \\'SetResidueAmount\\' or \\'SetRemoveAmount\\'\");\r\n                }\r\n                // Get the actual amount to remove\r\n                double amountToRemove = Math.Max(0.0, Math.Min(amountRequired, amountAvailable));\r\n\r\n                // Get the amounts to remove by mySpecies:\r\n                if (amountToRemove > Epsilon)\r\n                {\r\n                    double[] fractionToRemove = new double[species.Count];\r\n                    for (int s = 0; s < species.Count; s++)\r\n                    {\r\n                        // get the fraction to required for each mySpecies, partition according to available DM to harvest\r\n                        fractionToRemove[s] = species[s].Harvestable.Wt / amountAvailable;\r\n\r\n                        // remove DM and N for each mySpecies (digestibility is also evaluated)\r\n                        species[s].RemoveBiomass(amountToRemove * fractionToRemove[s]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "PatchType",
                  "Value": "UP"
                },
                {
                  "Key": "SystemID",
                  "Value": "A"
                },
                {
                  "Key": "NumPatches",
                  "Value": "0"
                },
                {
                  "Key": "CuttingFrequency",
                  "Value": "0"
                },
                {
                  "Key": "CuttingResidual",
                  "Value": "1000"
                },
                {
                  "Key": "NutrientReturnType",
                  "Value": "FromHarvest"
                },
                {
                  "Key": "AmountFertNReturned",
                  "Value": "15"
                },
                {
                  "Key": "AmountDungNReturned",
                  "Value": "0"
                },
                {
                  "Key": "FertiliserDepth",
                  "Value": "200"
                },
                {
                  "Key": "FertiliserReturnPattern",
                  "Value": "RotatingInOrder"
                },
                {
                  "Key": "ReportingFreq",
                  "Value": "OnGrazing"
                }
              ],
              "Name": "PatchManager",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using Newtonsoft.Json;\r\nusing Models.Soils.Nutrients;\r\nusing Models.Interfaces;\r\nusing System;\r\nusing Models.Core;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Zones;\r\nusing Models.AgPasture;\r\nusing System.Xml.Serialization;\r\nusing Models.Surface;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing Models.Soils.NutrientPatching;\r\nusing Models.Climate;\r\n\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        [Link] private Clock Clock;\r\n        [Link] private Simulation Simulation;\r\n        [Link] private Soil soil;\r\n        [Link] private ISummary summary;\r\n        [Link] private Weather Weather;\r\n        [Link] private Zone zone;\r\n        public int PatchCount;\r\n        public int PaddockCount;\r\n        public double Grazed;\r\n        public double GrazedN;\r\n        public double UrineNReturned;\r\n        private double iniOrgC;\r\n        private double iniOrgN;\r\n        private double myVariable;\r\n        [Link(ByName = true)]\r\n        private ISolute NO3;\r\n        [Link(ByName = true)]\r\n        private ISolute NH4;\r\n        [Link(ByName = true)]\r\n        private ISolute Urea;\r\n        [Link]\r\n        private NutrientPatchManager patchManager;\r\n        private Models.Report ReportingWithPatches;\r\n        [Link]\r\n        private IPhysical soilPhysical;\r\n\r\n        private Zone[] Zones { get; set; }\r\n\r\n\r\n        [Description(\"Verbose reporting mode (True/False)\")]\r\n        public bool verbose { get; set; }\r\n\r\n        [Description(\"Name of the patch manager for input\")]\r\n        public string InputModule { get; set; }\r\n\r\n        [Description(\"Name of the report for output\")]\r\n        public string OutputModule { get; set; }\r\n\r\n        [Description(\"Frequency of reporting\")]\r\n        public reportingFrequencyTypes ReportingFreq { get; set; }\r\n\r\n        [JsonIgnore] public int DaysSinceReport { get; set; }\r\n        [JsonIgnore] public double NHA { get; set; }\r\n        [JsonIgnore] public double PGR { get; set; }\r\n        [JsonIgnore] public double HerbageGrazed { get; set; }\r\n        [JsonIgnore] public double HerbageGrazedN { get; set; }\r\n        [JsonIgnore] public double AreaUrinePatchesToday { get; set; }\r\n        [JsonIgnore] public double UreaReturned { get; set; }\r\n        [JsonIgnore] public double Fixation { get; set; }\r\n        [JsonIgnore] public double LeachN { get; set; }\r\n        [JsonIgnore] public double Denit { get; set; }\r\n        [JsonIgnore] public double DenitN2O { get; set; }\r\n        [JsonIgnore] public double OrgC { get; set; }\r\n        [JsonIgnore] public double OrgN { get; set; }\r\n        [JsonIgnore] public double dltOrgC { get; set; }\r\n        [JsonIgnore] public double dltOrgN { get; set; }\r\n        [JsonIgnore] public double MinN { get; set; }\r\n        [JsonIgnore] public double UreaN { get; set; }\r\n        [JsonIgnore] public double NH4N { get; set; }\r\n        [JsonIgnore] public double NO3N { get; set; }\r\n        [JsonIgnore] public double UreaAddedInGrazing { get; set; }\r\n\r\n        [JsonIgnore] public double[] MinNPatch { get; set; }\r\n\r\n\r\n\r\n\r\n        private bool ReportToday = false;\r\n\r\n        public enum reportingFrequencyTypes\r\n        {\r\n            /// <summary>Daily</summary>\r\n            Daily,\r\n            /// <summary>Every 10 days</summary>\r\n            TenDaily,\r\n            /// <summary>Monthly</summary>\r\n            Monthly,\r\n            /// <summary>Annual</summary>\r\n            Annual,\r\n            /// <summary>On grazing</summary>\r\n            OnGrazing\r\n        }\r\n\r\n    \r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"Initialising the Manager for grazing, urine return and reporting\", MessageType.Diagnostic);\r\n            DaysSinceReport = 0;\r\n            PatchCount = patchManager.NumPatches;\r\n            PaddockCount = 0;\r\n\r\n\r\n\r\n            // Get list of zones in the simulation\r\n            List<Zone> zones = new List<Zone>();\r\n\r\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n            {\r\n                zones.Add(zone as Zone);\r\n                ReportingWithPatches = (Models.Report)zone.Get(\"[\" + OutputModule + \"]\");\r\n                PaddockCount++;\r\n            }\r\n            Zones = zones.ToArray();\r\n\r\n\r\n            //myVariable = (double)ManageGriddedPaddock.Get(\"Script.Var1\");\r\n            //double grazedN = ManageGriddedPaddock.Get(\"Script.grazedN\");\r\n\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"Finished initialising the Manager for grazing, urine return and reporting\", MessageType.Diagnostic);\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"DoDailyInitialisation\")]\r\n        private void OnDoDailyInitialisation(object sender, EventArgs e)\r\n        {    \r\n                    \r\n            if (verbose)\r\n                summary.WriteMessage(this, \"In Daily Initialisation for the Reporting Manager on \" + Clock.Today, MessageType.Diagnostic);\r\n            if (Clock.Today == Clock.StartDate)\r\n            {\r\n\r\n                iniOrgC = 0.0; \r\n                iniOrgN = 0.0;            \r\n\r\n                foreach (Zone zone in Zones)\r\n                {\r\n                    var patchManager = zone.FindInScope<NutrientPatchManager>() as NutrientPatchManager;\r\n                    for (int ii = 0; ii < soilPhysical.Thickness.Length; ii++)\r\n                    {\r\n                        iniOrgC += patchManager.TotalC[ii]; // TODO RJM Check this is right!\r\n                        iniOrgN += patchManager.Organic.N[ii];\r\n                    }\r\n                }\r\n            }        \r\n\r\n\r\n        }\r\n\r\n            \r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void DoManagement(object sender, EventArgs e)\r\n        {\r\n            bool isEndOfMonth = false;\r\n            if (Clock.Today.AddDays(1).Day == 1)\r\n                isEndOfMonth = true;\r\n            \r\n\r\n            bool isEndOfYear = false;\r\n            if (Clock.Today.Day == 31 && Clock.Today.Month == 12)\r\n                isEndOfYear = true;\r\n\r\n\r\n            bool GrazedToday = (bool)Simulation.FindByPath(InputModule + \".Script.grazedToday\").Value; \r\n\r\n            // should reporting be done today?  \r\n            if (ReportingFreq == reportingFrequencyTypes.Daily)\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day == 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (GrazedToday))\r\n                ReportToday = true;\r\n            else\r\n                ReportToday = false;\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"Finished Prepare for the Reporting Manager on \" + Clock.Today, MessageType.Diagnostic);\r\n        }\r\n\r\n        [EventSubscribe(\"EndOfDay\")]\r\n        private void OnEndOfDay(object sender, EventArgs e)\r\n        {\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"In EndOfDay for the Reporting Manager on  \" + Clock.Today, MessageType.Diagnostic);\r\n\r\n            DaysSinceReport += 1;\r\n\r\n\r\n\r\n            foreach (Zone zone in Zones)\r\n            {\r\n                var sward = zone.FindAllChildren<PastureSpecies>().OfType<IModel>().ToList().Cast<PastureSpecies>().ToList();\r\n                NHA += sward.Sum(species => species.HerbageGrowthWt) / PaddockCount;\r\n                PGR = NHA;  // divide this by the number of days just before reporting\r\n                Fixation += sward.Sum(species => species.FixedN) / PaddockCount;\r\n\r\n                var waterBalance = zone.FindInScope<ISoilWater>();\r\n                LeachN += waterBalance.FlowNO3[waterBalance.FlowNO3.Length - 1] / PaddockCount;  // only take the deepest element\r\n\r\n                for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                {\r\n                    Denit += patchManager.DenitrifiedN[ii] / PaddockCount;\r\n                    DenitN2O += patchManager.N2Oatm[ii] / PaddockCount;\r\n                }\r\n\r\n\r\n                Grazed = (double)zone.Get(\"[\" + InputModule + \"].Script.Harvested\") / PaddockCount;\r\n                GrazedN = (double)zone.Get(\"[\" + InputModule + \"].Script.HarvestedN\") / PaddockCount;\r\n                UrineNReturned = (double)zone.Get(\"[\" + InputModule + \"].Script.UreaReturned\") / PaddockCount;\r\n                //AreaUrinePatchesToday = (double)zone.Get(\"[\" + InputModule + \"].Script.areaUrinePatchesToday\");\r\n            } \r\n\r\n            HerbageGrazed += Grazed;\r\n            HerbageGrazedN += GrazedN;\r\n            UreaReturned += UrineNReturned;\r\n\r\n            if (ReportToday)\r\n            {\r\n\r\n                OrgC = 0.0;\r\n                OrgN = 0.0;\r\n                UreaN = 0.0;\r\n                NH4N = 0.0;\r\n                NO3N = 0.0;\r\n                MinN = 0.0;\r\n\r\n\r\n                Soil soil1 = Zones[0].FindInScope<Soil>() as Soil;\r\n\r\n                if (PaddockCount > 1)\r\n                    MinNPatch = new double[PaddockCount];\r\n                else\r\n                    MinNPatch = new double[patchManager.NumPatches];\r\n\r\n\r\n                int currentZoneNum = 0;\r\n                foreach (Zone zone in Zones)\r\n                {\r\n                    Soil soil = zone.FindInScope<Soil>() as Soil;\r\n\r\n                    double minNPatch = 0;\r\n\r\n                    for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                    {\r\n                        OrgC += patchManager.TotalC[ii] / PaddockCount;  \r\n                        OrgN += patchManager.Organic.N[ii] / PaddockCount;\r\n                        UreaN += Urea.kgha[ii] / PaddockCount;\r\n                        NH4N += NH4.kgha[ii] / PaddockCount;\r\n                        NO3N += NO3.kgha[ii] / PaddockCount;\r\n                        MinN = UreaN + NH4N + NO3N;                    \r\n                        minNPatch += Urea.kgha[ii] + NH4.kgha[ii] + NO3.kgha[ii];\r\n                    }\r\n\r\n\r\n                    //MinN = (UreaN*PaddockCount + NH4N*PaddockCount + NO3N*PaddockCount);\r\n                    if (PaddockCount > 1)\r\n                        MinNPatch[currentZoneNum] = minNPatch;\r\n\r\n                    dltOrgC = OrgC - iniOrgC; \r\n                    dltOrgN = OrgN - iniOrgN;\r\n                    iniOrgC = OrgC; // ready for the next calculation of change in pools\r\n                    iniOrgN = OrgN;\r\n                    currentZoneNum++;\r\n                }\r\n\r\n                if (patchManager.NumPatches > 1)\r\n                {  // TODO will break if there is more than one paddock/zone AND more than one patch                    \r\n\r\n                    for (int ii = 0; ii < (patchManager.NumPatches); ii++)\r\n                    {\r\n                        MinNPatch[ii] = patchManager.UreaForEachPatch[ii] + patchManager.NH4ForEachPatch[ii] + patchManager.NO3ForEachPatch[ii];\r\n                    }\r\n                }\r\n\r\n                PGR = NHA / DaysSinceReport; \r\n\r\n                ReportingWithPatches.DoOutput();\r\n\r\n                // now zero the reported variables\r\n                DaysSinceReport = 0;\r\n                HerbageGrazed = 0.0;\r\n                HerbageGrazedN = 0.0;\r\n                DaysSinceReport = 0;\r\n                NHA = 0;\r\n                PGR = 0;\r\n                UreaReturned = 0;\r\n                Fixation = 0;\r\n                LeachN = 0;\r\n                Denit = 0;\r\n                DenitN2O = 0;\r\n                OrgC = 0;\r\n                OrgN = 0;\r\n                MinN = 0;\r\n                UreaN = 0;\r\n                NH4N = 0;\r\n                NO3N = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
              "Parameters": [
                {
                  "Key": "verbose",
                  "Value": "False"
                },
                {
                  "Key": "InputModule",
                  "Value": "PatchManager"
                },
                {
                  "Key": "OutputModule",
                  "Value": "ReportingWithPatches"
                },
                {
                  "Key": "ReportingFreq",
                  "Value": "Daily"
                },
                {
                  "Key": "DaysSinceReport",
                  "Value": "0"
                },
                {
                  "Key": "NHA",
                  "Value": "0"
                },
                {
                  "Key": "PGR",
                  "Value": "0"
                },
                {
                  "Key": "HerbageGrazed",
                  "Value": "0"
                },
                {
                  "Key": "HerbageGrazedN",
                  "Value": "0"
                },
                {
                  "Key": "AreaUrinePatchesToday",
                  "Value": "0"
                },
                {
                  "Key": "UreaReturned",
                  "Value": "0"
                },
                {
                  "Key": "Fixation",
                  "Value": "0"
                },
                {
                  "Key": "LeachN",
                  "Value": "0"
                },
                {
                  "Key": "Denit",
                  "Value": "0"
                },
                {
                  "Key": "DenitN2O",
                  "Value": "0"
                },
                {
                  "Key": "OrgC",
                  "Value": "0"
                },
                {
                  "Key": "OrgN",
                  "Value": "0"
                },
                {
                  "Key": "dltOrgC",
                  "Value": "0"
                },
                {
                  "Key": "dltOrgN",
                  "Value": "0"
                },
                {
                  "Key": "MinN",
                  "Value": "0"
                },
                {
                  "Key": "UreaN",
                  "Value": "0"
                },
                {
                  "Key": "NH4N",
                  "Value": "0"
                },
                {
                  "Key": "NO3N",
                  "Value": "0"
                },
                {
                  "Key": "UreaAddedInGrazing",
                  "Value": "0"
                },
                {
                  "Key": "MinNPatch",
                  "Value": ""
                }
              ],
              "Name": "ReportingWithPatchesVariables",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "Parent.Name as Zone",
                "[Clock].Today as Date",
                "[Clock].Today.Month as Month",
                "[Clock].Today.Month as Year",
                "[ReportingWithPatchesVariables].Script.UreaReturned as UrineNReturned",
                "[ReportingWithPatchesVariables].Script.NHA as NHA",
                "[PatchManager].Script.NumPatches as NumPatches",
                "[ReportingWithPatchesVariables].Script.AreaUrinePatchesToday as AreaUrinePatchesToday",
                "[ReportingWithPatchesVariables].Script.HerbageGrazed as HerbageGrazed",
                "[ReportingWithPatchesVariables].Script.HerbageGrazedN as HerbageGrazedN",
                "[ReportingWithPatchesVariables].Script.LeachN as LeachN",
                "[ReportingWithPatchesVariables].Script.Denit as Denit",
                "[ReportingWithPatchesVariables].Script.Fixation as Fixation",
                "[ReportingWithPatchesVariables].Script.MinN as MinN",
                "[ReportingWithPatchesVariables].Script.UreaN as UreaN",
                "[ReportingWithPatchesVariables].Script.NH4N as NH4N",
                "[ReportingWithPatchesVariables].Script.NO3N as NO3N",
                "[ReportingWithPatchesVariables].Script.dltOrgC as dltOrgC",
                "[ReportingWithPatchesVariables].Script.dltOrgN as dltOrgN"
              ],
              "EventNames": [
                ""
              ],
              "GroupByVariableName": null,
              "Name": "ReportingWithPatches",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Zone, Models",
              "Area": 1.0,
              "Slope": 0.0,
              "AspectAngle": 0.0,
              "Altitude": 50.0,
              "Name": "P",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Manager, Models",
                  "Code": "using Models.Climate;\r\nusing System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Diagnostics;\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        [Link] private ISummary summary;\r\n        [Link] private Irrigation irrigation;\r\n        [Link] private Clock Clock;\r\n        [Link] private Soil soil;\r\n        [Link] private Weather Met;\r\n        [Link(IsOptional = true)] private IPlant existingCrop;\r\n        private DateTime StartDate;\r\n        private DateTime EndDate;\r\n        [Link]\r\n        private IPhysical soilPhysical;\r\n        //Communication to other modules\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public answerTypes allowIrrigation { get; set; }\r\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string IrrigStart { get; set; }\r\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string IrrigEnd { get; set; }\r\n        [Description(\"Enter the depth to which water deficit is computed (mm)\")]\r\n        public double SoilDepth { get; set; }\r\n        [Description(\"PAW below which soil is considered 'shallow' (mm)\")]\r\n        public double CritPAWForShallow { get; set; }\r\n        [Description(\"Amount of rainfall over the last 3 days to cause pause to irrigator (mm)\")]\r\n        public double CritRainToPause { get; set; }\r\n        [Description(\"Number of days to pause irrigator after critical rainfall (days)\")]\r\n        public double DaysToPauseOnCritRain { get; set; }\r\n\r\n        [Description(\"Shallow Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnShallow { get; set; }\r\n        [Description(\"Shallow Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtShallow { get; set; }\r\n        [Description(\"Shallow Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitShallow { get; set; }\r\n        [Description(\"Shallow Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffShallow { get; set; }\r\n\r\n        [Description(\"Deep Soils: Irrigation return period (days)\")]\r\n        public double IrrigReturnDeep { get; set; }\r\n        [Description(\"Deep Soils: Effective irrigation amount (mm)\")]\r\n        public double IrrigAmtDeep { get; set; }\r\n        [Description(\"Deep Soils: Percentage of PAW at which to irrigate (%)\")]\r\n        public double PercPAWIrrigDeficitDeep { get; set; }\r\n        [Description(\"Deep Soils: Irrigation efficiency (%)\")]\r\n        public double IrrigEffDeep { get; set; }\r\n\r\n        // Outputs\r\n        public double TodayDeficit { get; set; }\r\n        public double TodayDeficit_nve { get; set; }\r\n        public double IrrigDay { get; set; }\r\n        public double SoilPAW { get; set; }\r\n        public double IrrigDeficit { get; set; }\r\n        public double IrrigReturn { get; set; }\r\n        public double IrrigAmt { get; set; }\r\n        public double IrrigEff { get; set; }\r\n        public double Rain3 { get; set; }\r\n\r\n        public double Days2Pause { get; set; }\r\n\r\n        // internal use\r\n        //The date when irrigation start (in date format)\r\n        //The date when irrigation finish (in date format)\r\n        private double RainToday = 0;\r\n        public double[] Rain_3;\r\n\r\n        public enum answerTypes\r\n        {\r\n            /// <summary>a positive answer</summary>\r\n            yes,\r\n            /// <summary>a negative answer</summary>\r\n            no\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"==================================================\", MessageType.Diagnostic);\r\n            summary.WriteMessage(this, \"                CentrePivot initialising          \", MessageType.Diagnostic);\r\n            summary.WriteMessage(this, \"\", MessageType.Diagnostic);\r\n\r\n            IrrigDay = 5000;  //so will reset to 1 on first day\r\n            StartDate = DateTime.Parse(IrrigStart);\r\n            EndDate = DateTime.Parse(IrrigEnd);\r\n\r\n            Rain3 = 0;\r\n            Rain_3 = new double[4];\r\n            Rain_3[0] = 0;\r\n            Rain_3[1] = 0;\r\n            Rain_3[2] = 0;\r\n\r\n            SoilPAW = 0.0;\r\n\r\n            double[] sw_dul = soilPhysical.DULmm;\r\n            double[] sw_15 = soilPhysical.LL15mm;  \r\n            double MySoilDepth = 0;\r\n            for (int z = 0; z < soilPhysical.Thickness.Length; z++)\r\n            {\r\n                MySoilDepth += soilPhysical.Thickness[z];\r\n                if (MySoilDepth <= SoilDepth)\r\n                    SoilPAW += sw_dul[z] - sw_15[z];    \r\n            }\r\n\r\n            if (SoilPAW <= CritPAWForShallow)\r\n            {      \r\n                IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                IrrigReturn = IrrigReturnShallow;\r\n                IrrigAmt = IrrigAmtShallow;\r\n                IrrigEff = IrrigEffShallow;           \r\n                summary.WriteMessage(this, \"  Soil is considered to be shallow \" + CritPAWForShallow + \" \" + SoilPAW, MessageType.Diagnostic);\r\n            }\r\n            else\r\n            {\r\n                IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                IrrigReturn = IrrigReturnDeep;\r\n                IrrigAmt = IrrigAmtDeep;\r\n                IrrigEff = IrrigEffDeep;\r\n                summary.WriteMessage(this, \"  Soil is considered to be deep\", MessageType.Diagnostic);\r\n            }\r\n\r\n            summary.WriteMessage(this, \"  Irrigation critical deficit (mm): \" + IrrigDeficit, MessageType.Diagnostic);\r\n            summary.WriteMessage(this, \"          Irrigation return (days): \" + IrrigReturn, MessageType.Diagnostic);\r\n            summary.WriteMessage(this, \"     Irrigation pumped amount (mm): \" + IrrigAmt, MessageType.Diagnostic);\r\n            summary.WriteMessage(this, \"         Irrigation efficiency (%): \" + IrrigEff, MessageType.Diagnostic);\r\n            summary.WriteMessage(this, \"\", MessageType.Diagnostic);\r\n            summary.WriteMessage(this, \"                CentrePivot initialised\", MessageType.Diagnostic);\r\n            summary.WriteMessage(this, \"==================================================\", MessageType.Diagnostic);\r\n            \r\n        }\r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnSimulationCommencing(object sender, EventArgs e)\r\n        {\r\n        }\r\n\r\n        [EventSubscribe(\"PreparingNewWeatherData\")]\r\n        private void OnPreparingNewWeatherData(object sender, EventArgs e)\r\n        {\r\n            RainToday = Met.Rain; //takes note of how much rain was due to fall today        \r\n        }\r\n\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            int rain = 0;\r\n\r\n            Rain_3[2] = Rain_3[1];\r\n            Rain_3[1] = Rain_3[0];\r\n            Rain_3[0] = RainToday;\r\n            Rain3 = Rain_3[0] + Rain_3[1] + Rain_3[2]; //sums the rain in the last 3 days\r\n            if (Rain3 >= CritRainToPause)\r\n                Days2Pause = DaysToPauseOnCritRain;\r\n            else\r\n                Days2Pause = Days2Pause - 1;\r\n\r\n            double[] sw_dul = soilPhysical.DULmm;\r\n            double[] sw_sw = soil.Water; \r\n            double[] sw_15 = soilPhysical.LL15mm;  \r\n            double MySoilDepth = 0;\r\n\r\n            TodayDeficit = 0.0;\r\n            SoilPAW = 0.0;\r\n\r\n            for (int z = 0; z < soilPhysical.Thickness.Length; z++)\r\n            {\r\n                MySoilDepth += soilPhysical.Thickness[z];\r\n                if (MySoilDepth <= SoilDepth)\r\n                {\r\n                    SoilPAW += sw_dul[z] - sw_15[z];    \r\n                    TodayDeficit += sw_dul[z] - Math.Min(sw_dul[z], sw_sw[z]);\r\n                }\r\n            }\r\n            TodayDeficit_nve = -1 * TodayDeficit;\r\n\r\n            if (isBetween(Clock.Today, StartDate, EndDate))\r\n            {\r\n                if (SoilPAW <= CritPAWForShallow)\r\n                {      \r\n                    IrrigDeficit = PercPAWIrrigDeficitShallow / 100 * SoilPAW;\r\n                    IrrigReturn = IrrigReturnShallow;\r\n                    IrrigAmt = IrrigAmtShallow;\r\n                    IrrigEff = IrrigEffShallow;           \r\n                }\r\n                else\r\n                {\r\n                    IrrigDeficit = PercPAWIrrigDeficitDeep;\r\n                    IrrigReturn = IrrigReturnDeep;\r\n                    IrrigAmt = IrrigAmtDeep;\r\n                    IrrigEff = IrrigEffDeep;\r\n                }\r\n\r\n                if (Days2Pause < 0.5)\r\n                {\r\n                    IrrigDay = IrrigDay + 1;\r\n                    if (IrrigDay > IrrigReturn)\r\n                        IrrigDay = 1;  // and day = 1 is when the irrigation happens                    \r\n\r\n                    if ((TodayDeficit >= IrrigDeficit) && (allowIrrigation == answerTypes.yes))\r\n                    {\r\n                        if (IrrigDay == 1)\r\n                        {\r\n                            double AmountToApply = (IrrigAmt / (IrrigEff / 100.0));\r\n                            irrigation.Apply(AmountToApply);\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n\r\n    }\r\n}\r\n",
                  "Parameters": [
                    {
                      "Key": "allowIrrigation",
                      "Value": "yes"
                    },
                    {
                      "Key": "IrrigStart",
                      "Value": "1-sep"
                    },
                    {
                      "Key": "IrrigEnd",
                      "Value": "30-apr"
                    },
                    {
                      "Key": "SoilDepth",
                      "Value": "500"
                    },
                    {
                      "Key": "CritPAWForShallow",
                      "Value": "60"
                    },
                    {
                      "Key": "CritRainToPause",
                      "Value": "30"
                    },
                    {
                      "Key": "DaysToPauseOnCritRain",
                      "Value": "3"
                    },
                    {
                      "Key": "IrrigReturnShallow",
                      "Value": "2"
                    },
                    {
                      "Key": "IrrigAmtShallow",
                      "Value": "10"
                    },
                    {
                      "Key": "PercPAWIrrigDeficitShallow",
                      "Value": "30"
                    },
                    {
                      "Key": "IrrigEffShallow",
                      "Value": "100"
                    },
                    {
                      "Key": "IrrigReturnDeep",
                      "Value": "4"
                    },
                    {
                      "Key": "IrrigAmtDeep",
                      "Value": "20"
                    },
                    {
                      "Key": "PercPAWIrrigDeficitDeep",
                      "Value": "25"
                    },
                    {
                      "Key": "IrrigEffDeep",
                      "Value": "100"
                    },
                    {
                      "Key": "TodayDeficit",
                      "Value": "123.894"
                    },
                    {
                      "Key": "TodayDeficit_nve",
                      "Value": "-123.894"
                    },
                    {
                      "Key": "IrrigDay",
                      "Value": "3"
                    },
                    {
                      "Key": "SoilPAW",
                      "Value": "63.65"
                    },
                    {
                      "Key": "IrrigDeficit",
                      "Value": "25"
                    },
                    {
                      "Key": "IrrigReturn",
                      "Value": "4"
                    },
                    {
                      "Key": "IrrigAmt",
                      "Value": "20"
                    },
                    {
                      "Key": "IrrigEff",
                      "Value": "100"
                    },
                    {
                      "Key": "Rain3",
                      "Value": "0"
                    },
                    {
                      "Key": "Days2Pause",
                      "Value": "-80"
                    }
                  ],
                  "Name": "CentrePivot",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                  "SurfOM": [],
                  "Canopies": [],
                  "InitialResidueName": "grass",
                  "InitialResidueType": "grass",
                  "InitialResidueMass": 500.0,
                  "InitialStandingFraction": 0.0,
                  "InitialCPR": 0.0,
                  "InitialCNR": 15.0,
                  "Name": "SurfaceOrganicMatter",
                  "ResourceName": "SurfaceOrganicMatter",
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.MicroClimate, Models",
                  "a_interception": 0.0,
                  "b_interception": 1.0,
                  "c_interception": 0.0,
                  "d_interception": 0.0,
                  "SoilHeatFluxFraction": 0.4,
                  "MinimumHeightDiffForNewLayer": 0.0,
                  "NightInterceptionFraction": 0.5,
                  "ReferenceHeight": 2.0,
                  "Name": "MicroClimate",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Irrigation, Models",
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Fertiliser, Models",
                  "Name": "Fertiliser",
                  "ResourceName": "Fertiliser",
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Report, Models",
                  "VariableNames": [
                    "[Clock].Today as Date",
                    "[Zone].Name as PaddockName",
                    "[Weather].Rain",
                    "(sum([NutrientPatchManager].Urea.kgha) + sum([NutrientPatchManager].NH4.kgha) + sum([NutrientPatchManager].NO3.kgha)) as minNPaddock",
                    "sum([NutrientPatchManager].Urea.kgha) as Urea",
                    "sum([NutrientPatchManager].NO3.kgha) as NO3",
                    "sum([NutrientPatchManager].NH4.kgha) as NH4",
                    "[NutrientPatchManager].MineralNEachPatch as MineralNEachPatch",
                    "[Fertiliser].NitrogenApplied as Fertiliser",
                    "[Irrigation].IrrigationApplied as IrrigationApplied",
                    "sum([HE_140mm].SoilWater.PAWmm) as PAW",
                    "[AGPRyegrass].AboveGroundWt + [AGPWhiteClover].AboveGroundWt as AboveGroundWt",
                    "[AGPRyegrass].SoilUptakeN + [AGPWhiteClover].SoilUptakeN as UptakeN",
                    "[AGPRyegrass].AboveGroundWt",
                    "[AGPWhiteClover].AboveGroundWt"
                  ],
                  "EventNames": [
                    "[Clock].EndOfDay"
                  ],
                  "GroupByVariableName": null,
                  "Name": "DailyReport",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Soil, Models",
                  "RecordNumber": 0,
                  "ASCOrder": null,
                  "ASCSubOrder": null,
                  "SoilType": "NZ_sedementary",
                  "LocalName": null,
                  "Site": "-",
                  "NearestTown": "-",
                  "Region": "Plains",
                  "State": "Canterbury",
                  "Country": "New Zealand",
                  "NaturalVegetation": null,
                  "ApsoilNumber": null,
                  "Latitude": 0.0,
                  "Longitude": 0.0,
                  "LocationAccuracy": null,
                  "YearOfSampling": null,
                  "DataSource": "Generic profile descriptions provided by Trevor Webb and data for functional horizions based on SWAMP project results",
                  "Comments": "Bulk density values were measured on the fine earth fraction so values entered into apsim soil are adjusted down to account for stone content (assuming stones are inert from all soil process so their mass and volume is removed from model paramaters).  SAT, DUL, LL15 and Air dry have been adjusted down to account for stone content.  OC has not been adjusted so the model will get the correct carbon and N amounts using the adjusted BD.",
                  "Name": "HE_140mm",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.Physical, Models",
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "ParticleSizeClay": [
                        20.0,
                        24.0,
                        39.0,
                        44.0,
                        44.0,
                        19.0,
                        19.0
                      ],
                      "ParticleSizeSand": [
                        14.5,
                        18.0,
                        13.0,
                        1.0,
                        1.0,
                        15.0,
                        15.0
                      ],
                      "ParticleSizeSilt": [
                        65.5,
                        58.0,
                        48.0,
                        55.0,
                        55.0,
                        66.0,
                        66.0
                      ],
                      "Rocks": null,
                      "Texture": null,
                      "BD": [
                        1.3105,
                        1.524,
                        1.42,
                        1.424,
                        1.424,
                        1.601,
                        1.601
                      ],
                      "AirDry": [
                        0.07675,
                        0.201,
                        0.2985,
                        0.308,
                        0.308,
                        0.162,
                        0.162
                      ],
                      "LL15": [
                        0.1535,
                        0.201,
                        0.2985,
                        0.308,
                        0.308,
                        0.162,
                        0.162
                      ],
                      "DUL": [
                        0.3735,
                        0.332,
                        0.426,
                        0.446,
                        0.446,
                        0.325,
                        0.325
                      ],
                      "SAT": [
                        0.456165,
                        0.39432,
                        0.441525,
                        0.4557,
                        0.456,
                        0.376,
                        0.376
                      ],
                      "KS": [
                        4832.03882317437,
                        389.229035400118,
                        21.6,
                        19.0511637721759,
                        19.051,
                        97.995,
                        97.995
                      ],
                      "BDMetadata": null,
                      "AirDryMetadata": null,
                      "LL15Metadata": null,
                      "DULMetadata": null,
                      "SATMetadata": null,
                      "KSMetadata": null,
                      "RocksMetadata": null,
                      "TextureMetadata": null,
                      "ParticleSizeSandMetadata": null,
                      "ParticleSizeSiltMetadata": null,
                      "ParticleSizeClayMetadata": null,
                      "Name": "Physical",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.154,
                            0.201,
                            0.299,
                            0.308,
                            0.308,
                            0.162,
                            0.162
                          ],
                          "KL": [
                            0.1,
                            0.1,
                            0.1,
                            0.05,
                            0.05,
                            0.05,
                            0.05
                          ],
                          "XF": [
                            1.0,
                            0.8,
                            0.8,
                            0.3,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "AGPRyegrassSoil",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": false,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.154,
                            0.201,
                            0.299,
                            0.308,
                            0.308,
                            0.162,
                            0.162
                          ],
                          "KL": [
                            0.1,
                            0.1,
                            0.1,
                            0.05,
                            0.05,
                            0.05,
                            0.05
                          ],
                          "XF": [
                            1.0,
                            0.8,
                            0.8,
                            0.3,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "AGPWhiteCloverSoil",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": false,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": false,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Organic, Models",
                      "FOMCNRatio": 40.0,
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "Carbon": [
                        4.502,
                        1.91,
                        0.772,
                        0.422,
                        0.422,
                        0.402,
                        0.4
                      ],
                      "CarbonUnits": 0,
                      "SoilCNRatio": [
                        11.0,
                        11.0,
                        11.0,
                        11.0,
                        11.0,
                        11.0,
                        11.0
                      ],
                      "FBiom": [
                        0.048,
                        0.027,
                        0.0195,
                        0.015,
                        0.015,
                        0.015,
                        0.015
                      ],
                      "FInert": [
                        0.382,
                        0.634,
                        0.784,
                        0.924,
                        0.924,
                        0.971,
                        0.985
                      ],
                      "FOM": [
                        347.6697415161641,
                        257.5600792948774,
                        172.6476842098852,
                        85.73430271224917,
                        63.51353358667622,
                        47.05198294088997,
                        25.822675739258056
                      ],
                      "CarbonMetadata": null,
                      "FOMMetadata": null,
                      "Name": "Organic",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": false,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Chemical, Models",
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "PH": [
                        6.0,
                        6.0,
                        6.0,
                        6.0,
                        6.0,
                        6.0,
                        6.0
                      ],
                      "PHUnits": 0,
                      "EC": null,
                      "ESP": null,
                      "ECMetadata": null,
                      "CLMetadata": null,
                      "ESPMetadata": null,
                      "PHMetadata": null,
                      "Name": "Chemical",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": false,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.WaterModel.WaterBalance, Models",
                      "SummerDate": "1-Oct",
                      "SummerU": 9.0,
                      "SummerCona": 4.4,
                      "WinterDate": "1-Apr",
                      "WinterU": 6.0,
                      "WinterCona": 3.0,
                      "DiffusConst": 88.0,
                      "DiffusSlope": 35.0,
                      "Salb": 0.13,
                      "CN2Bare": 73.0,
                      "CNRed": 20.0,
                      "CNCov": 0.8,
                      "DischargeWidth": "NaN",
                      "CatchmentArea": "NaN",
                      "PSIDul": -100.0,
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "SWCON": [
                        0.496441652363301,
                        0.365575319464424,
                        0.373877122593127,
                        0.0758548332020159,
                        0.076,
                        0.306,
                        0.306
                      ],
                      "KLAT": null,
                      "Name": "SoilWater",
                      "ResourceName": "WaterBalance",
                      "Children": [],
                      "Enabled": false,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Water, Models",
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.3735,
                        0.332,
                        0.426,
                        0.446,
                        0.446,
                        0.325,
                        0.325
                      ],
                      "RelativeTo": null,
                      "FilledFromTop": true,
                      "Name": "Water",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": false,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.NutrientPatching.NutrientPatchManager, Models",
                      "MaximumNitrogenAvailableToPlants": 3.0,
                      "NPartitionApproach": 0,
                      "AutoAmalgamationApproach": 0,
                      "basePatchApproach": 0,
                      "AllowPatchAmalgamationByAge": false,
                      "PatchAgeForForcedMerge": 0.0,
                      "LayerForNPartition": -99.0,
                      "Name": "NutrientPatchManager",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": false,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.CERESSoilTemperature, Models",
                      "Name": "Temperature",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": false,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "InitialValues": [
                        18.98,
                        4.625,
                        1.047,
                        1.047,
                        1.031,
                        1.0,
                        1.0
                      ],
                      "InitialValuesUnits": 0,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "NO3",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": false,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.883817561664043,
                        0.31295758807944385,
                        0.1046813499706893,
                        0.10468134997068919,
                        0.13645423331379297,
                        0.2,
                        0.2
                      ],
                      "InitialValuesUnits": 0,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "NH4",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": false,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                      "Thickness": null,
                      "InitialValues": null,
                      "InitialValuesUnits": 0,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "PlantAvailableNO3",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": false,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                      "Thickness": null,
                      "InitialValues": null,
                      "InitialValuesUnits": 0,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "PlantAvailableNH4",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": false,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "InitialValuesUnits": 1,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": null,
                      "FIP": null,
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "Urea",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": false,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "doyGermination": 275,
                  "daysEmergenceToAnthesis": 120,
                  "daysAnthesisToMaturity": 85,
                  "degreesDayForAnthesis": 1100.0,
                  "degreesDayForMaturity": 900.0,
                  "daysAnnualsFactor": 45,
                  "FVPDFunction": {
                    "$type": "Models.Functions.LinearInterpolationFunction, Models",
                    "Name": "LinearInterpolationFunction",
                    "ResourceName": null,
                    "Children": [],
                    "Enabled": true,
                    "ReadOnly": false
                  },
                  "LightProfile": null,
                  "InitialShootDM": 1500.0,
                  "InitialRootDM": 450.0,
                  "InitialRootDepth": 750.0,
                  "initialDMFractionsGrasses": [
                    0.15,
                    0.25,
                    0.25,
                    0.05,
                    0.05,
                    0.1,
                    0.1,
                    0.05,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "initialDMFractionsLegumes": [
                    0.16,
                    0.23,
                    0.22,
                    0.05,
                    0.03,
                    0.05,
                    0.05,
                    0.01,
                    0.04,
                    0.08,
                    0.08
                  ],
                  "initialDMFractionsForbs": [
                    0.2,
                    0.2,
                    0.15,
                    0.05,
                    0.1,
                    0.15,
                    0.1,
                    0.05,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "PhotosyntheticEfficiency": 0.01,
                  "PhotosynthesisCurveFactor": 0.8,
                  "FractionPAR": 0.5,
                  "ReferenceCO2": 380.0,
                  "CO2EffectScaleFactor": 700.0,
                  "CO2EffectOffsetFactor": 600.0,
                  "CO2EffectMinimum": 0.7,
                  "CO2EffectExponent": 2.0,
                  "ReproSeasonDurationCoeff": 2.0,
                  "ReproSeasonShouldersLengthFactor": 1.0,
                  "ReproSeasonOnsetDurationFactor": 0.6,
                  "RelativeTurnoverEmerging": 2.0,
                  "DetachmentDroughtCoefficient": 3.0,
                  "DetachmentDroughtEffectMin": 0.1,
                  "TurnoverStockFactor": 0.01,
                  "TurnoverDefoliationEffectMin": 0.025,
                  "MinimumGreenLeafProp": 0.8,
                  "MinimumGreenRootProp": 0.5,
                  "Name": "AGPRyegrass",
                  "ResourceName": "AGPRyegrass",
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "doyGermination": 275,
                  "daysEmergenceToAnthesis": 120,
                  "daysAnthesisToMaturity": 85,
                  "degreesDayForAnthesis": 1100.0,
                  "degreesDayForMaturity": 900.0,
                  "daysAnnualsFactor": 45,
                  "FVPDFunction": {
                    "$type": "Models.Functions.LinearInterpolationFunction, Models",
                    "Name": "LinearInterpolationFunction",
                    "ResourceName": null,
                    "Children": [],
                    "Enabled": true,
                    "ReadOnly": false
                  },
                  "LightProfile": null,
                  "InitialShootDM": 500.0,
                  "InitialRootDM": 150.0,
                  "InitialRootDepth": 350.0,
                  "initialDMFractionsGrasses": [
                    0.15,
                    0.25,
                    0.25,
                    0.05,
                    0.05,
                    0.1,
                    0.1,
                    0.05,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "initialDMFractionsLegumes": [
                    0.16,
                    0.23,
                    0.22,
                    0.05,
                    0.03,
                    0.05,
                    0.05,
                    0.01,
                    0.04,
                    0.08,
                    0.08
                  ],
                  "initialDMFractionsForbs": [
                    0.2,
                    0.2,
                    0.15,
                    0.05,
                    0.1,
                    0.15,
                    0.1,
                    0.05,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "PhotosyntheticEfficiency": 0.01,
                  "PhotosynthesisCurveFactor": 0.8,
                  "FractionPAR": 0.5,
                  "ReferenceCO2": 380.0,
                  "CO2EffectScaleFactor": 700.0,
                  "CO2EffectOffsetFactor": 600.0,
                  "CO2EffectMinimum": 0.7,
                  "CO2EffectExponent": 2.0,
                  "ReproSeasonDurationCoeff": 2.0,
                  "ReproSeasonShouldersLengthFactor": 1.0,
                  "ReproSeasonOnsetDurationFactor": 0.6,
                  "RelativeTurnoverEmerging": 2.0,
                  "DetachmentDroughtCoefficient": 3.0,
                  "DetachmentDroughtEffectMin": 0.1,
                  "TurnoverStockFactor": 0.01,
                  "TurnoverDefoliationEffectMin": 0.025,
                  "MinimumGreenLeafProp": 0.8,
                  "MinimumGreenRootProp": 0.5,
                  "Name": "AGPWhiteClover",
                  "ResourceName": "AGPWhiteClover",
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            }
          ],
          "Enabled": false,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "Patch comparison",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NHA",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatches",
                  "XFieldName": "Date",
                  "YFieldName": "NHA",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "NHA",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Denitrification",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatches",
                  "XFieldName": "Date",
                  "YFieldName": "Denit",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "denit",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Leaching",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatches",
                  "XFieldName": "Date",
                  "YFieldName": "LeachN",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "leach",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Fixation",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatches",
                  "XFieldName": "Date",
                  "YFieldName": "Fixation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "fix",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Urea N returned",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatches",
                  "XFieldName": "Date",
                  "YFieldName": "UrineNReturned",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Herbage grazed",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatches",
                  "XFieldName": "Date",
                  "YFieldName": "HerbageGrazed",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            }
          ],
          "Enabled": false,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "Daily Uniform",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Aboveground wt",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "AboveGroundWt",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": false,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Aboveground wt for each species",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "AGPRyegrass.AboveGroundWt",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "AGPWhiteClover.AboveGroundWt",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Whiteclover",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "MinNPaddock",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "minNPaddock",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": false,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "N",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -990142,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Fertiliser",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "NH4",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "NO3",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16747854,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "Urea",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Water",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "PAW",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "PAW",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16747854,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "Weather.Rain",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Rainfall",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "IrrigationApplied",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "N Uptake",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16747854,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "UptakeN",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": false,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Mineral N for each patch",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(1)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(2)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(3)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16747854,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(4)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -2793984,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(5)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch5",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(6)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch6",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -990142,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(7)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch7",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(8)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch8",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(9)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch9",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(10)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch10",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            }
          ],
          "Enabled": false,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "Daily Explicit",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Aboveground wt",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "AboveGroundWt",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": false,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName=\"P\"",
                  "Name": "Series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Aboveground wt for each species",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "AGPRyegrass.AboveGroundWt",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName=\"P\"",
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "AGPWhiteClover.AboveGroundWt",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName=\"P\"",
                  "Name": "Whiteclover",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "MinNPaddock",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "minNPaddock",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": false,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName=\"P\"",
                  "Name": "Series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Mineral N for each paddock",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -2793984,
                  "FactorToVaryColours": "PaddockName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "minNPaddock",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\"",
                  "Name": "series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "N",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -990142,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName=\"P\"",
                  "Name": "Fertiliser",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "NH4",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName=\"P\"",
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "NO3",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName=\"P\"",
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16747854,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "Urea",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName=\"P\"",
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Water",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "PAW",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName=\"P\"",
                  "Name": "PAW",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16747854,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "Weather.Rain",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName=\"P\"",
                  "Name": "Rainfall",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "IrrigationApplied",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName=\"P\"",
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "N Uptake",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16747854,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "UptakeN",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": false,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName=\"P\"",
                  "Name": "series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Mineral N for each patch",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(1)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName='P'",
                  "Name": "Patch1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(2)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchExplicit\" and PaddockName='P'",
                  "Name": "Patch2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(3)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16747854,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(4)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -2793984,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(5)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch5",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(6)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch6",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -990142,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(7)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch7",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(8)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch8",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(9)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch9",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(10)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchUniform\"",
                  "Name": "Patch10",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            }
          ],
          "Enabled": false,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "Daily Gridded",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Aboveground wt",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "AboveGroundWt",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": false,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Aboveground wt for each species",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "AGPRyegrass.AboveGroundWt",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Ryegrass",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "AGPWhiteClover.AboveGroundWt",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Whiteclover",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "MinNPaddock",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "minNPaddock",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": false,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "N",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -990142,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Fertiliser",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "NH4",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "NH4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "NO3",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "NO3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16747854,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "Urea",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Urea",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Water",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "PAW",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "PAW",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16747854,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "Weather.Rain",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Rainfall",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "IrrigationApplied",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "N Uptake",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16747854,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "UptakeN",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": false,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Mineral N for each patch",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(1)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Patch1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(2)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Patch2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(3)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Patch3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16747854,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(4)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Patch4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -2793984,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(5)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Patch5",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(6)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Patch6",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -990142,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(7)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Patch7",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(8)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Patch8",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(9)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Patch9",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "DailyReport",
                  "XFieldName": "Date",
                  "YFieldName": "MineralNEachPatch(10)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[SimulationName] = \"PatchGridded\"",
                  "Name": "Patch10",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            }
          ],
          "Enabled": false,
          "ReadOnly": false
        }
      ],
      "Enabled": false,
      "ReadOnly": false
    },
    {
      "$type": "Models.Factorial.Experiment, Models",
      "DisabledSimNames": null,
      "Name": "ExpRange",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Factorial.Factors, Models",
          "Name": "Factors",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Factorial.Permutation, Models",
              "Name": "Permutation",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Factorial.Factor, Models",
                  "Specification": "[PatchAndZoneManager].Script.ZoneCount = 1, 2, 5, 10, 20",
                  "Name": "ZoneCount",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Factorial.Factor, Models",
                  "Specification": "[PatchAndZoneManager].Script.PseudoPatches=true,false",
                  "Name": "Type",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.CompositeFactor, Models",
              "Specifications": [
                "[PatchAndZoneManager].Script.ZoneCount = 10",
                "[PatchAndZoneManager].Script.PseudoPatches = true"
              ],
              "Paths": null,
              "Values": null,
              "Name": "Patches",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.CompositeFactor, Models",
              "Specifications": [
                "[PatchAndZoneManager].Script.ZoneCount = 10",
                "[PatchAndZoneManager].Script.PseudoPatches = false"
              ],
              "Paths": null,
              "Values": null,
              "Name": "Zones",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Simulation, Models",
          "Descriptors": null,
          "Name": "ExpBase",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Clock, Models",
              "Start": "1972-01-01T00:00:00",
              "End": "1973-12-31T00:00:00",
              "Name": "Clock",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Summary, Models",
              "Verbosity": 100,
              "Name": "SummaryFile",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Climate.Weather, Models",
              "ConstantsFile": null,
              "FileName": "%root%\\Tests\\WeatherFiles\\Ruakura.met",
              "ExcelWorkSheetName": "",
              "Name": "Weather",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
              "Name": "Soil Arbitrator",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 1.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "SoilHeatFluxFraction": 0.4,
              "MinimumHeightDiffForNewLayer": 0.0,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Soils.NutrientPatching;\nusing Models.Interfaces;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing APSIM.Shared.Utilities;\nusing Models.Surface;\nusing Models.Soils;\nusing System.Xml.Serialization;\nusing Models.AgPasture;\nusing Models.Zones;\nusing Models.PMF;\nusing Models.Core;\nusing Models.Core.ApsimFile;\nusing System;\nusing System.Linq;\nusing Models.Climate;\n\nnamespace Models\n{\n    [Serializable]\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private Clock clock;\n        [Link] private Soil soil;\n        [Link] private ISummary summary;\n        [Link] private Weather weather;\n        [Link] private Zone zone;\n        [Link] private IPhysical soilPhysical;\n        [Link] private List<NutrientPatchManager> patchManagers;\n\n        private Sward sward;\n      \n        [Description(\"Verbose reporting to the summary file?\")]\n        public bool Verbose { get; set; }\n        \n        [Description(\"Should this simulation create Patches? If not then explict Zones will be created\")]\n        public bool PseudoPatches { get; set; }\n        \n        [Description(\"How many patches or zones should be created?\")]\n        public int ZoneCount { get; set; }\n        \n        [Description(\"Nature of nutrient return\")]\n        public UrineReturnTypes UrineReturnType { get; set; }\n\n        [Description(\"Pattern (spatial) of nutrient return\")]\n        public UrineReturnPatterns UrineReturnPattern { get; set; }\n\n        [Description(\"Depth of urine penetration (mm)\")]\n        public double UrineDepthPenetration { get; set; }\n\n        \n        public int ZoneNumForUrine { get; set; }    // zone or patch that urine will be applied to\n        public int NumZonesForUrine { get; set; }   // not enabled yet but for applying urine across more than one zone or patch\n        public double DivisorForReporting { get; set; }   // \n        \n        public double HarvestedWt { get; set; }     // from the whole paddock\n        public double HarvestedN { get; set; }      // from the whole paddock\n        public double AmountUrineNReturned { get; set; }   // to the whole paddock\n        public double AmountDungNReturned { get; set; }    // to the whole paddock\n        public double AmountDungCReturned { get; set; }    // to the whole paddock\n        \n        private double[] MonthlyUrineNAmt;                 // breaks the N balance but useful for testing\n        private bool GrazeToday;\n\t\tprivate double[] UrineDepthPenetrationArray;\n\n\t\t[NonSerialized]\n\t\tRandom pseudoRandom; // = new Random(666);  // sets a constant seed value\n\n\n        public enum UrineReturnPatterns\n        {\n            // <summary>Not enabled Uniform</summary>\n            //UniformAcrossAllPatches,\n            /// <summary>Rotating in order</summary>\n            RotatingInOrder,\n            /// <summary>Not enabled Random</summary>\n            Random,\n            /// <summary>Not enabled Pseudo-random</summary>\n            PseudoRandom\n        }\n        \n        public enum UrineReturnTypes\n        {\n            /// <summary>FromHarvest</summary>\n            FromHarvest,\n            /// <summary>SetMonthly</summary>\n            SetMonthly\n        }\n\n\n        public override void OnPreLink()\n        {\n            var simulation = Parent.Parent as Simulation;\n            var zone = simulation.FindChild<Zone>();\n                \n\t\t\t// Set the maximum N uptake for all species\n\t\t\tforeach (var species in zone.FindAllDescendants<PastureSpecies>())\n\t\t\t{\n\t\t\t\tvar root = species.FindChild<PastureBelowGroundOrgan>();\n\t\t\t\troot.MaximumNUptake = 1.5;\n\t\t\t}\n\t\t\t\t\n            if (!PseudoPatches)\n            {\n\t            zone.Area = 1.0 / ZoneCount;  // and then this will apply to all the new zones\n       \t\t\tforeach (var species in zone.FindAllDescendants<PastureSpecies>())\n\t\t\t\t{\n\t\t\t\t\tvar root = species.FindChild<PastureBelowGroundOrgan>();\n\t\t\t\t\troot.MaximumNUptake = 3.0;\n\t\t\t\t\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < ZoneCount-1; i++)\n\t            {\n\t                var newZone = Apsim.Clone(zone);\n\t                Structure.Add(newZone, simulation);\n\t            }\n\t         }\n        }\n\n        [EventSubscribe(\"StartOfSimulation\")] private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n        Debugger.Break();\n            if (Verbose && !PseudoPatches)\n            \tsummary.WriteMessage(this, \"Created \" + ZoneCount + \" identical zones, each of area \" + (1.0 / ZoneCount) + \" ha\", MessageType.Diagnostic);\n\n            if (Verbose)\n            \tsummary.WriteMessage(this, \"Initialising the ZoneManager for grazing, urine return and reporting\", MessageType.Diagnostic);\n\n            sward = new Sward(zone); \n\t\t\tpseudoRandom = new Random(666);  // sets a constant seed value\n\t\t\t\n\t\t\tif (PseudoPatches)\n\t\t\t\tDivisorForReporting = 1.0;\n\t\t\telse\n\t\t\t\tDivisorForReporting = ZoneCount;\n\n            MonthlyUrineNAmt = new double[] { 24, 19, 17, 12, 8, 5, 5, 10, 16, 19, 23, 25 }; //This is to get a pattern of return that varies with month but removes the variation that might be caused by small changes in herbage growth\n            //MonthlyUrineNAmt = new double[] { 100, 100, 100, 12, 8, 5, 5, 10, 16, 19, 23, 25 }; //This is to get a pattern of return that varies with month but removes the variation that might be caused by small changes in herbage growth\n\n            if (PseudoPatches)\n            {\n                foreach (var patchManager in patchManagers)\n                {\n                    //patchManager.MaximumNitrogenAvailableToPlants = 0.45; This is now set in pre start\n                    patchManager.NPartitionApproach = PartitionApproachEnum.BasedOnConcentrationAndDelta;\n                    patchManager.AutoAmalgamationApproach = AutoAmalgamationApproachEnum.None;\n                    patchManager.basePatchApproach = BaseApproachEnum.IDBased;\n                    patchManager.AllowPatchAmalgamationByAge = false;\n                    patchManager.PatchAgeForForcedMerge = 1000000.0;  // ie don't merge                                \n                }\n\n                int[] PatchToAddTo = new int[1];  //need an array variable for this\n                string[] PatchNmToAddTo = new string[1];  \n                int nPatchesAdded = 0;\n                double NewArea = 1.0 / ZoneCount;\n\t\t\t\t\n                while (nPatchesAdded < ZoneCount - 1)\n                {\n                    AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();\n                    NewPatch.DepositionType = DepositionTypeEnum.ToNewPatch;\n                    NewPatch.AreaFraction = NewArea;\n                    PatchToAddTo[0] = 0;\n                    PatchNmToAddTo[0] = \"0\";\n                    NewPatch.AffectedPatches_id = PatchToAddTo;\n                    NewPatch.AffectedPatches_nm = PatchNmToAddTo;\n                    NewPatch.SuppressMessages = Verbose;\n\n                    foreach (var patchManager in patchManagers)\n                        patchManager.Add(NewPatch);\n                    nPatchesAdded += 1;\n                }                \n\n                if (Verbose)\n                \tsummary.WriteMessage(this, patchManagers[0].NumPatches.ToString() + \" pseudopatches have been created\", MessageType.Diagnostic);\n            }\n\n            if (Verbose)\n            \tsummary.WriteMessage(this, \"Finished initialising the Manager for grazing, urine return and reporting\", MessageType.Diagnostic);\n\n            NumZonesForUrine = 1;  // in the future this might be > 1\n            ZoneNumForUrine = -1;  // this will be incremented to 0 (first zone) below \n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {    \n\n            // if this is the start of the simulation then sort out the depth for the urine penetration. Can't do this in initialisation because of the module order\n            if (clock.Today == clock.StartDate)\n                UrinePenetration();\n\n            GrazeToday = false;\n\t\t\tif (clock.Today.AddDays(1).Day == 1)    // why separate this from the if below?  - to allow for multiple options in the future\n                GrazeToday = true;\n\n            if (GrazeToday)\n            {\n                if (Verbose)\n                \tsummary.WriteMessage(this, \"Doing grazing\", MessageType.Diagnostic);\n\n                // do the herbage removal part of the grazing\n                int i = -1;  // to use as a zone counter\n                HarvestedWt = 0.0;\n                HarvestedN = 0.0;\n                foreach (Zone zone in this.Parent.FindAllInScope<Zone>())   // NOTE - this is a zone regardless of pseudopatches \n                {\n                    i += 1;\n                    var sward = new Sward(zone);\n                    sward.Graze(amount: 1000.0, type: \"SetResidueAmount\", Verbose);   // note that I have hardcoded the grazing residual for now\n                    HarvestedWt += sward.HarvestedWt * zone.Area;\n                    HarvestedN += sward.HarvestedN * zone.Area;\n                    if (Verbose)\n                    \tsummary.WriteMessage(this, \"Just harvested \" + HarvestedWt + \" from Zone \" + zone.Name, MessageType.Diagnostic);\n                }\n\n                if (UrineReturnType == UrineReturnTypes.FromHarvest)\n                {\n                    AmountUrineNReturned = HarvestedN * 0.50;  // \n                    AmountDungNReturned = HarvestedN * 0.35;  // \n                    AmountDungCReturned = AmountDungNReturned * 20;\n                }\n                else if (UrineReturnType == UrineReturnTypes.SetMonthly)\n                {\n                \tAmountUrineNReturned = MonthlyUrineNAmt[clock.Today.Month - 1];   //  hardcoded as an input\n                \tAmountDungNReturned = AmountUrineNReturned * (0.35 / 0.50);  // \n                \tAmountDungCReturned = AmountDungNReturned * 20;\n                }\n                if (Verbose)\n                \tsummary.WriteMessage(this, \"The amount of urine N to be returned to the whole paddock is \" + AmountUrineNReturned, MessageType.Diagnostic);\n\n                DoUrineReturn();\n\n                DoTramplingAndDungReturn();\n\n                if (Verbose)\n                \tsummary.WriteMessage(this, \"Finished Grazing\", MessageType.Diagnostic);\n\n            }\n        }\n\n        public void DoTramplingAndDungReturn()\n        {\n \t\t\t// Note that dung is assumed to be spread uniformly over the paddock (patches or sones).\n \t\t\t// There is no need to bring zone area into the calculations here but zone area must be included for variables reported FROM the zone to the upper level\n \t\t\t           \n            int i = -1;  // patch or paddock counter\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>())\n            {\n                i += 1;\n                SurfaceOrganicMatter surfaceOM = zone.FindInScope<SurfaceOrganicMatter>() as SurfaceOrganicMatter; \n\n                // do some trampling of litter\n                // accelerate the movement of surface litter into the soil - do this before the dung is added\n                double temp = surfaceOM.Wt * 0.1;\n\n                TillageType trampling = new TillageType();\n                surfaceOM.Incorporate(fraction: (double) 0.1, depth: (double)100.0, Verbose);\n\n                if (Verbose)\n                \tsummary.WriteMessage(this, \"For patch \" + i + \" the amount of litter trampled was \" + temp + \" and the remaining litter is \" + (surfaceOM.Wt), MessageType.Diagnostic);\n\n                // move the dung to litter  \n                AddFaecesType dung = new AddFaecesType();\n                dung.OMWeight = AmountDungCReturned / 0.4;  //assume dung C is 40% of OM  \n                dung.OMN = AmountDungNReturned;\n                surfaceOM.AddFaeces(dung);\n                if (Verbose)\n                \tsummary.WriteMessage(this, \"For patch \" + i + \" the amount of dung DM added to the litter was \" + (AmountDungCReturned / 0.4) + \" and the amount of N added in the dung was \" + (AmountDungNReturned), MessageType.Diagnostic);\n\n            } \n        }\n\n        public void DoUrineReturn()\n        {\n            GetZoneForUrineReturn();  \n\n      \t\tif (Verbose)\n      \t\t\tsummary.WriteMessage(this, \"The Zone for urine return is \" + ZoneNumForUrine, MessageType.Diagnostic);\n\n            if (!PseudoPatches)\n            {\n            \tint i = -1; //to count the zones\n\t            foreach (Zone zone in this.Parent.FindAllInScope<Zone>())\n    \t        {\n    \t            i += 1;\n    \t            if (i == ZoneNumForUrine)\n    \t            {\n    \t                Fertiliser thisFert = zone.FindInScope<Fertiliser>() as Fertiliser;\n\n  \t                    thisFert.Apply(amount: AmountUrineNReturned / zone.Area, \n  \t                    \t\ttype: Fertiliser.Types.UreaN, \n  \t                    \t\tdepthTop: 0.0, \n  \t                    \t\tdepthBottom: UrineDepthPenetration, \n  \t                    \t\tdoOutput: Verbose);\n                                        \n    \t         \t\tif (Verbose)\n    \t         \t\t\tsummary.WriteMessage(this, AmountUrineNReturned + \" urine N added to Zone \" + i + \", the local load was \" + AmountUrineNReturned / zone.Area + \" kg N /ha\", MessageType.Diagnostic);\n    \t             }\n             \t}\n        \t}\n        \telse // PseudoPatches\n        \t{\n\t\t                int[] PatchToAddTo = new int[1];  //because need an array variable for this\n        \t\t        string[] PatchNmToAddTo = new string[0];  //need an array variable for this\n        \t\t        //List<IModel> zones = this.FindAllInScope<Zone>().OfType<IModel>().ToList();   //TODO ask Dean - is all this needed?\n        \t\t        double[] UreaToAdd = new double[soilPhysical.Thickness.Length];  \n\n        \t\t        for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\n        \t\t            UreaToAdd[ii] = UrineDepthPenetrationArray[ii]  * AmountUrineNReturned * ZoneCount;\n\n        \t\t        // needed??   UreaReturned += AmountFertNReturned;\n\n        \t\t        AddSoilCNPatchType CurrentPatch = new AddSoilCNPatchType();\n        \t\t        CurrentPatch.Sender = \"manager\";\n        \t\t        CurrentPatch.DepositionType = DepositionTypeEnum.ToSpecificPatch;\n        \t\t        PatchToAddTo[0] = ZoneNumForUrine;\n        \t\t        CurrentPatch.AffectedPatches_id = PatchToAddTo;\n        \t\t        CurrentPatch.AffectedPatches_nm = PatchNmToAddTo;\n        \t\t        CurrentPatch.Urea = UreaToAdd;\n\n        \t\t        var patchManager = soil.FindChild<NutrientPatchManager>(); \n\n    \t         \t\tif (Verbose)\n\t        \t\t        summary.WriteMessage(this, \"Patch MinN prior to urine return: \" + patchManager.MineralNEachPatch[ZoneNumForUrine], MessageType.Diagnostic);\n        \t\t        patchManager.Add(CurrentPatch); \n    \t         \t\tif (Verbose)\n\t        \t\t        summary.WriteMessage(this, \"Patch MinN after urine return: \" + patchManager.MineralNEachPatch[ZoneNumForUrine], MessageType.Diagnostic);\n        \t} \n        }\n\n        public void GetZoneForUrineReturn()\n        {\n            if (UrineReturnPattern == UrineReturnPatterns.RotatingInOrder) \n            {\n\t            ZoneNumForUrine += 1;  //increment the zone number - it was initialised at -1. NOTE, ZoneNumForUrine is used for both zones and patches\n\t            if (ZoneNumForUrine >= ZoneCount)\n\t                ZoneNumForUrine = 0;  // but reset back to the first patch if needed\n            }\n            else if (UrineReturnPattern == UrineReturnPatterns.Random)\n            {\n\t            Random rnd = new Random();\n\t            ZoneNumForUrine = rnd.Next(0, ZoneCount); // in C# the maximum value (ZoneCount) will not be selected\n            }\n            else if (UrineReturnPattern == UrineReturnPatterns.PseudoRandom)\n            {\n\t            ZoneNumForUrine = pseudoRandom.Next(0, ZoneCount); // in C# the maximum value (ZoneCount) will not be selected\n            }\n\t\t\telse\n\t\t\t\tthrow new Exception(\"UrineResturnPattern not recognised\");\n\n\t\t\tif (Verbose)\n            \tsummary.WriteMessage(this, \"The next zone/patch for urine return is \" + ZoneNumForUrine, MessageType.Diagnostic);\n        }\n\n\n        public void UrinePenetration()\n        {\n            // note that this only looks at the first paddock and assumes that all the paddocks are the same\n            int iii = -1;  // to use as a patch counter\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\n            {\n                iii += 1;\n                if (iii == 0)\n                {\n                    Soil soil = zone.FindInScope<Soil>() as Soil;\n                    double tempDepth = 0.0;\n                    UrineDepthPenetrationArray = new double[soilPhysical.Thickness.Length];\n                    for (int i = 0; i <= (soilPhysical.Thickness.Length - 1); i++)\n                    {\n                        tempDepth += soilPhysical.Thickness[i];\n                        if (tempDepth <= UrineDepthPenetration)\n                        {\n                            UrineDepthPenetrationArray[i] = soilPhysical.Thickness[i] / UrineDepthPenetration;\n                        }\n                        else\n                        {\n                            UrineDepthPenetrationArray[i] = (UrineDepthPenetration - (tempDepth - soilPhysical.Thickness[i])) / (tempDepth - (tempDepth - soilPhysical.Thickness[i])) * soilPhysical.Thickness[i] / UrineDepthPenetration;\n                            UrineDepthPenetrationArray[i] = Math.Max(0.0, Math.Min(1.0, UrineDepthPenetrationArray[i]));\n                        }\n                        if (Verbose)\n                        \tsummary.WriteMessage(this, \"The proportion of urine applied to the \" + i + \"th layer will be \" + UrineDepthPenetrationArray[i], MessageType.Diagnostic);\n                    }\n                }\n            }\n\n        } \n\n\n        \n   \n    // A class for aggregating a pasture species mix.  ??????????????? is this needed now?\n    [Serializable]\n    class Sward\n    {\n     \tprivate const double Epsilon = 0.000000001;\n        private double amountRequired;\n\n        public Sward(Zone zone)\n        {\n            Species = zone.FindAllDescendants<PastureSpecies>().OfType<IModel>().ToList().Cast<PastureSpecies>().ToList();\n\t\t}\n\t\t\n        public List<PastureSpecies> Species { get; private set; }\n\n        public double HarvestableWt { get { return Species.Sum(sp => sp.Harvestable.Wt); } }\n\n        public double HarvestedWt { get { return Species.Sum(sp => sp.HarvestedWt); } }\n\n        public double HarvestedN { get { return Species.Sum(sp => sp.HarvestedN); } }\n\n        public double StandingHerbageWt { get { return Species.Sum(sp => sp.Standing.Wt); } }\n\n        public double AboveGroundWt { get { return Species.Sum(sp => sp.AboveGroundWt); } }\n\n        public bool IsAlive\n        {\n            get\n            {\n                bool alive = true;\n                Species.ForEach(sp => alive = alive && sp.PlantStatus == \"alive\");\n                return alive;\n            }\n         }\n     \n\n        /// <summary>Removes plant material simulating a graze event.</summary>\n        /// <param name=\"amount\">The DM amount (kg/ha)</param>\n        /// <param name=\"type\">How the amount is interpreted (SetResidueAmount or SetRemoveAmount)</param>\n        public void Graze(double amount, string type, bool Verbose)\n        {\n            double amountAvailable = HarvestableWt;\n            if (IsAlive || (amountAvailable > Epsilon))\n            {\n                // Get the amount required to remove\n                if (type.ToLower() == \"setresidueamount\")\n                {\n                    // Remove all DM above given residual amount\n                    amountRequired = Math.Max(0.0, AboveGroundWt - amount);\n                }\n                else if (type.ToLower() == \"setremoveamount\")\n                {\n                    // Remove a given amount\n                    amountRequired = Math.Max(0.0, amount);\n                }\n                else\n                {\n                    throw new Exception(\"Type of amount to remove on graze not recognized (use \\'SetResidueAmount\\' or \\'SetRemoveAmount\\'\");\n                }\n                // Get the actual amount to remove\n                double amountToRemove = Math.Max(0.0, Math.Min(amountRequired, amountAvailable));\n\n                // Get the amounts to remove by mySpecies:\n                if (amountToRemove > Epsilon)\n                {\n                    double[] fractionToRemove = new double[Species.Count];\n                    for (int s = 0; s < Species.Count; s++)\n                    {\n                        // get the fraction to required for each mySpecies, partition according to available DM to harvest\n                        fractionToRemove[s] = Species[s].Harvestable.Wt / amountAvailable;\n\n                        // remove DM and N for each mySpecies (digestibility is also evaluated)\n                        Species[s].RemoveBiomass(amountToRemove * fractionToRemove[s], Verbose);\n                    }\n                }\n            }\n        }\n\t}\n    }\n}\n",
              "Parameters": [
                {
                  "Key": "Verbose",
                  "Value": "True"
                },
                {
                  "Key": "PseudoPatches",
                  "Value": "True"
                },
                {
                  "Key": "ZoneCount",
                  "Value": "10"
                },
                {
                  "Key": "UrineReturnType",
                  "Value": "SetMonthly"
                },
                {
                  "Key": "UrineReturnPattern",
                  "Value": "RotatingInOrder"
                },
                {
                  "Key": "UrineDepthPenetration",
                  "Value": "200"
                }
              ],
              "Name": "PatchAndZoneManager",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using Newtonsoft.Json;\nusing System.Linq;\nusing System.Collections.Generic;\nusing APSIM.Shared.Utilities;\nusing System.IO;\nusing System.Xml.Serialization;\nusing Models.AgPasture;\nusing Models.Zones;\nusing Models.PMF;\nusing Models.Soils;\nusing Models.Core;\nusing System;\nusing System.Diagnostics;\nusing Models.Interfaces;\nusing Models.Soils.Nutrients;\nusing Models.Soils.NutrientPatching;\n\nnamespace Models\n{\n    [Serializable]\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Soil soil;\n        [Link] private Zone[] zones;\n        [Link] private ISummary summary;\n        \n\n// nitrogen stuff - the array dimension is the number of paddocks\n        [JsonIgnore] public double[] DenitByZone { get; set; }\n        [JsonIgnore] public double[] DenitN2OByZone { get; set; }\n        [JsonIgnore] public double[] LeachedNByZone  { get; set; }\n        [JsonIgnore] public double[] UreaByZone { get; set; }\n        [JsonIgnore] public double[] NH4ByZone { get; set; }\n        [JsonIgnore] public double[] NO3ByZone { get; set; }\n        [JsonIgnore] public double[] MinNByZone  { get; set; }\n        [JsonIgnore] public int ZoneCount  { get; set; }\n\n// pasture stuff - the array dimension is the number of paddocks\n        [JsonIgnore] public double[] HerbageWtByZone { get; set; }\n        [JsonIgnore] public double[] HerbageNByZone { get; set; }\n        [JsonIgnore] public double[] HarvestedWtByZone { get; set; }\n        [JsonIgnore] public double[] HarvestedNByZone { get; set; }\n\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {    \n            Debugger.Break();\n            \n            DenitByZone = new double[zones.Length];\n            DenitN2OByZone = new double[zones.Length];\n            LeachedNByZone = new double[zones.Length];\n            UreaByZone = new double[zones.Length];\n            NH4ByZone = new double[zones.Length];\n            NO3ByZone = new double[zones.Length];\n            MinNByZone = new double[zones.Length];\n            HerbageWtByZone = new double[zones.Length];\n            HerbageNByZone = new double[zones.Length];\n            HarvestedWtByZone = new double[zones.Length];\n            HarvestedNByZone = new double[zones.Length];\n\n            ZoneCount = zones.Length;\n        }\n\n        [EventSubscribe(\"EndOfDay\")]\n        private void OnEndOfDay(object sender, EventArgs e)\n        {\n            //zones = this.FindAllInScope<Zone>().OfType<IModel>().ToList();    \n\n            for (int x = 0; x < zones.Length; x++)\n            {\n\t            var soil = zones[x].FindChild<Soil>();  \n                \n                var patchManager = soil.FindChild<NutrientPatchManager>();  \n                var waterBalance = soil.FindChild<ISoilWater>();                                \n                var Urea = soil.FindChild<ISolute>(\"Urea\");                                \n                var NH4 = soil.FindChild<ISolute>(\"NH4\");                                \n                var NO3 = soil.FindChild<ISolute>(\"NO3\");                                \n\n                DenitByZone[x] = patchManager.DenitrifiedN.Sum();\n                DenitN2OByZone[x] = patchManager.N2Oatm.Sum();\n                LeachedNByZone[x] = waterBalance.LeachNO3;\n                UreaByZone[x] = Urea.kgha.Sum();\n                NH4ByZone[x] = NH4.kgha.Sum();\n                NO3ByZone[x] = NO3.kgha.Sum();\n                //MinNByZone[x] = UreaByZone[x] + NH4ByZone[x] + NO3ByZone[x];\n                MinNByZone[x] = patchManager.MineralN.Sum();\n                \n                var sward = zones[x].FindAllInScope<PastureSpecies>();                                \n                HerbageWtByZone[x] = sward.Sum(species => species.AboveGroundWt); \n                HerbageNByZone[x] = sward.Sum(species => species.AboveGroundN);   \n                HarvestedWtByZone[x] = sward.Sum(species => species.HarvestedWt); \n                HarvestedNByZone[x] = sward.Sum(species => species.HarvestedN); \n\n\n            }            \n\n        }\n\n    }\n}\n",
              "Parameters": [],
              "Name": "ReportingWithZonesHelper",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today as Date",
                "[ReportingWithZonesHelper].Script.ZoneCount as NumZones",
                "Sum of (sum([ReportingWithZonesHelper].Script.DenitByZone) / NumZones) from [ReportingWithZonesPaddock].DayAfterLastOutput to [Clock].Today as Denit",
                "Sum of (sum([ReportingWithZonesHelper].Script.DenitN2OByZone) / NumZones) from [ReportingWithZonesPaddock].DayAfterLastOutput to [Clock].Today as DenitN2O",
                "Sum of (sum([ReportingWithZonesHelper].Script.LeachedNByZone) / NumZones) from [ReportingWithZonesPaddock].DayAfterLastOutput to [Clock].Today as LeachN",
                "Sum of (sum([ReportingWithZonesHelper].Script.HarvestedWtByZone) / NumZones) from [ReportingWithZonesPaddock].DayAfterLastOutput to [Clock].Today as HarvestedWt"
              ],
              "EventNames": [
                "[Clock].EndOfMonth"
              ],
              "GroupByVariableName": null,
              "Name": "ReportingWithZonesPaddock",
              "ResourceName": null,
              "Children": [],
              "Enabled": false,
              "ReadOnly": false
            },
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today as Date",
                "[PatchAndZoneManager].Script.PseudoPatches as PseudoPatches",
                "",
                "",
                "[PatchAndZoneManager].Script.ZoneCount as ZoneCount",
                "[PatchAndZoneManager].Script.DivisorForReporting as Divisor",
                "Sum of (sum([ReportingWithZonesHelper].Script.DenitByZone) / Divisor) from [ReportingWithPatchesPaddock].DayAfterLastOutput to [Clock].Today as Denit",
                "Sum of (sum([ReportingWithZonesHelper].Script.DenitN2OByZone) / Divisor) from [ReportingWithPatchesPaddock].DayAfterLastOutput to [Clock].Today as DenitN2O",
                "Sum of (sum([ReportingWithZonesHelper].Script.LeachedNByZone) / Divisor) from [ReportingWithPatchesPaddock].DayAfterLastOutput to [Clock].Today as LeachN",
                "Sum of (sum([ReportingWithZonesHelper].Script.HarvestedWtByZone) / Divisor) from [ReportingWithPatchesPaddock].DayAfterLastOutput to [Clock].Today as HarvestedWt",
                "Sum of (sum([ReportingWithZonesHelper].Script.MinNByZone) / Divisor) from [ReportingWithPatchesPaddock].DayAfterLastOutput to [Clock].Today  as MineralN",
                "Sum of (sum([ReportingWithZonesHelper].Script.NO3ByZone) / Divisor) from [ReportingWithPatchesPaddock].DayAfterLastOutput to [Clock].Today  as NO3N",
                "Sum of (sum([ReportingWithZonesHelper].Script.NH4ByZone) / Divisor) from [ReportingWithPatchesPaddock].DayAfterLastOutput to [Clock].Today  as NH4N",
                "Sum of (sum([ReportingWithZonesHelper].Script.UreaByZone) / Divisor) from [ReportingWithPatchesPaddock].DayAfterLastOutput to [Clock].Today  as UreaN"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "GroupByVariableName": null,
              "Name": "ReportingWithPatchesPaddock",
              "ResourceName": null,
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Zone, Models",
              "Area": 0.1,
              "Slope": 0.0,
              "AspectAngle": 0.0,
              "Altitude": 50.0,
              "Name": "P",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Manager, Models",
                  "Code": "using Newtonsoft.Json;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Xml.Serialization;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Core;\r\nusing System;\r\nusing Models.Interfaces;\r\n\r\n\r\n\r\n        \r\nnamespace Models\r\n{\r\n    [Serializable] \r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        [Link] private ISummary summary;\r\n        [Link] private Irrigation Irrigation;\r\n        [Link] private Clock Clock;\r\n        [Link] private Soil Soil;\r\n        [Link(IsOptional = true)] private IPlant existingCrop;\r\n        private DateTime StartDate;\r\n        private DateTime EndDate;\r\n        private double TopDUL;\r\n        private double TopLL;\r\n        private int nLayers;\r\n        [Link]\r\n        private IPhysical soilPhysical;\r\n        [Link]\r\n        private ISoilWater waterBalance;\r\n        //Communication to other modules\r\n       \r\n        //User inputs from properties tab\r\n        [Description(\"Turn irrigation on?\")]\r\n        public bool allowIrrigation { get; set; } = true;\r\n\n        [Description(\"Allow reporting to the summary file?\")]\r\n        public bool allowReporting { get; set; }\r\n\n\n        [Description(\"Start of irrigation season (dd-MMM)\")]\r\n        public string seasonStart { get; set; }\r\n\n\n        [Description(\"End of irrigation season (dd-MMM)\")]\r\n        public string seasonEnd { get; set; }\r\n\n\n        [Description(\"Season allocation (mm)\")]\r\n        public double seasonsAllocation { get; set; }\r\n\n\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\r\n        public double triggerDeficit { get; set; }\r\n\n\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\r\n        public double targetDeficit { get; set; }\r\n\n\n        [Description(\"Minimum days for irrigation to return\")]\r\n        public double returndays { get; set; }\r\n\n        [Description(\"Maximum irrigation application (mm/day)\")]\r\n        public double maximumAmount { get; set; }\r\n\n        [Description(\"Depth to calculate PAWC (mm)\")]\r\n        public double depthPAWC { get; set; }\r\n\r\n        //Class members\r\n        [JsonIgnore] public double TopSWdeficit { get; set; }\r\n        [JsonIgnore] public double TopSWC { get; set; }\r\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\r\n        [JsonIgnore] public double AmountToApply { get; set; }\r\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\r\n        \r\n        private bool IrrigationIsAllowed { get; set; }\r\n        private bool SeasonIsOpen { get; set; }\r\n        private bool CropIsActive { get; set; }\r\n        private bool IrrigatorIsAvailable { get; set; }\r\n        private bool SoilIsDry { get; set; }\r\n\r\n    \r\n        //Calculate static soil variables\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {   \r\n            //Set the season dates\r\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\r\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\r\n            \n           \r\n            //Can we irrigate at all?\r\n            IrrigationIsAllowed = false; \r\n            if (allowIrrigation)\r\n                IrrigationIsAllowed = true; \r\n\r\n            //Calculate soil water variables\r\n            double depthFromSurface = 0.0;\r\n            double fracLayer = 0.0;\r\n            nLayers = soilPhysical.Thickness.Length;\r\n            for (int layer = 0; layer < nLayers; layer++)\r\n            {\r\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\r\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\r\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\r\n                depthFromSurface += soilPhysical.Thickness[layer];\r\n                if (depthFromSurface >= depthPAWC)\r\n                    layer = nLayers;\r\n            }\r\n        }\r\n             \r\n        //Determine daily requirement for irrigation\r\n        [EventSubscribe(\"StartOfDay\")]\r\n        private void OnStartOfDay(object sender, EventArgs e)\r\n        {\r\n            //Can we irrigate today?          \r\n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\r\n            if (!SeasonIsOpen)\r\n                SeasonAppliedAmount = 0;\r\n\r\n            //Is there a crop in the ground that needs irrigation?\r\n            CropIsActive = false;\r\n            if ((existingCrop != null) && (existingCrop.IsAlive))\r\n                CropIsActive = true;\r\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\r\n          \r\n            //Is the irrigator available?\r\n            IrrigatorIsAvailable = false;\r\n            DaysSinceIrrigation += 1;\r\n            if (DaysSinceIrrigation >= returndays)\r\n                IrrigatorIsAvailable = true;\r\n          \r\n            //Is the soil dry enough to require irrigation?\r\n            SoilIsDry = false;\r\n            double depthFromSurface = 0.0;\r\n            double fracLayer = 0.0;\r\n            TopSWC = 0.0;\r\n            for (int layer = 0; layer < nLayers; layer++)\r\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\r\n            {\r\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\r\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\r\n                depthFromSurface += soilPhysical.Thickness[layer];\r\n                if (depthFromSurface >= depthPAWC)\r\n                    layer = nLayers;\r\n            }\r\n            \r\n            TopSWdeficit = TopSWC - TopDUL;\r\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\r\n                SoilIsDry = true;\r\n                \r\n            //Are all the conditions ratifying irrigation\r\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\r\n            {\r\n                //Lets bloody well irrigate then!!!!\r\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\r\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\r\n                AmountToApply = Math.Min(AmountToApply,maximumAmount);\r\n                \n                Irrigation.Apply(AmountToApply, doOutput:  allowReporting);\r\n                \n                DaysSinceIrrigation = 0;\r\n                SeasonAppliedAmount += AmountToApply;\r\n            }\r\n        }\r\n        \r\n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\r\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\r\n        {\r\n            bool result = false;\r\n            if (iniDate.DayOfYear < endDate.DayOfYear)\r\n            {\r\n                // period is within one year, ex: summer in the northern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            else\r\n            {\r\n                // period goes over the end of the year, ex: summer in the southern hemisphere\r\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\r\n                    result = true;\r\n            }\r\n            \r\n            return result;\r\n        }\r\n    }\r\n}\r\n",
                  "Parameters": [
                    {
                      "Key": "allowIrrigation",
                      "Value": "True"
                    },
                    {
                      "Key": "allowReporting",
                      "Value": "False"
                    },
                    {
                      "Key": "seasonStart",
                      "Value": "1-sep"
                    },
                    {
                      "Key": "seasonEnd",
                      "Value": "30-mar"
                    },
                    {
                      "Key": "seasonsAllocation",
                      "Value": "10000"
                    },
                    {
                      "Key": "triggerDeficit",
                      "Value": "80"
                    },
                    {
                      "Key": "targetDeficit",
                      "Value": "95"
                    },
                    {
                      "Key": "returndays",
                      "Value": "3"
                    },
                    {
                      "Key": "maximumAmount",
                      "Value": "30"
                    },
                    {
                      "Key": "depthPAWC",
                      "Value": "300"
                    }
                  ],
                  "Name": "AutomaticIrrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Manager, Models",
                  "Code": "using Models.Soils;\r\nusing System;\r\nusing Models.Core;\r\nusing Models.PMF;\r\nusing APSIM.Shared.Utilities;\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    public class Script : Model\r\n    {\r\n        [Link] Clock Clock;\r\n        [Link] Fertiliser Fertiliser;\r\n        \r\n        [Separator(\"A component to apply fertiliser on one or more dates on every year of the simulation\")]\r\n\r\n        [Description(\"Type of fertiliser to apply? \")] \r\n        public Fertiliser.Types FertiliserType { get; set; }\r\n\r\n        [Description(\"Enter the fertilisation dates as dd-mmm with comma separation (any year information entered will be ignored): \")] \r\n        public string[] FertiliserDates { get; set; } \r\n\r\n        [Description(\"Amount of fertiliser to be applied (kg /ha)\")] \r\n        public double Amount { get; set; }\r\n\r\n        [Description(\"Is the above amount to be applied each time? (yes/ticked)? Or is it the total annual amount across all dates (no/unticked)\")] \r\n        public bool AmountType { get; set; }\r\n        \r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {\r\n            foreach (string ddMMM in FertiliserDates)\r\n            {\r\n                if (DateUtilities.DatesEqual(ddMMM, Clock.Today))\r\n                {\r\n                    if (AmountType)\r\n                        Fertiliser.Apply(Amount: Amount, Type: FertiliserType);\r\n                    else\r\n                        Fertiliser.Apply(Amount: Amount / FertiliserDates.Length, Type: FertiliserType);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
                  "Parameters": [
                    {
                      "Key": "FertiliserType",
                      "Value": "UreaN"
                    },
                    {
                      "Key": "FertiliserDates",
                      "Value": "31-jan"
                    },
                    {
                      "Key": "Amount",
                      "Value": "0"
                    },
                    {
                      "Key": "AmountType",
                      "Value": "False"
                    }
                  ],
                  "Name": "Fertilise on fixed dates",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                  "SurfOM": [],
                  "Canopies": [],
                  "InitialResidueName": "grass",
                  "InitialResidueType": "grass",
                  "InitialResidueMass": 500.0,
                  "InitialStandingFraction": 0.0,
                  "InitialCPR": 0.0,
                  "InitialCNR": 15.0,
                  "Name": "SurfaceOrganicMatter",
                  "ResourceName": "SurfaceOrganicMatter",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Irrigation, Models",
                  "Name": "Irrigation",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Fertiliser, Models",
                  "Name": "Fertiliser",
                  "ResourceName": "Fertiliser",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Soil, Models",
                  "RecordNumber": 0,
                  "ASCOrder": null,
                  "ASCSubOrder": null,
                  "SoilType": "NZ_sedementary",
                  "LocalName": null,
                  "Site": "-",
                  "NearestTown": "-",
                  "Region": "Plains",
                  "State": "Canterbury",
                  "Country": "New Zealand",
                  "NaturalVegetation": null,
                  "ApsoilNumber": null,
                  "Latitude": 0.0,
                  "Longitude": 0.0,
                  "LocationAccuracy": null,
                  "YearOfSampling": null,
                  "DataSource": "Generic profile descriptions provided by Trevor Webb and data for functional horizions based on SWAMP project results",
                  "Comments": "Bulk density values were measured on the fine earth fraction so values entered into apsim soil are adjusted down to account for stone content (assuming stones are inert from all soil process so their mass and volume is removed from model paramaters).  SAT, DUL, LL15 and Air dry have been adjusted down to account for stone content.  OC has not been adjusted so the model will get the correct carbon and N amounts using the adjusted BD.",
                  "Name": "HE_140mm",
                  "ResourceName": null,
                  "Children": [
                    {
                      "$type": "Models.Soils.Physical, Models",
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "ParticleSizeClay": [
                        20.0,
                        24.0,
                        39.0,
                        44.0,
                        44.0,
                        19.0,
                        19.0
                      ],
                      "ParticleSizeSand": [
                        14.5,
                        18.0,
                        13.0,
                        1.0,
                        1.0,
                        15.0,
                        15.0
                      ],
                      "ParticleSizeSilt": [
                        65.5,
                        58.0,
                        48.0,
                        55.0,
                        55.0,
                        66.0,
                        66.0
                      ],
                      "Rocks": null,
                      "Texture": null,
                      "BD": [
                        1.31,
                        1.524,
                        1.42,
                        1.424,
                        1.424,
                        1.601,
                        1.601
                      ],
                      "AirDry": [
                        0.077,
                        0.201,
                        0.298,
                        0.308,
                        0.308,
                        0.162,
                        0.162
                      ],
                      "LL15": [
                        0.153,
                        0.201,
                        0.298,
                        0.308,
                        0.308,
                        0.162,
                        0.162
                      ],
                      "DUL": [
                        0.373,
                        0.332,
                        0.426,
                        0.446,
                        0.446,
                        0.325,
                        0.325
                      ],
                      "SAT": [
                        0.456,
                        0.394,
                        0.442,
                        0.456,
                        0.456,
                        0.376,
                        0.376
                      ],
                      "KS": [
                        4832.039,
                        389.229,
                        21.6,
                        19.051,
                        19.051,
                        97.995,
                        97.995
                      ],
                      "BDMetadata": null,
                      "AirDryMetadata": null,
                      "LL15Metadata": null,
                      "DULMetadata": null,
                      "SATMetadata": null,
                      "KSMetadata": null,
                      "RocksMetadata": null,
                      "TextureMetadata": null,
                      "ParticleSizeSandMetadata": null,
                      "ParticleSizeSiltMetadata": null,
                      "ParticleSizeClayMetadata": null,
                      "Name": "Physical",
                      "ResourceName": null,
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.154,
                            0.201,
                            0.299,
                            0.308,
                            0.308,
                            0.162,
                            0.162
                          ],
                          "KL": [
                            0.1,
                            0.1,
                            0.1,
                            0.05,
                            0.05,
                            0.05,
                            0.05
                          ],
                          "XF": [
                            1.0,
                            0.8,
                            0.8,
                            0.3,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "AGPRyegrassSoil",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.154,
                            0.201,
                            0.299,
                            0.308,
                            0.308,
                            0.162,
                            0.162
                          ],
                          "KL": [
                            0.1,
                            0.1,
                            0.1,
                            0.05,
                            0.05,
                            0.05,
                            0.05
                          ],
                          "XF": [
                            1.0,
                            0.8,
                            0.8,
                            0.3,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "AGPWhiteCloverSoil",
                          "ResourceName": null,
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Organic, Models",
                      "FOMCNRatio": 40.0,
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "Carbon": [
                        4.502,
                        1.91,
                        0.772,
                        0.422,
                        0.422,
                        0.402,
                        0.4
                      ],
                      "CarbonUnits": 0,
                      "SoilCNRatio": [
                        11.0,
                        11.0,
                        11.0,
                        11.0,
                        11.0,
                        11.0,
                        11.0
                      ],
                      "FBiom": [
                        0.048,
                        0.027,
                        0.019,
                        0.015,
                        0.015,
                        0.015,
                        0.015
                      ],
                      "FInert": [
                        0.382,
                        0.634,
                        0.784,
                        0.924,
                        0.924,
                        0.971,
                        0.985
                      ],
                      "FOM": [
                        347.67,
                        257.56,
                        172.648,
                        85.734,
                        63.514,
                        47.052,
                        25.823
                      ],
                      "CarbonMetadata": null,
                      "FOMMetadata": null,
                      "Name": "Organic",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Chemical, Models",
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "PH": [
                        6.0,
                        6.0,
                        6.0,
                        6.0,
                        6.0,
                        6.0,
                        6.0
                      ],
                      "PHUnits": 0,
                      "EC": null,
                      "ESP": null,
                      "ECMetadata": null,
                      "CLMetadata": null,
                      "ESPMetadata": null,
                      "PHMetadata": null,
                      "Name": "Chemical",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.WaterModel.WaterBalance, Models",
                      "SummerDate": "1-Oct",
                      "SummerU": 9.0,
                      "SummerCona": 4.4,
                      "WinterDate": "1-Apr",
                      "WinterU": 6.0,
                      "WinterCona": 3.0,
                      "DiffusConst": 88.0,
                      "DiffusSlope": 35.0,
                      "Salb": 0.13,
                      "CN2Bare": 73.0,
                      "CNRed": 20.0,
                      "CNCov": 0.8,
                      "DischargeWidth": "NaN",
                      "CatchmentArea": "NaN",
                      "PSIDul": -100.0,
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "SWCON": [
                        0.496,
                        0.366,
                        0.374,
                        0.076,
                        0.076,
                        0.306,
                        0.306
                      ],
                      "KLAT": null,
                      "Name": "SoilWater",
                      "ResourceName": "WaterBalance",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Swim3, Models",
                      "Salb": 0.13,
                      "CN2Bare": 0.0,
                      "CNRed": 0.0,
                      "CNCov": 0.8,
                      "KDul": 1.0,
                      "PSIDul": -100.0,
                      "VC": true,
                      "DTMin": 0.0,
                      "DTMax": 30.0,
                      "MaxWaterIncrement": 5.0,
                      "SpaceWeightingFactor": 0.0,
                      "SoluteSpaceWeightingFactor": 1.0,
                      "Dis": 0.0,
                      "Disp": 1.0,
                      "A": 2.0,
                      "DTHC": 0.1,
                      "DTHP": 2.0,
                      "Diagnostics": false,
                      "Name": "Swim3",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": false,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Water, Models",
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.373,
                        0.332,
                        0.426,
                        0.446,
                        0.446,
                        0.325,
                        0.325
                      ],
                      "RelativeTo": "LL15",
                      "FilledFromTop": true,
                      "Name": "Water",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.CERESSoilTemperature, Models",
                      "Name": "Temperature",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "InitialValues": [
                        18.0,
                        5.0,
                        4.0,
                        2.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "InitialValuesUnits": 1,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "FIP": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "NO3",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "InitialValuesUnits": 1,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "FIP": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "NH4",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.NutrientPatching.SolutePatch, Models",
                      "Thickness": [
                        200.0,
                        150.0,
                        200.0,
                        350.0,
                        150.0,
                        150.0,
                        300.0
                      ],
                      "InitialValues": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "InitialValuesUnits": 1,
                      "WaterTableConcentration": 0.0,
                      "D0": 0.0,
                      "Exco": [
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0,
                        0.0
                      ],
                      "FIP": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "DepthConstant": 0.0,
                      "MaxDepthSoluteAccessible": 0.0,
                      "RunoffEffectivenessAtMovingSolute": 0.0,
                      "MaxEffectiveRunoff": 0.0,
                      "Name": "Urea",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.NutrientPatching.NutrientPatchManager, Models",
                      "MaximumNitrogenAvailableToPlants": 3.0,
                      "NPartitionApproach": 0,
                      "AutoAmalgamationApproach": 0,
                      "basePatchApproach": 0,
                      "AllowPatchAmalgamationByAge": false,
                      "PatchAgeForForcedMerge": 0.0,
                      "LayerForNPartition": -99.0,
                      "Name": "NutrientPatchManager",
                      "ResourceName": null,
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "doyGermination": 275,
                  "daysEmergenceToAnthesis": 120,
                  "daysAnthesisToMaturity": 85,
                  "degreesDayForAnthesis": 1100.0,
                  "degreesDayForMaturity": 900.0,
                  "daysAnnualsFactor": 45,
                  "FVPDFunction": {
                    "$type": "Models.Functions.LinearInterpolationFunction, Models",
                    "Name": "LinearInterpolationFunction",
                    "ResourceName": null,
                    "Children": [],
                    "Enabled": true,
                    "ReadOnly": false
                  },
                  "LightProfile": null,
                  "InitialShootDM": 1500.0,
                  "InitialRootDM": 450.0,
                  "InitialRootDepth": 750.0,
                  "initialDMFractionsGrasses": [
                    0.15,
                    0.25,
                    0.25,
                    0.05,
                    0.05,
                    0.1,
                    0.1,
                    0.05,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "initialDMFractionsLegumes": [
                    0.16,
                    0.23,
                    0.22,
                    0.05,
                    0.03,
                    0.05,
                    0.05,
                    0.01,
                    0.04,
                    0.08,
                    0.08
                  ],
                  "initialDMFractionsForbs": [
                    0.2,
                    0.2,
                    0.15,
                    0.05,
                    0.1,
                    0.15,
                    0.1,
                    0.05,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "PhotosyntheticEfficiency": 0.01,
                  "PhotosynthesisCurveFactor": 0.8,
                  "FractionPAR": 0.5,
                  "ReferenceCO2": 380.0,
                  "CO2EffectScaleFactor": 700.0,
                  "CO2EffectOffsetFactor": 600.0,
                  "CO2EffectMinimum": 0.7,
                  "CO2EffectExponent": 2.0,
                  "ReproSeasonDurationCoeff": 2.0,
                  "ReproSeasonShouldersLengthFactor": 1.0,
                  "ReproSeasonOnsetDurationFactor": 0.6,
                  "RelativeTurnoverEmerging": 2.0,
                  "DetachmentDroughtCoefficient": 3.0,
                  "DetachmentDroughtEffectMin": 0.1,
                  "TurnoverStockFactor": 0.01,
                  "TurnoverDefoliationEffectMin": 0.025,
                  "MinimumGreenLeafProp": 0.8,
                  "MinimumGreenRootProp": 0.5,
                  "Name": "AGPRyegrass",
                  "ResourceName": "AGPRyegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.AgPasture.PastureSpecies, Models",
                  "doyGermination": 275,
                  "daysEmergenceToAnthesis": 120,
                  "daysAnthesisToMaturity": 85,
                  "degreesDayForAnthesis": 1100.0,
                  "degreesDayForMaturity": 900.0,
                  "daysAnnualsFactor": 45,
                  "FVPDFunction": {
                    "$type": "Models.Functions.LinearInterpolationFunction, Models",
                    "Name": "LinearInterpolationFunction",
                    "ResourceName": null,
                    "Children": [],
                    "Enabled": true,
                    "ReadOnly": false
                  },
                  "LightProfile": null,
                  "InitialShootDM": 500.0,
                  "InitialRootDM": 150.0,
                  "InitialRootDepth": 350.0,
                  "initialDMFractionsGrasses": [
                    0.15,
                    0.25,
                    0.25,
                    0.05,
                    0.05,
                    0.1,
                    0.1,
                    0.05,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "initialDMFractionsLegumes": [
                    0.16,
                    0.23,
                    0.22,
                    0.05,
                    0.03,
                    0.05,
                    0.05,
                    0.01,
                    0.04,
                    0.08,
                    0.08
                  ],
                  "initialDMFractionsForbs": [
                    0.2,
                    0.2,
                    0.15,
                    0.05,
                    0.1,
                    0.15,
                    0.1,
                    0.05,
                    0.0,
                    0.0,
                    0.0
                  ],
                  "PhotosyntheticEfficiency": 0.01,
                  "PhotosynthesisCurveFactor": 0.8,
                  "FractionPAR": 0.5,
                  "ReferenceCO2": 380.0,
                  "CO2EffectScaleFactor": 700.0,
                  "CO2EffectOffsetFactor": 600.0,
                  "CO2EffectMinimum": 0.7,
                  "CO2EffectExponent": 2.0,
                  "ReproSeasonDurationCoeff": 2.0,
                  "ReproSeasonShouldersLengthFactor": 1.0,
                  "ReproSeasonOnsetDurationFactor": 0.6,
                  "RelativeTurnoverEmerging": 2.0,
                  "DetachmentDroughtCoefficient": 3.0,
                  "DetachmentDroughtEffectMin": 0.1,
                  "TurnoverStockFactor": 0.01,
                  "TurnoverDefoliationEffectMin": 0.025,
                  "MinimumGreenLeafProp": 0.8,
                  "MinimumGreenRootProp": 0.5,
                  "Name": "AGPWhiteClover",
                  "ResourceName": "AGPWhiteClover",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Report, Models",
                  "VariableNames": [
                    "[Clock].Today as Date",
                    "//sum([Soil].NutrientPatchManager.Urea) as Urea",
                    "//sum([Soil].NutrientPatchManager.NH4) as NH4",
                    "//sum([Soil].NutrientPatchManager.NO3) as NO3",
                    "//sum([Soil].NutrientPatchManager.DenitrifiedN) as Denit",
                    "//[Soil].SoilWater.LeachUrea as LeachUrea",
                    "//[Soil].SoilWater.LeachNH4 as LeachNH4",
                    "//[Soil].SoilWater.LeachNO3 as LeachNO3",
                    "//sum([Soil].NutrientPatchManager.Organic.N) as OrganicN",
                    "",
                    "",
                    "[Soil].NutrientPatchManager.NH4ForEachPatch as PatchNH4",
                    "",
                    "",
                    "",
                    "//[Soil].NutrientPatchManager.NH4 as NH4"
                  ],
                  "EventNames": [
                    "[Clock].EndOfMonth"
                  ],
                  "GroupByVariableName": null,
                  "Name": "ZoneReport",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": false,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "Patch comparison",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NHA",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "NHA",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "NHA",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Denitrification",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "Denit",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "denit",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Leaching",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "LeachN",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "leach",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Fixation",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "Fixation",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "fix",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Urea N returned",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "UrineNReturned",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": "HerbageGrazed",
                  "Position": 2,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Herbage grazed",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HerbageGrazed",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "ByGrazing",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 2,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HerbageGrazed",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "ByGrazing1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "MinNPatch",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "MinNByPatch(1)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Patch1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "MinNByPatch(2)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Patch2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "MinNByPatch(3)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Patch3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "MinNByPatch(4)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Patch4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "N uptake",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "PastureUptake",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "fix",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "Plots By Zone",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Herbage",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ZoneReport",
                  "XFieldName": "Date",
                  "YFieldName": "PatchNH4(1)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HerbageWtByZone(2)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HerbageWtByZone(3)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HerbageWtByZone(4)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HerbageWtByZone(5)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone5",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "HerbageN",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HerbageNByZone(1)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HerbageNByZone(2)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HerbageNByZone(3)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HerbageNByZone(4)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HerbageNByZone(5)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone5",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Harvested",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HarvestedWtByZone(1)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HarvestedWtByZone(2)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HarvestedWtByZone(3)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HarvestedWtByZone(4)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HarvestedWtByZone(5)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone5",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Harvested N",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HarvestedNByZone(1)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HarvestedNByZone(2)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HarvestedNByZone(3)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HarvestedNByZone(4)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "HarvestedNByZone(5)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone5",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Denitrification",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "DenitByZone(1)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "DenitByZone(2)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "DenitByZone(3)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "DenitByZone(4)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "DenitByZone(5)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone5",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Denitrification N2O",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "DenitN2OByZone(1)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "DenitN2OByZone(2)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "DenitN2OByZone(3)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "DenitN2OByZone(4)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "DenitN2OByZone(5)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone5",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Leaching",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "LeachedNByZone(1)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "LeachedNByZone(2)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "LeachedNByZone(3)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "LeachedNByZone(4)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "LeachedNByZone(5)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone5",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NH4",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "NH4ByZone(1)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "NH4ByZone(2)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "NH4ByZone(3)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "NH4ByZone(4)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "NH4ByZone(5)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone5",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "MineralN",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "MinNByZone(1)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone1",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "MinNByZone(2)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone2",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "MinNByZone(3)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone3",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "MinNByZone(4)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone4",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Graph series",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithZones",
                  "XFieldName": "Date",
                  "YFieldName": "MinNByZone(5)",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "",
                  "Name": "Zone5",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "QuickCheck",
          "ResourceName": null,
          "Children": [
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Herbage grazed",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatchesPaddock",
                  "XFieldName": "Date",
                  "YFieldName": "HarvestedWt",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Grazed",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Denitrification",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatchesPaddock",
                  "XFieldName": "Date",
                  "YFieldName": "Denit",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Denit",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Leaching",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatchesPaddock",
                  "XFieldName": "Date",
                  "YFieldName": "LeachN",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "leach",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "N2O",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatchesPaddock",
                  "XFieldName": "Date",
                  "YFieldName": "DenitN2O",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "N2O",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "MineralN",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatchesPaddock",
                  "XFieldName": "Date",
                  "YFieldName": "MineralN",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Urea",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatchesPaddock",
                  "XFieldName": "Date",
                  "YFieldName": "UreaN",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": "I suspect the initial value of zero is an artifact of the 'sum of .... from .. to ...' in report",
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NO3",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatchesPaddock",
                  "XFieldName": "Date",
                  "YFieldName": "NO3N",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NH4",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "SimulationName",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatchesPaddock",
                  "XFieldName": "Date",
                  "YFieldName": "NH4N",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "series",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Leaching1",
              "ResourceName": null,
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "Type",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ReportingWithPatchesPaddock",
                  "XFieldName": "ZoneCount",
                  "YFieldName": "LeachN",
                  "X2FieldName": null,
                  "Y2FieldName": null,
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "leach",
                  "ResourceName": null,
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": false,
      "GraphsPerPage": 6,
      "Name": "Folder",
      "ResourceName": null,
      "Children": [
        {
          "$type": "Models.Manager, Models",
          "Code": "using Newtonsoft.Json;\r\nusing Models.Soils.Nutrients;\r\nusing Models.Interfaces;\r\nusing System;\r\nusing Models.Core;\r\nusing Models.Soils;\r\nusing Models.PMF;\r\nusing Models.Zones;\r\nusing Models.AgPasture;\r\nusing System.Xml.Serialization;\r\nusing Models.Surface;\r\nusing APSIM.Shared.Utilities;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Linq;\r\nusing Models.Soils.NutrientPatching;\r\nusing Models.Climate;\r\n\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        [Link] private Clock Clock;\r\n        [Link] private Simulation Simulation;\r\n        [Link] private Soil soil;\r\n        [Link] private ISummary summary;\r\n        [Link] private Weather Weather;\r\n        [Link] private Zone zone;\r\n        public int PatchCount;\r\n        public int PaddockCount;\r\n        public double Grazed;\r\n        public double GrazedN;\r\n        public double UrineNReturned;\r\n        private double iniOrgC;\r\n        private double iniOrgN;\r\n        private double myVariable;\r\n        //[Link(ByName = true)] private ISolute NO3;\r\n        //[Link(ByName = true)] private ISolute NH4;\r\n        //[Link(ByName = true)] private ISolute Urea;\r\n        [Link] private NutrientPatchManager patchManager;\r\n        [Link] private Models.Report ReportingWithZones;\r\n        [Link] private IPhysical soilPhysical;\r\n\r\n        private Zone[] Zones { get; set; }\r\n\r\n\r\n        [Description(\"Verbose reporting mode (True/False)\")]\r\n        public bool verbose { get; set; }\r\n\r\n        [Description(\"Name of the patch manager for input\")]\r\n        public string InputModule { get; set; }\r\n\r\n        [Description(\"Name of the report for output\")]\r\n        public string OutputModule { get; set; }\r\n\r\n        [Description(\"Frequency of reporting\")]\r\n        public reportingFrequencyTypes ReportingFreq { get; set; }\r\n\r\n        [JsonIgnore] public int DaysSinceReport { get; set; }\r\n        [JsonIgnore] public double NHA { get; set; }\r\n        [JsonIgnore] public double PGR { get; set; }\r\n        [JsonIgnore] public double HerbageGrazed { get; set; }\r\n        [JsonIgnore] public double HerbageGrazedN { get; set; }\r\n        [JsonIgnore] public double AreaUrinePatchesToday { get; set; }\r\n        [JsonIgnore] public double UreaReturned { get; set; }\r\n        [JsonIgnore] public double Fixation { get; set; }\r\n        [JsonIgnore] public double LeachN { get; set; }\r\n        [JsonIgnore] public double Denit { get; set; }\r\n        [JsonIgnore] public double DenitN2O { get; set; }\r\n        [JsonIgnore] public double OrgC { get; set; }\r\n        [JsonIgnore] public double OrgN { get; set; }\r\n        [JsonIgnore] public double dltOrgC { get; set; }\r\n        [JsonIgnore] public double dltOrgN { get; set; }\r\n        [JsonIgnore] public double MinN { get; set; }\r\n        [JsonIgnore] public double UreaN { get; set; }\r\n        [JsonIgnore] public double NH4N { get; set; }\r\n        [JsonIgnore] public double NO3N { get; set; }\r\n        [JsonIgnore] public double UreaAddedInGrazing { get; set; }\r\n\r\n        [JsonIgnore] public double[] MinNPatch { get; set; }\n        [JsonIgnore] public double PastureUptake { get; set; }\n\r\n        [JsonIgnore] public double[] GrazedByZone { get; set; }\r\n        [JsonIgnore] public double[] GrazedNByZone { get; set; }\r\n\r\n\r\n\r\n        private bool ReportToday = false;\r\n\r\n        public enum reportingFrequencyTypes\r\n        {\r\n            /// <summary>Daily</summary>\r\n            Daily,\r\n            /// <summary>Every 10 days</summary>\r\n            TenDaily,\r\n            /// <summary>Monthly</summary>\r\n            Monthly,\r\n            /// <summary>Annual</summary>\r\n            Annual,\r\n            /// <summary>On grazing</summary>\r\n            OnGrazing\r\n        }\r\n\r\n    \r\n\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"Initialising the Manager for grazing, urine return and reporting\", MessageType.Diagnostic);\r\n            DaysSinceReport = 0;\r\n            PatchCount = patchManager.NumPatches;\r\n            PaddockCount = 0;\r\n\r\n\r\n\r\n            // Get list of zones in the simulation\r\n            List<Zone> zones = new List<Zone>();\r\n\r\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n            {\r\n                zones.Add(zone as Zone);\r\n                //ReportingWithPatches = (Models.Report)zone.Get(\"[\" + OutputModule + \"]\"); Is this needed now?\r\n                PaddockCount++;\r\n            }\r\n            Zones = zones.ToArray();\r\n            GrazedByZone = new double[PaddockCount];\r\n            GrazedNByZone = new double[PaddockCount];\r\n\r\n\r\n            //myVariable = (double)ManageGriddedPaddock.Get(\"Script.Var1\");\r\n            //double grazedN = ManageGriddedPaddock.Get(\"Script.grazedN\");\r\n\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"Finished initialising the Manager for grazing, urine return and reporting\", MessageType.Diagnostic);\r\n        }\r\n\r\n\r\n        [EventSubscribe(\"DoDailyInitialisation\")]\r\n        private void OnDoDailyInitialisation(object sender, EventArgs e)\r\n        {    \r\n                    \r\n            if (verbose)\r\n                summary.WriteMessage(this, \"In Daily Initialisation for the Reporting Manager on \" + Clock.Today, MessageType.Diagnostic);\r\n            if (Clock.Today == Clock.StartDate)\r\n            {\r\n\r\n                iniOrgC = 0.0; \r\n                iniOrgN = 0.0;            \r\n\r\n                foreach (Zone zone in Zones)\r\n                {\r\n                    var patchManager = zone.FindInScope<NutrientPatchManager>() as NutrientPatchManager;\r\n                    for (int ii = 0; ii < soilPhysical.Thickness.Length; ii++)\r\n                    {\r\n                        iniOrgC += patchManager.TotalC[ii]; // TODO RJM Check this is right!\r\n                        iniOrgN += patchManager.Organic.N[ii];\r\n                    }\r\n                }\r\n            }        \r\n\r\n\r\n        }\r\n\r\n            \r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void DoManagement(object sender, EventArgs e)\r\n        {\r\n            bool isEndOfMonth = false;\r\n            if (Clock.Today.AddDays(1).Day == 1)\r\n                isEndOfMonth = true;\r\n            \r\n\r\n            bool isEndOfYear = false;\r\n            if (Clock.Today.Day == 31 && Clock.Today.Month == 12)\r\n                isEndOfYear = true;\r\n\r\n\r\n            bool GrazedToday = (bool)Simulation.FindByPath(InputModule + \".Script.grazedToday\").Value; \r\n\r\n            // should reporting be done today?  \r\n            if (ReportingFreq == reportingFrequencyTypes.Daily)\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.TenDaily) && ((Clock.Today.Day == 10) || (Clock.Today.Day == 20) || (isEndOfMonth)))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Monthly) && (isEndOfMonth))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.Annual) && (isEndOfYear))\r\n                ReportToday = true;\r\n            else if ((ReportingFreq == reportingFrequencyTypes.OnGrazing) && (GrazedToday))\r\n                ReportToday = true;\r\n            else\r\n                ReportToday = false;\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"Finished Prepare for the Reporting Manager on \" + Clock.Today, MessageType.Diagnostic);\r\n        }\r\n\r\n        [EventSubscribe(\"EndOfDay\")]\r\n        private void OnEndOfDay(object sender, EventArgs e)\r\n        {\r\n            if (verbose)\r\n                summary.WriteMessage(this, \"In EndOfDay for the Reporting Manager on  \" + Clock.Today, MessageType.Diagnostic);\r\n\r\n            DaysSinceReport += 1;\r\n\r\n\r\n            int currentZoneNum = 0;\r\n            foreach (Zone zone in Zones)\r\n            {\r\n                var sward = zone.FindAllChildren<PastureSpecies>().OfType<IModel>().ToList().Cast<PastureSpecies>().ToList();\r\n                NHA += sward.Sum(species => species.HerbageGrowthWt) * zone.Area;\r\n                PGR = NHA;  // divide this by the number of days just before reporting\r\n                Fixation += sward.Sum(species => species.FixedN) * zone.Area;\n                PastureUptake += sward.Sum(species => species.NitrogenUptake.Sum()) * zone.Area; \r\n\r\n                var waterBalance = zone.FindInScope<ISoilWater>();\r\n                LeachN += waterBalance.LeachNO3 * zone.Area;  // only take the deepest element\r\n\t\t\t\t// add in drainage here?\n\t\t\t\t\r\n                for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                {\r\n                    Denit += patchManager.DenitrifiedN[ii] * zone.Area;\r\n                    DenitN2O += patchManager.N2Oatm[ii] * zone.Area;\r\n                }\r\n\r\n\t\t\t\tGrazedByZone[currentZoneNum] += sward.Sum(species => species.HarvestedWt);\r\n\t\t\t\tGrazedNByZone[currentZoneNum] += sward.Sum(species => species.HarvestedN);\r\n                Grazed = GrazedByZone[currentZoneNum] * zone.Area;\r\n                GrazedN = GrazedNByZone[currentZoneNum] * zone.Area;\r\n                UrineNReturned = (double)zone.Get(\"[\" + InputModule + \"].Script.UreaReturned\");\r\n            } \r\n\r\n            HerbageGrazed += Grazed;\r\n            HerbageGrazedN += GrazedN;\r\n            UreaReturned += UrineNReturned;\r\n\r\n            if (ReportToday)\r\n            {\r\n\r\n                OrgC = 0.0;\r\n                OrgN = 0.0;\r\n                UreaN = 0.0;\r\n                NH4N = 0.0;\r\n                NO3N = 0.0;\r\n                MinN = 0.0;\r\n\r\n\r\n                Soil soil1 = Zones[0].FindInScope<Soil>() as Soil;\r\n\r\n                if (PaddockCount > 1)\n                {\r\n                    MinNPatch = new double[PaddockCount];\n                }\n                else\r\n                    MinNPatch = new double[patchManager.NumPatches];\r\n\r\n\r\n                currentZoneNum = 0;\r\n                foreach (Zone zone in Zones)\r\n                {\r\n                    var no3 = zone.FindInScope<Solute>(\"NO3\") as Solute;\r\n                    var nh4 = zone.FindInScope<Solute>(\"NH4\") as Solute;\r\n                    var urea = zone.FindInScope<Solute>(\"Urea\") as Solute;\r\n\r\n                    double minNPatch = 0;\r\n\r\n                    for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                    {\r\n                        OrgC += patchManager.TotalC[ii] * zone.Area;  \r\n                        OrgN += patchManager.Organic.N[ii] * zone.Area;\r\n                        UreaN += urea.kgha[ii] * zone.Area;\r\n                        NH4N += nh4.kgha[ii] * zone.Area;\r\n                        NO3N += no3.kgha[ii] * zone.Area;\r\n                        minNPatch += urea.kgha[ii] + nh4.kgha[ii] + no3.kgha[ii];\r\n                    }\r\n                    MinN = UreaN + NH4N + NO3N;                    \r\n                    MinNPatch[currentZoneNum] = minNPatch;\r\n\r\n                    dltOrgC = OrgC - iniOrgC; \r\n                    dltOrgN = OrgN - iniOrgN;\r\n                    iniOrgC = OrgC; // ready for the next calculation of change in pools\r\n                    iniOrgN = OrgN;\r\n                    currentZoneNum++;\r\n                }\r\n\r\n                if (patchManager.NumPatches > 1)\r\n                {  // TODO will break if there is more than one paddock/zone AND more than one patch \r\n\r\n                    for (int ii = 0; ii < (patchManager.NumPatches); ii++)\r\n                    {\r\n                        MinNPatch[ii] = patchManager.UreaForEachPatch[ii] + patchManager.NH4ForEachPatch[ii] + patchManager.NO3ForEachPatch[ii];\r\n                    }\r\n                }\r\n\r\n                PGR = NHA / DaysSinceReport; \r\n\r\n                ReportingWithZones.DoOutput();  //TODO this should not be hard coded!\r\n\r\n                // now zero the reported variables\r\n                DaysSinceReport = 0;\r\n                HerbageGrazed = 0.0;\r\n                HerbageGrazedN = 0.0;\r\n                DaysSinceReport = 0;\r\n                NHA = 0;\r\n                PGR = 0;\r\n                UreaReturned = 0;\r\n                Fixation = 0;\r\n                LeachN = 0;\r\n                Denit = 0;\r\n                DenitN2O = 0;\r\n                OrgC = 0;\r\n                OrgN = 0;\r\n                MinN = 0;\r\n                UreaN = 0;\r\n                NH4N = 0;\r\n                NO3N = 0;\n                PastureUptake = 0.0;\n\r\n            }\r\n        }\r\n    }\r\n}\r\n",
          "Parameters": [
            {
              "Key": "verbose",
              "Value": "False"
            },
            {
              "Key": "InputModule",
              "Value": "ZoneManager"
            },
            {
              "Key": "OutputModule",
              "Value": "ReportingWithZones"
            },
            {
              "Key": "ReportingFreq",
              "Value": "Daily"
            }
          ],
          "Name": "ReportingWithZonesManager",
          "ResourceName": null,
          "Children": [],
          "Enabled": false,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "Code": "using Newtonsoft.Json;\r\nusing Models.Soils.Nutrients;\r\nusing Models.Soils.NutrientPatching;\r\nusing Models.Interfaces;\r\nusing System.Diagnostics;\r\nusing System.Collections.Generic;\r\nusing APSIM.Shared.Utilities;\r\nusing Models.Surface;\r\nusing Models.Soils;\r\nusing System.Xml.Serialization;\r\nusing Models.AgPasture;\r\nusing Models.Zones;\r\nusing Models.PMF;\r\nusing Models.Core;\r\nusing Models.Core.ApsimFile;\r\nusing System;\r\nusing System.Linq;\r\nusing Models.Climate;\r\n\r\nnamespace Models\r\n{\r\n    [Serializable]\r\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\r\n    public class Script : Model\r\n    {\r\n        [Link] private Clock Clock;\r\n        [Link] private Soil soil;\r\n        [Link] private ISummary summary;\r\n        [Link] private Weather Weather;\r\n        [Link] private Zone myZone;\r\n        public string SoilType;\r\n        public string SimLocation;\r\n        public string SetIrrigation;\r\n        public string GeneralFertType;\r\n        public double GeneralFertAmt;\r\n        public string PastureType;\r\n        public int PatchCount;\r\n        private double iniOrgC;\r\n        private double iniOrgN;\r\n        private double NewArea;\r\n        private Sward sward;\r\n        [Link]\r\n        private IPhysical soilPhysical;\r\n\r\n        [Link]\r\n        private List<NutrientPatchManager> patchManagers;\r\n\r\n\r\n        public int DaysSinceCut = 0;\r\n        public int PatchNumForFert = -1;\r\n\r\n        private int NumPaddocks = 0;\r\n        // NumPaddocks is the number of AgPastures and SoilWats etc\r\n        private int NumPatchesForFertiliser = 1;\r\n        private double[] MonthlyFertAmt;\r\n        private double[] FertDepthPlacement;\r\n        private int[] PseudoRandomSeq;\r\n        private int GrazingNumber = -1;\r\n        private bool CutNow = false;\r\n\r\n        private double AmountDungCReturned = 0.0;\r\n        private int nPatchesAdded = 0;\r\n        private int[] PatchToAddTo;\r\n        private string[] PatchNmToAddTo = new string[1];\r\n\r\n\r\n        [JsonIgnore] public bool grazedToday { get; set; }\r\n        [JsonIgnore] public double Harvested { get; set; }\r\n        [JsonIgnore] public double HarvestedN { get; set; }\r\n        [JsonIgnore] public double UreaReturned  { get; set; }\r\n\r\n        [Description(\"Frequency of cutting (days) (0 will be interpreted as the end of each month)\")]\r\n        public int CuttingFrequency { get; set; }\r\n\r\n        [Description(\"Residual pasture mass after cutting (kg DM /ha)\")]\r\n        public int CuttingResidual { get; set; }\r\n\r\n        [Description(\"Type of nutrient return - calculated from the amount of herbage harvested or constant\")]\r\n        public NutrientReturnTypes NutrientReturnType { get; set; }\r\n\r\n        [Description(\"Amount of fertiliser N to apply to simulation after each cutting (pretend urine) (kgN/ha) (ignored if nutrient return is FromHarvest)\")]\r\n        public double AmountFertNReturned { get; set; }\r\n\r\n        [Description(\"Amount of dung N to apply to simulation after each cutting (kgN/ha) (ignored if nutrient return is FromHarvest)\")]\r\n        public double AmountDungNReturned { get; set; }\r\n\r\n        [Description(\"Depth band (0 mm to X mm) for fertiliser placement (mm)\")]\r\n        public int FertiliserDepth { get; set; }\r\n                        \r\n        [Description(\"Pattern for fertiliser return\")]\r\n        public urineReturnTypes FertiliserReturnPattern { get; set; }\r\n\r\n        [Description(\"Frequency of reporting\")]\r\n        public reportingFrequencyTypes ReportingFreq { get; set; }\r\n\r\n        [Description(\"Patch type\")]\r\n        public patchTypes PatchType { get; set; }\r\n\r\n        [Description(\"How many patches should there be in the grid? (used to create the grid for EP & GP and the size of the patches for PP)\")]\r\n        public int NumPatches { get; set; }\r\n\r\n        [Description(\"System identifier\")]\r\n        public systemTypes SystemID { get; set; }\r\n\r\n        public enum systemTypes\r\n        {\r\n            /// <summary>A</summary>\r\n            A,\r\n            /// <summary>B</summary>\r\n            B,\r\n            /// <summary>C</summary>\r\n            C,\r\n            /// <summary>D</summary>\r\n            D,\r\n            /// <summary>E</summary>\r\n            E,\r\n            /// <summary>F</summary>\r\n            F\r\n        }\r\n\r\n        public enum patchTypes\r\n        {\r\n            /// <summary>EP</summary>\r\n            EP,\r\n            /// <summary>EP</summary>\r\n            GP,\r\n            /// <summary>EP</summary>\r\n            PP,\r\n            /// <summary>EP</summary>\r\n            UP\r\n        }\r\n\r\n        public enum reportingFrequencyTypes\r\n        {\r\n            /// <summary>Daily</summary>\r\n            Daily,\r\n            /// <summary>Every 10 days</summary>\r\n            TenDaily,\r\n            /// <summary>Monthly</summary>\r\n            Monthly,\r\n            /// <summary>Annual</summary>\r\n            Annual,\r\n            /// <summary>On grazing</summary>\r\n            OnGrazing\r\n        }\r\n\r\n        public enum urineReturnTypes\r\n        {\r\n            /// <summary>Uniform</summary>\r\n            UniformAcrossAllPatches,\r\n            /// <summary>Rotating in order</summary>\r\n            RotatingInOrder,\r\n            /// <summary>Random</summary>\r\n            Random,\r\n            /// <summary>Pseudo-random</summary>\r\n            PseudoRandom\r\n        }\r\n\r\n        public enum NutrientReturnTypes\r\n        {\r\n            /// <summary>Constant</summary>\r\n            Constant,\r\n            /// <summary>FromHarvest</summary>\r\n            FromHarvest,\r\n            /// <summary>SetMonthly</summary>\r\n            SetMonthly\r\n        }\r\n\r\n        // Called just before a simulation is run.\r\n        public override void OnPreLink()\r\n        {\n            var simulation = Parent.Parent as Simulation;\r\n            var paddock = simulation.FindChild<Zone>();\n                \n\t\t\t// Set the maximum N uptake for all species\n\t\t\tforeach (var species in paddock.FindAllDescendants<PastureSpecies>())\n\t\t\t{\n\t\t\t\tvar root = species.FindChild<PastureBelowGroundOrgan>();\n\t\t\t\troot.MaximumNUptake = 3.0;\n\t\t\t}\n\t\t\t\t\r\n            // Create the required number of paddocks.\r\n            if (PatchType == patchTypes.EP)\r\n            {\t\t\t                \r\n                for (int i = 0; i < NumPatches-1; i++)\r\n                {\r\n                    var newPaddock = Apsim.Clone(paddock);\r\n                    Structure.Add(newPaddock, simulation);\r\n                }\r\n            //summary.WriteMessage(this, \"Created \" & NumPatches & \" identical paddocks\", MessageType.Diagnostic);\r\n            }\r\n        }\r\n\r\n        // Called at beginning of a simulation run.\r\n        [EventSubscribe(\"StartOfSimulation\")]\r\n        private void OnStartOfSimulation(object sender, EventArgs e)\r\n        {\r\n            summary.WriteMessage(this, \"Initialising the Manager for grazing, urine return and reporting\", MessageType.Diagnostic);\r\n\n            sward = new Sward(myZone); //TODO Huh? Ask Dean\r\n\r\n            grazedToday = false;\n            \n            // count the paddocks in the simulation\r\n            NumPaddocks = 0;\n            string paddockAreas = \"\";   \r\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n\t\t\t\tNumPaddocks += 1;\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n\t\t\t{\n\t\t\t\tzone.Area = (1.0 / NumPaddocks);   //TODO it would be better to move this to the creation\n\t\t\t\tpaddockAreas += zone.Area + \", \";\n\t\t\t}   \r\n            summary.WriteMessage(this, \"There are \" + NumPaddocks + \" paddocks in the simulation\", MessageType.Diagnostic);\r\n            summary.WriteMessage(this, \"There areas are \" + paddockAreas, MessageType.Diagnostic);\r\n\r\n            MonthlyFertAmt = new double[] { 24, 19, 17, 12, 8, 5, 5, 10, 16, 19, 23, 25 }; //TODO Huh? Why? This is to get a patter of return that varies with month but removes the vairation that might be caused by small changes in herbage growth\r\n\r\n            summary.WriteMessage(this, \"Finished initialising the Manager for grazing, urine return and reporting\", MessageType.Diagnostic);\r\n\r\n            SetSystemParams();  //probably change to do this in an experiment now\r\n\r\n            if ((PatchType == patchTypes.GP) && (NumPaddocks > 1))\r\n                throw new Exception(\"Patch type GP may only have one paddock/zone\");\r\n            if ((PatchType == patchTypes.PP) && (NumPaddocks > 1))\r\n                throw new Exception(\"Patch type PP may only have one paddock/zone\");\r\n\r\n            NumPatchesForFertiliser = 1;  // in the future this might be > 1 - note that 'fertiliser' is actually urine\r\n            if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)  // generate a return pattern up front\r\n            {\r\n                int MaxNumGrazings = (Clock.EndDate.Year - Clock.StartDate.Year + 1) * 52; //allow for a maximum of 1 per week should never get near this\r\n\r\n                PseudoRandomSeq = new int[MaxNumGrazings * NumPatchesForFertiliser];\r\n                Random rndConstSeed = new Random((int)666);\r\n                string MyString = \"\";\r\n                for (int i = 0; i < (MaxNumGrazings * NumPatchesForFertiliser); i++)\r\n                {\r\n                    PseudoRandomSeq[i] = rndConstSeed.Next(0, NumPatches);  // will never select NumPatches  ?? and want this because is 0 to ...\r\n                    //MyString += Convert.ToString(PseudoRandomSeq[i]) + \" \";\r\n                }\r\n\r\n                //summary.WriteMessage(this, \"The order of patch return will be: \" + MyString, MessageType.Diagnostic);\r\n            }\r\n\r\n            // Add patches\r\n            if (PatchType == patchTypes.GP)\r\n            {\r\n                foreach (var patchManager in patchManagers)\r\n                {\r\n                    //patchManager.MaximumNitrogenAvailableToPlants = 0.45; This is now set in pre start\r\n                    patchManager.NPartitionApproach = PartitionApproachEnum.BasedOnConcentrationAndDelta;\r\n                    patchManager.AutoAmalgamationApproach = AutoAmalgamationApproachEnum.None;\r\n                    patchManager.basePatchApproach = BaseApproachEnum.IDBased;\r\n                    patchManager.AllowPatchAmalgamationByAge = false;\r\n                    patchManager.PatchAgeForForcedMerge = 1000000.0;  // ie don't merge                                \r\n                }\r\n\r\n                int[] PatchToAddTo = new int[1];  //need an array variable for this\r\n                string[] PatchNmToAddTo = new string[1];  \r\n                int nPatchesAdded = 0;\r\n                double NewArea = 1.0 / NumPatches;\r\n\t\t\t\t// here is where woudl want to limit N uptake\n\t\t\t\t\r\n                while (nPatchesAdded < NumPatches - 1)\r\n                {\r\n                    AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();\r\n                    NewPatch.DepositionType = DepositionTypeEnum.ToNewPatch;\r\n                    NewPatch.AreaFraction = NewArea;\r\n                    PatchToAddTo[0] = 0;\r\n                    PatchNmToAddTo[0] = \"0\";\r\n                    NewPatch.AffectedPatches_id = PatchToAddTo;\r\n                    NewPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                    NewPatch.SuppressMessages = false;\r\n\r\n                    foreach (var patchManager in patchManagers)\r\n                        patchManager.Add(NewPatch);\r\n                    nPatchesAdded += 1;\r\n                }                \r\n\r\n                summary.WriteMessage(this, \"NumPatches at end of initialisation (GP):\" + patchManagers[0].NumPatches.ToString(), MessageType.Diagnostic);\r\n            }\r\n        }\r\n\r\n        [EventSubscribe(\"DoManagement\")]\r\n        private void OnDoManagement(object sender, EventArgs e)\r\n        {    \r\n\r\n            // if this is the start of the simulation then sort out the depth for the fertiliser (aka urine) placement\r\n            // can't do this in initialisation because of the module order\r\n            if (Clock.Today == Clock.StartDate)\r\n            {\r\n                FertPlacementDepth();\r\n                int i = -1;  // to use as a patch counter\r\n\r\n                iniOrgC = 0.0; \r\n                iniOrgN = 0.0;\r\n                foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n                {\r\n                    Soil soil = zone.FindInScope<Soil>() as Soil;\r\n                    i += 1;\r\n\r\n                    var patchManager = soil.FindChild<NutrientPatchManager>();\r\n                    PatchCount = patchManager.NumPatches;\r\n\r\n                    for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                    {\r\n                        iniOrgC += patchManager.TotalC[ii] / NumPaddocks; \r\n                        iniOrgN += patchManager.Organic.N[ii] / NumPaddocks;\r\n                    }\r\n                }\r\n            }\r\n\r\n            DaysSinceCut += 1;\r\n            Harvested = 0.0;\r\n            HarvestedN = 0.0;\r\n            UreaReturned = 0.0;\r\n\r\n            bool isEndOfMonth = false;\r\n            if (Clock.Today.AddDays(1).Day == 1)\r\n                isEndOfMonth = true;\r\n\r\n            bool isEndOfYear = false;\r\n            if (Clock.Today.AddDays(1).DayOfYear == 1)  // TODO this could be simpler!!\r\n                isEndOfYear = true;\r\n\r\n            CutNow = false;\r\n            grazedToday = false;\r\n            if ((CuttingFrequency == 0) && (isEndOfMonth))\r\n                CutNow = true;\r\n            else if ((DaysSinceCut >= CuttingFrequency) && (CuttingFrequency > 0))\r\n                CutNow = true;\r\n\r\n            if (CutNow)\r\n            {\r\n                grazedToday = true;\r\n                summary.WriteMessage(this, \"Doing grazing\", MessageType.Diagnostic);\r\n                DaysSinceCut = 0;\r\n                GrazingNumber += 1;  //was initialsed as -1 - this is used to pick the pseudo-random patch return number\r\n                // GetPatchForUrineReturn();  now called in the deposition routine\r\n\r\n                // do the cutting=grazing - it doesn't matter if there one (GP) or many (EP) physical paddocks in the simulation at this point\r\n                int i = -1;  // to use as a patch counter\r\n                Harvested = 0.0;\r\n                HarvestedN = 0.0;\r\n                foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n                {\r\n                    i += 1;\r\n                    var sward = new Sward(zone);\r\n                    sward.Graze(amount: CuttingResidual, type: \"SetResidueAmount\");\r\n                    Harvested += sward.HarvestedWt * zone.Area;\r\n                    HarvestedN += sward.HarvestedN * zone.Area;\n                    summary.WriteMessage(this, \"Just harvested \" + Harvested + \" from Paddock \" + zone, MessageType.Diagnostic);\r\n                }\r\n\r\n                if (NutrientReturnType == NutrientReturnTypes.FromHarvest)\r\n                {\r\n                    AmountFertNReturned = HarvestedN * 0.50;  // \r\n                    AmountDungNReturned = HarvestedN * 0.35;  // \r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n                else if (NutrientReturnType == NutrientReturnTypes.SetMonthly)\r\n                {\r\n                    AmountFertNReturned = MonthlyFertAmt[Clock.Today.Month - 1];   // noting that this is notional urine - hardcoded on L202\r\n                    AmountDungNReturned = AmountFertNReturned * (0.35 / 0.50);  // \r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n                else\r\n                {\r\n                    // the only other possibility is \"constant\"\n                    //AmountFertNReturned = xxx taken from the UI\r\n                    //AmountDungNReturned = xxx taken from the UI\r\n                    AmountDungCReturned = AmountDungNReturned * 20;\r\n                }\r\n\r\n\r\n                summary.WriteMessage(this, \"The amount of urea fertiliser to be returned to the whole paddock is \" + AmountFertNReturned, MessageType.Diagnostic);\r\n\r\n                DoUrineReturn();\r\n\r\n                DoTramplingAndDungReturn();\r\n\r\n                summary.WriteMessage(this, \"Finished Cutting\", MessageType.Diagnostic);\r\n\r\n            } // this is the end of the CutNow section\r\n\r\n            if ((GeneralFertAmt > 0.0) && (Clock.Today.AddDays(1).Day == 1))\r\n                DoFertiliser();\r\n        }\r\n\r\n        public void DoTramplingAndDungReturn()\r\n        {\r\n            int i = -1;  // patch or paddock counter\r\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n            {\r\n                i += 1;\r\n                SurfaceOrganicMatter surfaceOM = zone.FindInScope<SurfaceOrganicMatter>() as SurfaceOrganicMatter; \r\n\r\n                // do some trampling of litter\r\n                // accelerate the movement of surface litter into the soil - do this before the dung is added\r\n                double temp = surfaceOM.Wt * 0.1;\r\n\r\n                TillageType trampling = new TillageType();\r\n                surfaceOM.Incorporate(fraction: (double)0.1, depth: (double)100.0);\r\n\r\n                summary.WriteMessage(this, \"For patch \" + i + \" the amount of litter trampled was \" + temp + \" and the remaining litter is \" + (surfaceOM.Wt), MessageType.Diagnostic);\r\n\r\n                // move the dung to litter - assume dung is 40% of that harvested and a C:N ratio of \r\n                AddFaecesType dung = new AddFaecesType();\r\n                dung.OMWeight = AmountDungCReturned / 0.4;\r\n                dung.OMN = AmountDungNReturned;\r\n                surfaceOM.AddFaeces(dung);\r\n                summary.WriteMessage(this, \"For patch \" + i + \" the amount of dung DM added to the litter was \" + (AmountDungCReturned / 0.4) + \" and the amount of N added in the dung was \" + (AmountDungNReturned), MessageType.Diagnostic);\r\n\r\n            } \r\n        }\r\n        // this is the end of the trampling and dung patch/paddock section\r\n\r\n        public void DoUrineReturn()\r\n        {\r\n            if (PatchType == patchTypes.EP)  //TODO can this be used for UP as well?\r\n            {                \r\n\r\n                GetPatchForUrineReturn();  //sets the value for PatchNumForFert\r\n          \t\t//summary.WriteMessage(this, \"The paddock for urine return is \" + PatchNumForFert, MessageType.Diagnostic);\r\n\n                int i = -1; //to count the paddocks\r\n                foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n                {\r\n                    i += 1;\r\n                    if (i == PatchNumForFert)\r\n                    {\r\n                        Fertiliser thisFert = zone.FindInScope<Fertiliser>() as Fertiliser;\r\n                        Soil soil = zone.FindInScope<Soil>() as Soil;\r\n\r\n                        double tempDepth = 0.0;\r\n                        for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                        {\r\n                            tempDepth += soilPhysical.Thickness[ii];\r\n                            thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * NumPatches * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soilPhysical.Thickness[ii] / 2));\r\n                        }\r\n                        UreaReturned += AmountFertNReturned * NumPatches;\n                                        \n                \t\tsummary.WriteMessage(this, AmountFertNReturned + \" urine N added to Paddock \" + i, MessageType.Diagnostic);\r\n\r\n                    }\r\n                } \r\n\r\n            }\r\n            else if (PatchType == patchTypes.GP)\r\n            {\r\n                GetPatchForUrineReturn();  //sets the value for PatchNumForFert\r\n                int[] PatchToAddTo = new int[1];  //because need an array variable for this\r\n                string[] PatchNmToAddTo = new string[0];  //need an array variable for this\r\n                List<IModel> zones = this.FindAllInScope<Zone>().OfType<IModel>().ToList();\r\n                Soil soil = zones[0].FindInScope<Soil>() as Soil; // Only one zone allowed for GP so use the first\r\n                double[] UreaToAdd = new double[soilPhysical.Thickness.Length];  \r\n\r\n                for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;\r\n\r\n                UreaReturned += AmountFertNReturned;\r\n\r\n\r\n                AddSoilCNPatchType CurrentPatch = new AddSoilCNPatchType();\r\n                CurrentPatch.Sender = \"manager\";\r\n                CurrentPatch.DepositionType = DepositionTypeEnum.ToSpecificPatch;\r\n                PatchToAddTo[0] = PatchNumForFert;\r\n                CurrentPatch.AffectedPatches_id = PatchToAddTo;\r\n                CurrentPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                CurrentPatch.Urea = UreaToAdd;\r\n\r\n\r\n                summary.WriteMessage(this, \"Patch MinN prior to urine return:\", MessageType.Diagnostic);\r\n\r\n                var patchManager = soil.FindChild<INutrientPatchManager>(); \r\n                patchManager.Add(CurrentPatch); \r\n                summary.WriteMessage(this, \"Patch MinN after urine return:\", MessageType.Diagnostic);\r\n            }\r\n            else if (PatchType == patchTypes.PP)\r\n            {\r\n                // create a new patch from base of area 1/NumPatches\r\n                // add the fertiliser to that patch\r\n                // set amalgamation autmomatic\r\n                List<IModel> zones = this.FindAllInScope<Zone>().OfType<IModel>().ToList();\r\n                Soil soil = zones[0].FindInScope<Soil>() as Soil; // Only one zone allowed for GP so use the first\r\n\r\n                double[] UreaToAdd = new double[soilPhysical.Thickness.Length];  \r\n\r\n                for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                    UreaToAdd[ii] = FertDepthPlacement[ii] * NumPatches * AmountFertNReturned;\r\n\r\n                int[] PatchToAddTo = new int[1];\r\n                string[] PatchNmToAddTo = new string[0];  //need an array variable for this\r\n\r\n                UreaReturned += AmountFertNReturned;\r\n\r\n                AddSoilCNPatchType NewPatch = new AddSoilCNPatchType();\r\n                NewPatch.DepositionType = DepositionTypeEnum.ToNewPatch;\r\n                NewPatch.AreaFraction = 1.0 / NumPatches;\r\n                PatchToAddTo[0] = 0;\r\n                NewPatch.AffectedPatches_id = PatchToAddTo;\r\n                NewPatch.AffectedPatches_nm = PatchNmToAddTo;\r\n                NewPatch.Urea = UreaToAdd;\r\n\r\n                summary.WriteMessage(this, \"UreaToAdd \" + UreaToAdd[0] + \" \" + UreaToAdd[1] + \" \" + UreaToAdd[2] + \" \" + UreaToAdd[3] + \" \" + UreaToAdd[4], MessageType.Diagnostic);\r\n\r\n                var patchManager = soil.FindChild<INutrientPatchManager>(); \r\n                patchManager.Add(NewPatch);\r\n\r\n                //throw new Exception(\"Have not set up the PP for DoUrineReturn yet\");\r\n            }\r\n            else if (PatchType == patchTypes.UP)\r\n            {\r\n                int i = -1;  // patch or paddock counter\r\n                foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n                {\r\n                    i += 1;\r\n\r\n                    Fertiliser thisFert = zone.FindInScope<Fertiliser>() as Fertiliser;\r\n                    Soil soil = zone.FindInScope<Soil>() as Soil;\r\n\r\n                    double tempDepth = 0.0;\r\n                    for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\r\n                    {\r\n                        tempDepth += soilPhysical.Thickness[ii];\r\n                        thisFert.Apply(Amount: (double)(FertDepthPlacement[ii] * AmountFertNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soilPhysical.Thickness[ii] / 2));\r\n                    } \r\n                    UreaReturned += AmountFertNReturned;\r\n                }\r\n            }\r\n            else\r\n                throw new Exception(\"Patch type not catered for\");\r\n\r\n\r\n\r\n        }\r\n        // end of DoUrineReturn\r\n\r\n        public void GetPatchForUrineReturn()\r\n        {\r\n            \r\n            if (FertiliserReturnPattern == urineReturnTypes.UniformAcrossAllPatches)\r\n                PatchNumForFert = 0;  // but will not be used\r\n            else if (FertiliserReturnPattern == urineReturnTypes.RotatingInOrder)\r\n            {\r\n                PatchNumForFert += 1;  //increment the patch number\r\n                if (PatchNumForFert >= NumPatches)\r\n                    PatchNumForFert = 0;  // but reset back to the first patch if needed\r\n                //summary.WriteMessage(this, \"The patch for fertiliser return is \" + PatchNumForFert, MessageType.Diagnostic);\r\n            }\r\n            else if (FertiliserReturnPattern == urineReturnTypes.Random)\r\n            {\r\n                Random rnd = new Random();\r\n                PatchNumForFert = rnd.Next(0, NumPatches);\r\n                //summary.WriteMessage(this, \"The next random number patch for fertiliser return is \" + PatchNumForFert, MessageType.Diagnostic);\r\n            }\r\n            else if (FertiliserReturnPattern == urineReturnTypes.PseudoRandom)\r\n            {\r\n                PatchNumForFert = PseudoRandomSeq[GrazingNumber];\r\n                //summary.WriteMessage(this, \"The next pseudo-random number patch for fertiliser return is \" + PatchNumForFert, MessageType.Diagnostic);\r\n            }\r\n        }\r\n        // this is the end of GetPatchForUrineReturn\r\n\r\n\r\n        public void FertPlacementDepth()\r\n        {\r\n            // note that this only looks at the first paddock and assumes that all the paddocks are the same\r\n            int iii = -1;  // to use as a patch counter\r\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\r\n            {\r\n                iii += 1;\r\n                if (iii == 0)\r\n                {\r\n                    Soil soil = zone.FindInScope<Soil>() as Soil;\r\n                    double tempDepth = 0.0;\r\n                    FertDepthPlacement = new double[soilPhysical.Thickness.Length];\r\n                    for (int i = 0; i <= (soilPhysical.Thickness.Length - 1); i++)\r\n                    {\r\n                        tempDepth += soilPhysical.Thickness[i];\r\n                        if (tempDepth <= FertiliserDepth)\r\n                        {\r\n                            FertDepthPlacement[i] = soilPhysical.Thickness[i] / FertiliserDepth;\r\n                        }\r\n                        else\r\n                        {\r\n                            FertDepthPlacement[i] = (FertiliserDepth - (tempDepth - soilPhysical.Thickness[i])) / (tempDepth - (tempDepth - soilPhysical.Thickness[i])) * soilPhysical.Thickness[i] / FertiliserDepth;\r\n                            FertDepthPlacement[i] = Math.Max(0.0, Math.Min(1.0, FertDepthPlacement[i]));\r\n                        }\r\n                        //if (FertiliserReturnPattern == \"UniformAcrossAllPatches\")\r\n                        //   summary.WriteMessage(this, \"The proportion of fertiliser applied to the \" + i + \"th layer will be \" + FertDepthPlacement[i], MessageType.Diagnostic);\r\n                        //else\r\n                        summary.WriteMessage(this, \"The proportion of fertiliser (* NumPatches) applied to the \" + i + \"th layer will be \" + FertDepthPlacement[i], MessageType.Diagnostic);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        // this is the end of FertPlacementDepth\r\n\r\n\r\n        public void DoFertiliser()\r\n        {\r\n            bool ApplyFert = true; // the test for first day of the month has already been done\r\n            double NumMonths = 0;\r\n\r\n            if (GeneralFertType == \"Monthly\")\r\n                NumMonths = 12;\r\n            else if (GeneralFertType == \"NoWinter\")\r\n            {\r\n                if ((Clock.Today.Month < 5) || (Clock.Today.Month > 7))\r\n                {\r\n                    ApplyFert = true;\r\n                    NumMonths = 9;\r\n                }\r\n                else\r\n                    ApplyFert = false;\r\n            }\r\n            else\r\n                throw new Exception(\"Wrong general fertiliser setting\");\r\n\r\n            if (ApplyFert)\r\n            {\r\n                foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())  // but actually there will only be a single paddock\r\n                {\r\n                    Fertiliser thisFert = zone.FindInScope<Fertiliser>() as Fertiliser;\r\n\r\n                    //thisFert.Apply((float)(GeneralFertAmt / NumMonths), (float) (0.0), \"urea_n\");\r\n                    thisFert.Apply(Amount: (double)(GeneralFertAmt / NumMonths), Type: Fertiliser.Types.UreaN, Depth: FertiliserDepth);\r\n                    summary.WriteMessage(this, \"Applying \" + (GeneralFertAmt / NumMonths) + \" kg of general fertiliser\", MessageType.Diagnostic);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Definition of all systems\r\n        private void SetSystemParams()\r\n        {\r\n            if (SystemID == systemTypes.A)\r\n            {\r\n                SoilType = \"HE\";\r\n                SimLocation = \"Rua\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.B)\r\n            {\r\n                SoilType = \"HE\";\r\n                SimLocation = \"Rua\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 150.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.C)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.D)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 250.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n            else if (SystemID == systemTypes.E)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"yes\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 400.0;\r\n                PastureType = \"GrassOnly\";\r\n            }\r\n            else if (SystemID == systemTypes.F)\r\n            {\r\n                SoilType = \"VL\";\r\n                SimLocation = \"Lin\";\r\n                SetIrrigation = \"no\";\r\n                GeneralFertType = \"NoWinter\";\r\n                GeneralFertAmt = 0.0;\r\n                PastureType = \"RyeWhite\";\r\n            }\r\n        }\r\n    }\r\n\r\n    // A class for aggregating a pasture species mix.\r\n    [Serializable]\r\n    class Sward\r\n    {\r\n        private const double Epsilon = 0.000000001;\r\n        private double amountRequired;\r\n\r\n        public Sward(Zone zone)\r\n        {\r\n            Species = zone.FindAllDescendants<PastureSpecies>().OfType<IModel>().ToList().Cast<PastureSpecies>().ToList();\r\n        }\r\n\n        public List<PastureSpecies> Species { get; private set; }\r\n\r\n        public double HarvestableWt { get { return Species.Sum(sp => sp.Harvestable.Wt); } }\r\n\r\n        public double HarvestedWt { get { return Species.Sum(sp => sp.HarvestedWt); } }\r\n\r\n        public double HarvestedN { get { return Species.Sum(sp => sp.HarvestedN); } }\r\n\r\n        public double StandingHerbageWt { get { return Species.Sum(sp => sp.Standing.Wt); } }\r\n\r\n        public double AboveGroundWt { get { return Species.Sum(sp => sp.AboveGroundWt); } }\r\n\r\n        public bool IsAlive\r\n        {\r\n            get\r\n            {\r\n                bool alive = true;\r\n                Species.ForEach(sp => alive = alive && sp.PlantStatus == \"alive\");\r\n                return alive;\r\n            }\r\n        }\r\n\r\n        /// <summary>Removes plant material simulating a graze event.</summary>\r\n        /// <param name=\"amount\">The DM amount (kg/ha)</param>\r\n        /// <param name=\"type\">How the amount is interpreted (SetResidueAmount or SetRemoveAmount)</param>\r\n        public void Graze(double amount, string type)\r\n        {\r\n            double amountAvailable = HarvestableWt;\r\n            if (IsAlive || (amountAvailable > Epsilon))\r\n            {\r\n                // Get the amount required to remove\r\n                if (type.ToLower() == \"setresidueamount\")\r\n                {\r\n                    // Remove all DM above given residual amount\r\n                    amountRequired = Math.Max(0.0, AboveGroundWt - amount);\r\n                }\r\n                else if (type.ToLower() == \"setremoveamount\")\r\n                {\r\n                    // Remove a given amount\r\n                    amountRequired = Math.Max(0.0, amount);\r\n                }\r\n                else\r\n                {\r\n                    throw new Exception(\"Type of amount to remove on graze not recognized (use \\'SetResidueAmount\\' or \\'SetRemoveAmount\\'\");\r\n                }\r\n                // Get the actual amount to remove\r\n                double amountToRemove = Math.Max(0.0, Math.Min(amountRequired, amountAvailable));\r\n\r\n                // Get the amounts to remove by mySpecies:\r\n                if (amountToRemove > Epsilon)\r\n                {\r\n                    double[] fractionToRemove = new double[Species.Count];\r\n                    for (int s = 0; s < Species.Count; s++)\r\n                    {\r\n                        // get the fraction to required for each mySpecies, partition according to available DM to harvest\r\n                        fractionToRemove[s] = Species[s].Harvestable.Wt / amountAvailable;\r\n\r\n                        // remove DM and N for each mySpecies (digestibility is also evaluated)\r\n                        Species[s].RemoveBiomass(amountToRemove * fractionToRemove[s]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
          "Parameters": [
            {
              "Key": "PatchType",
              "Value": "UP"
            },
            {
              "Key": "SystemID",
              "Value": "A"
            },
            {
              "Key": "NumPatches",
              "Value": "0"
            },
            {
              "Key": "CuttingFrequency",
              "Value": "0"
            },
            {
              "Key": "CuttingResidual",
              "Value": "1000"
            },
            {
              "Key": "NutrientReturnType",
              "Value": "SetMonthly"
            },
            {
              "Key": "AmountFertNReturned",
              "Value": "15"
            },
            {
              "Key": "AmountDungNReturned",
              "Value": "0"
            },
            {
              "Key": "FertiliserDepth",
              "Value": "200"
            },
            {
              "Key": "FertiliserReturnPattern",
              "Value": "RotatingInOrder"
            },
            {
              "Key": "ReportingFreq",
              "Value": "OnGrazing"
            }
          ],
          "Name": "ZoneManagerOld",
          "ResourceName": null,
          "Children": [],
          "Enabled": false,
          "ReadOnly": false
        },
        {
          "$type": "Models.Report, Models",
          "VariableNames": [
            "Parent.Name as Zone",
            "[Clock].Today as Date",
            "//[Clock].Today.Month as Month",
            "//[Clock].Today.Month as Year",
            "[ReportingWithZonesHelper].Script.ZoneCount as NumZones",
            "",
            "sum([ReportingWithZonesHelper].Script.DenitByZone) / NumZones as Denit",
            "sum([ReportingWithZonesHelper].Script.DenitN2OByZone) / NumZones as DenitN2O",
            "sum([ReportingWithZonesHelper].Script.LeachedNByZone) / NumZones as LeachN",
            "//[ReportingWithZonesHelper].Script.UreaByZone as UreaByZone",
            "//[ReportingWithZonesHelper].Script.NH4ByZone as NH4ByZone",
            "//[ReportingWithZonesHelper].Script.NO3ByZone as NO3ByZone",
            "",
            "//[ReportingWithZonesHelper].Script.MinNByZone as MinNByZone",
            "//[ReportingWithZonesHelper].Script.HerbageWtByZone as HerbageWtByZone",
            "//[ReportingWithZonesHelper].Script.HerbageNByZone as HerbageNByZone",
            "sum([ReportingWithZonesHelper].Script.HarvestedWtByZone) / NumZones as Harvested",
            "//[ReportingWithZonesHelper].Script.HarvestedNByZone as HarvestedNByZone"
          ],
          "EventNames": [
            "[Clock].EndOfDay"
          ],
          "GroupByVariableName": null,
          "Name": "ReportingWithZones",
          "ResourceName": null,
          "Children": [],
          "Enabled": false,
          "ReadOnly": false
        },
        {
          "$type": "Models.Report, Models",
          "VariableNames": [
            "[Clock].Today as Date",
            "//[AgPRyegrass].NitrogenUptake",
            "//[AgPWhiteClover].NitrogenUptake",
            "//sum([Soil].NutrientPatchManager.Urea) as Urea",
            "//sum([Soil].NutrientPatchManager.NH4) as NH4",
            "//sum([Soil].NutrientPatchManager.NO3) as NO3",
            "//sum([Soil].NutrientPatchManager.DenitrifiedN) as Denit",
            "//[Soil].SoilWater.LeachUrea as LeachUrea",
            "//[Soil].SoilWater.LeachNH4 as LeachNH4",
            "//[Soil].SoilWater.LeachNO3 as LeachNO3",
            "//sum([Soil].NutrientPatchManager.Organic.N) as OrganicN",
            "[Soil].NutrientPatchManager.NH4EachPatch",
            "[Soil].NutrientPatchManager.NH4ForEachPatch",
            "",
            "",
            "[Soil].NutrientPatchManager.N2Oatm"
          ],
          "EventNames": [
            "[Clock].EndOfDay"
          ],
          "GroupByVariableName": null,
          "Name": "ZoneReport",
          "ResourceName": null,
          "Children": [],
          "Enabled": false,
          "ReadOnly": false
        },
        {
          "$type": "Models.Report, Models",
          "VariableNames": [
            "[Clock].Today as Date",
            "[ReportingWithZonesHelper].Script.ZoneCount as NumZones",
            "Sum of (sum([ReportingWithZonesHelper].Script.DenitByZone) / NumZones) from [ReportingWithZonesPaddock].DayAfterLastOutput to [Clock].Today as Denit",
            "Sum of (sum([ReportingWithZonesHelper].Script.DenitN2OByZone) / NumZones) from [ReportingWithZonesPaddock].DayAfterLastOutput to [Clock].Today as DenitN2O",
            "Sum of (sum([ReportingWithZonesHelper].Script.LeachedNByZone) / NumZones) from [ReportingWithZonesPaddock].DayAfterLastOutput to [Clock].Today as LeachN",
            "Sum of (sum([ReportingWithZonesHelper].Script.HarvestedWtByZone) / NumZones) from [ReportingWithZonesPaddock].DayAfterLastOutput to [Clock].Today as HarvestedWt"
          ],
          "EventNames": [
            "[Clock].EndOfMonth"
          ],
          "GroupByVariableName": null,
          "Name": "ReportingWithZonesPaddock",
          "ResourceName": null,
          "Children": [],
          "Enabled": false,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "Code": "using Newtonsoft.Json;\nusing System.Linq;\nusing System.Collections.Generic;\nusing APSIM.Shared.Utilities;\nusing System.IO;\nusing System.Xml.Serialization;\nusing Models.AgPasture;\nusing Models.Zones;\nusing Models.PMF;\nusing Models.Soils;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\nusing Models.Soils.Nutrients;\n\nnamespace Models\n{\n    [Serializable]\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Soil soil;\n        [Link] private Zone[] zones;\n        [Link] private ISummary summary;\n        \n\n// nitrogen stuff - the array dimension is the number of paddocks\n        [JsonIgnore] public double[] DenitByZone { get; set; }\n        [JsonIgnore] public double[] DenitN2OByZone { get; set; }\n        [JsonIgnore] public double[] LeachedNByZone  { get; set; }\n        [JsonIgnore] public double[] UreaByZone { get; set; }\n        [JsonIgnore] public double[] NH4ByZone { get; set; }\n        [JsonIgnore] public double[] NO3ByZone { get; set; }\n        [JsonIgnore] public double[] MinNByZone  { get; set; }\n        [JsonIgnore] public int ZoneCount  { get; set; }\n\n// pasture stuff - the array dimension is the number of paddocks\n        [JsonIgnore] public double[] HerbageWtByZone { get; set; }\n        [JsonIgnore] public double[] HerbageNByZone { get; set; }\n        [JsonIgnore] public double[] HarvestedWtByZone { get; set; }\n        [JsonIgnore] public double[] HarvestedNByZone { get; set; }\n\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {    \n            DenitByZone = new double[zones.Length];\n            DenitN2OByZone = new double[zones.Length];\n            LeachedNByZone = new double[zones.Length];\n            UreaByZone = new double[zones.Length];\n            NH4ByZone = new double[zones.Length];\n            NO3ByZone = new double[zones.Length];\n            MinNByZone = new double[zones.Length];\n            HerbageWtByZone = new double[zones.Length];\n            HerbageNByZone = new double[zones.Length];\n            HarvestedWtByZone = new double[zones.Length];\n            HarvestedNByZone = new double[zones.Length];\n\n            ZoneCount = zones.Length;\n        }\n\n        [EventSubscribe(\"DoReport\")]\n        private void OnEndOfDay(object sender, EventArgs e)\n        {\n            //zones = this.FindAllInScope<Zone>().OfType<IModel>().ToList();    \n\n            for (int x = 0; x < zones.Length; x++)\n            {\n                var nutrient = zones[x].FindInScope<INutrient>();                                \n                var waterBalance = zones[x].FindInScope<ISoilWater>();                                \n                var Urea = zones[x].FindInScope<ISolute>(\"Urea\");                                \n                var NH4 = zones[x].FindInScope<ISolute>(\"NH4\");                                \n                var NO3 = zones[x].FindInScope<ISolute>(\"NO3\");                                \n\n                DenitByZone[x] = nutrient.DenitrifiedN.Sum();\n                DenitN2OByZone[x] = nutrient.N2Oatm.Sum();\n                LeachedNByZone[x] = waterBalance.LeachNO3;\n                UreaByZone[x] = Urea.kgha.Sum();\n                NH4ByZone[x] = NH4.kgha.Sum();\n                NO3ByZone[x] = NO3.kgha.Sum();\n                MinNByZone[x] = UreaByZone[x] + NH4ByZone[x] + NO3ByZone[x];\n                \n                var sward = zones[x].FindAllInScope<PastureSpecies>();                                \n                HerbageWtByZone[x] = sward.Sum(species => species.AboveGroundWt); \n                HerbageNByZone[x] = sward.Sum(species => species.AboveGroundN);   \n                HarvestedWtByZone[x] = sward.Sum(species => species.HarvestedWt); \n                HarvestedNByZone[x] = sward.Sum(species => species.HarvestedN); \n\n\n            }            \n\n        }\n\n    }\n}\n",
          "Parameters": [],
          "Name": "ReportingWithZonesHelper",
          "ResourceName": null,
          "Children": [],
          "Enabled": false,
          "ReadOnly": false
        },
        {
          "$type": "Models.Manager, Models",
          "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Soils.NutrientPatching;\nusing Models.Interfaces;\nusing System.Diagnostics;\nusing System.Collections.Generic;\nusing APSIM.Shared.Utilities;\nusing Models.Surface;\nusing Models.Soils;\nusing System.Xml.Serialization;\nusing Models.AgPasture;\nusing Models.Zones;\nusing Models.PMF;\nusing Models.Core;\nusing Models.Core.ApsimFile;\nusing System;\nusing System.Linq;\nusing Models.Climate;\n\nnamespace Models\n{\n    [Serializable]\n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private Clock clock;\n        [Link] private Soil soil;\n        [Link] private ISummary summary;\n        [Link] private Weather weather;\n        [Link] private Zone zone;\n\n        [Description(\"Use verbose reporting to the summary file?\")]\n        public bool Verbose { get; set; }\n        \n        [Description(\"How many zones (explicit patches) should be created?\")]\n        public int ZoneCount { get; set; }\n        \n        [Description(\"Depth of urine penetration (mm)\")]\n        public double UrineDepthPenetration { get; set; }\n        \n        \n\n        private Sward sward;\n        [Link]  private IPhysical soilPhysical;\n\n        [Link] private List<NutrientPatchManager> patchManagers;\n        \n        public int ZoneNumForUrine { get; set; }\n        \n        private double[] MonthlyUrineNAmt;\n        private bool GrazeToday;\n        public double HarvestedWt { get; set; }\n        public double HarvestedN { get; set; }\n        \n        \n        public double AmountUrineNReturned { get; set; }\n        public double AmountDungNReturned { get; set; } \n        public double AmountDungCReturned { get; set; }\n\n\n\t\tprivate double[] UrineDepthPenetrationArray;\n\n        public override void OnPreLink()\n        {\n            var simulation = Parent.Parent as Simulation;\n            var zone = simulation.FindChild<Zone>();\n                \n\t\t\t// Set the maximum N uptake for all species\n\t\t\tforeach (var species in zone.FindAllDescendants<PastureSpecies>())\n\t\t\t{\n\t\t\t\tvar root = species.FindChild<PastureBelowGroundOrgan>();\n\t\t\t\troot.MaximumNUptake = 3.0;\n\t\t\t}\n\t\t\t\t\n            zone.Area = 1.0 / ZoneCount;  // and then this will apply to all the new zones  \n            for (int i = 0; i < ZoneCount-1; i++)\n            {\n                var newZone = Apsim.Clone(zone);\n                Structure.Add(newZone, simulation);\n            }\n        }\n\n        [EventSubscribe(\"StartOfSimulation\")] private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            if (Verbose)\n            \tsummary.WriteMessage(this, \"Created \" + ZoneCount + \" identical zones, each of area \" + (1.0 / ZoneCount) + \" ha\", MessageType.Diagnostic);\n\n            if (Verbose)\n            \tsummary.WriteMessage(this, \"Initialising the ZoneManager for grazing, urine return and reporting\", MessageType.Diagnostic);\n\n            sward = new Sward(zone); \n            MonthlyUrineNAmt = new double[] { 24, 19, 17, 12, 8, 5, 5, 10, 16, 19, 23, 25 }; //This is to get a pattern of return that varies with month but removes the variation that might be caused by small changes in herbage growth\n            if (Verbose)\n            \tsummary.WriteMessage(this, \"Finished initialising the Manager for grazing, urine return and reporting\", MessageType.Diagnostic);\n\n            //NumZonesForUrine = 1;  // in the future this might be > 1\n            ZoneNumForUrine = -1;  // this will be incremented to 0 (first zone) below \n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {    \n\n            // if this is the start of the simulation then sort out the depth for the urine penetration\n            // can't do this in initialisation because of the module order\n            if (clock.Today == clock.StartDate)\n                UrinePenetration();\n\n            GrazeToday = false;\n\t\t\tif (clock.Today.AddDays(1).Day == 1)    // why separate this?  - for multiple options in teh future\n                GrazeToday = true;\n\n            if (GrazeToday)\n            {\n                if (Verbose)\n                \tsummary.WriteMessage(this, \"Doing grazing\", MessageType.Diagnostic);\n\n                // do the herbage removal part of the grazing\n                int i = -1;  // to use as a zone counter\n                HarvestedWt = 0.0;\n                HarvestedN = 0.0;\n                foreach (Zone zone in this.Parent.FindAllInScope<Zone>())\n                {\n                    i += 1;\n                    var sward = new Sward(zone);\n                    sward.Graze(amount: 1000.0, type: \"SetResidueAmount\", Verbose);   // note that I have hardcoded the grazing residual\n                    HarvestedWt += sward.HarvestedWt * zone.Area;\n                    HarvestedN += sward.HarvestedN * zone.Area;\n                    if (Verbose)\n                    \tsummary.WriteMessage(this, \"Just harvested \" + HarvestedWt + \" from Zone \" + zone, MessageType.Diagnostic);\n                }\n\n                /*if (NutrientReturnType == NutrientReturnTypes.FromHarvest)  will need this soon so leave in\n                {\n                    AmountFertNReturned = HarvestedN * 0.50;  // \n                    AmountDungNReturned = HarvestedN * 0.35;  // \n                    AmountDungCReturned = AmountDungNReturned * 20;\n                }\n                else if (NutrientReturnType == NutrientReturnTypes.SetMonthly)\n                {*/\n                AmountUrineNReturned = MonthlyUrineNAmt[clock.Today.Month - 1];   //  hardcoded above\n                AmountDungNReturned = AmountUrineNReturned * (0.35 / 0.50);  // \n                AmountDungCReturned = AmountDungNReturned * 20;\n                if (Verbose)\n                \tsummary.WriteMessage(this, \"The amount of urine N to be returned to the whole paddock is \" + AmountUrineNReturned, MessageType.Diagnostic);\n\n                DoUrineReturn();\n                DoTramplingAndDungReturn();\n                if (Verbose)\n                \tsummary.WriteMessage(this, \"Finished Grazing\", MessageType.Diagnostic);\n\n            }\n            else\n            {\n            }\n            \n        }\n\n        public void DoTramplingAndDungReturn()\n        {\n            // IS THE AMOUTN OF DUNG CORREXT FOR ZONES????\n            \n            int i = -1;  // patch or paddock counter\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\n            {\n                i += 1;\n                SurfaceOrganicMatter surfaceOM = zone.FindInScope<SurfaceOrganicMatter>() as SurfaceOrganicMatter; \n\n                // do some trampling of litter\n                // accelerate the movement of surface litter into the soil - do this before the dung is added\n                double temp = surfaceOM.Wt * 0.1;\n\n                TillageType trampling = new TillageType();\n                surfaceOM.Incorporate(fraction: (double)0.1, depth: (double)100.0, Verbose);\n\n                if (Verbose)\n                \tsummary.WriteMessage(this, \"For patch \" + i + \" the amount of litter trampled was \" + temp + \" and the remaining litter is \" + (surfaceOM.Wt), MessageType.Diagnostic);\n\n                // move the dung to litter - assume dung is 40% of that harvested and a C:N ratio of \n                AddFaecesType dung = new AddFaecesType();\n                dung.OMWeight = AmountDungCReturned / 0.4;\n                dung.OMN = AmountDungNReturned;\n                surfaceOM.AddFaeces(dung);\n                if (Verbose)\n                \tsummary.WriteMessage(this, \"For patch \" + i + \" the amount of dung DM added to the litter was \" + (AmountDungCReturned / 0.4) + \" and the amount of N added in the dung was \" + (AmountDungNReturned), MessageType.Diagnostic);\n\n            } \n        }\n\n        public void DoUrineReturn()\n        {\n            GetZoneForUrineReturn();  \n      \t\tif (Verbose)\n      \t\t\tsummary.WriteMessage(this, \"The Zone for urine return is \" + ZoneNumForUrine, MessageType.Diagnostic);\n\n            int i = -1; //to count the zones\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>())\n            {\n                i += 1;\n                if (i == ZoneNumForUrine)\n                {\n                    Fertiliser thisFert = zone.FindInScope<Fertiliser>() as Fertiliser;\n                    Soil soil = zone.FindInScope<Soil>() as Soil;  // do I need this?\n\n                    double tempDepth = 0.0;\n                    for (int ii = 0; ii <= (soilPhysical.Thickness.Length - 1); ii++)\n                    {\n                        tempDepth += soilPhysical.Thickness[ii];\n                        thisFert.Apply(Amount: (double)(UrineDepthPenetrationArray[ii] * ZoneCount * AmountUrineNReturned), Type: Fertiliser.Types.UreaN, Depth: (tempDepth - soilPhysical.Thickness[ii] / 2), doOutput: Verbose);\n                        // above multiply by ZoneCount to get the patch concentration effect\n                    }\n                                        \n             \t\tif (Verbose)\n             \t\t\tsummary.WriteMessage(this, AmountUrineNReturned + \" urine N added to Zone \" + i + \", the local load was \" + ZoneCount * AmountUrineNReturned + \" kg N /ha\", MessageType.Diagnostic);\n                 }\n             } \n        }\n\n        public void GetZoneForUrineReturn()\n        {\n            ZoneNumForUrine += 1;  //increment the patch number - it was initialised at -1\n            if (ZoneNumForUrine >= ZoneCount)\n                ZoneNumForUrine = 0;  // but reset back to the first patch if needed\n\n            //Random rnd = new Random();\n            //PatchNumForFert = rnd.Next(0, NumPatches);\n            //summary.WriteMessage(this, \"The next random number patch for fertiliser return is \" + PatchNumForFert, MessageType.Diagnostic);\n        }\n\n\n        public void UrinePenetration()\n        {\n            // note that this only looks at the first paddock and assumes that all the paddocks are the same\n            int iii = -1;  // to use as a patch counter\n            foreach (Zone zone in this.Parent.FindAllInScope<Zone>().OfType<IModel>().ToList())\n            {\n                iii += 1;\n                if (iii == 0)\n                {\n                    Soil soil = zone.FindInScope<Soil>() as Soil;\n                    double tempDepth = 0.0;\n                    UrineDepthPenetrationArray = new double[soilPhysical.Thickness.Length];\n                    for (int i = 0; i <= (soilPhysical.Thickness.Length - 1); i++)\n                    {\n                        tempDepth += soilPhysical.Thickness[i];\n                        if (tempDepth <= UrineDepthPenetration)\n                        {\n                            UrineDepthPenetrationArray[i] = soilPhysical.Thickness[i] / UrineDepthPenetration;\n                        }\n                        else\n                        {\n                            UrineDepthPenetrationArray[i] = (UrineDepthPenetration - (tempDepth - soilPhysical.Thickness[i])) / (tempDepth - (tempDepth - soilPhysical.Thickness[i])) * soilPhysical.Thickness[i] / UrineDepthPenetration;\n                            UrineDepthPenetrationArray[i] = Math.Max(0.0, Math.Min(1.0, UrineDepthPenetrationArray[i]));\n                        }\n                        if (Verbose)\n                        \tsummary.WriteMessage(this, \"The proportion of urine applied to the \" + i + \"th layer will be \" + UrineDepthPenetrationArray[i], MessageType.Diagnostic);\n                    }\n                }\n            }\n\n        }\n\n\n        \n   \n    // A class for aggregating a pasture species mix.  ??????????????? is this needed now?\n    [Serializable]\n    class Sward\n    {\n     \tprivate const double Epsilon = 0.000000001;\n        private double amountRequired;\n\n        public Sward(Zone zone)\n        {\n            Species = zone.FindAllDescendants<PastureSpecies>().OfType<IModel>().ToList().Cast<PastureSpecies>().ToList();\n\t\t}\n\t\t\n        public List<PastureSpecies> Species { get; private set; }\n\n        public double HarvestableWt { get { return Species.Sum(sp => sp.Harvestable.Wt); } }\n\n        public double HarvestedWt { get { return Species.Sum(sp => sp.HarvestedWt); } }\n\n        public double HarvestedN { get { return Species.Sum(sp => sp.HarvestedN); } }\n\n        public double StandingHerbageWt { get { return Species.Sum(sp => sp.Standing.Wt); } }\n\n        public double AboveGroundWt { get { return Species.Sum(sp => sp.AboveGroundWt); } }\n\n        public bool IsAlive\n        {\n            get\n            {\n                bool alive = true;\n                Species.ForEach(sp => alive = alive && sp.PlantStatus == \"alive\");\n                return alive;\n            }\n         }\n     \n\n        /// <summary>Removes plant material simulating a graze event.</summary>\n        /// <param name=\"amount\">The DM amount (kg/ha)</param>\n        /// <param name=\"type\">How the amount is interpreted (SetResidueAmount or SetRemoveAmount)</param>\n        public void Graze(double amount, string type, bool Verbose)\n        {\n            double amountAvailable = HarvestableWt;\n            if (IsAlive || (amountAvailable > Epsilon))\n            {\n                // Get the amount required to remove\n                if (type.ToLower() == \"setresidueamount\")\n                {\n                    // Remove all DM above given residual amount\n                    amountRequired = Math.Max(0.0, AboveGroundWt - amount);\n                }\n                else if (type.ToLower() == \"setremoveamount\")\n                {\n                    // Remove a given amount\n                    amountRequired = Math.Max(0.0, amount);\n                }\n                else\n                {\n                    throw new Exception(\"Type of amount to remove on graze not recognized (use \\'SetResidueAmount\\' or \\'SetRemoveAmount\\'\");\n                }\n                // Get the actual amount to remove\n                double amountToRemove = Math.Max(0.0, Math.Min(amountRequired, amountAvailable));\n\n                // Get the amounts to remove by mySpecies:\n                if (amountToRemove > Epsilon)\n                {\n                    double[] fractionToRemove = new double[Species.Count];\n                    for (int s = 0; s < Species.Count; s++)\n                    {\n                        // get the fraction to required for each mySpecies, partition according to available DM to harvest\n                        fractionToRemove[s] = Species[s].Harvestable.Wt / amountAvailable;\n\n                        // remove DM and N for each mySpecies (digestibility is also evaluated)\n                        Species[s].RemoveBiomass(amountToRemove * fractionToRemove[s], Verbose);\n                    }\n                }\n            }\n        }\n\t}\n    }\n}\n",
          "Parameters": [
            {
              "Key": "ZoneCount",
              "Value": "0"
            },
            {
              "Key": "UrineDepthPenetration",
              "Value": "200"
            },
            {
              "Key": "Verbose",
              "Value": "False"
            }
          ],
          "Name": "ZoneManager",
          "ResourceName": null,
          "Children": [],
          "Enabled": false,
          "ReadOnly": false
        }
      ],
      "Enabled": false,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}