{
  "$type": "Models.Core.Simulations, Models",
  "ExplorerWidth": 285,
  "Version": 150,
  "Name": "Simulations",
  "Children": [
    {
      "$type": "Models.Memo, Models",
      "Text": "\r\n# The APSIM Soil Arbitrator Model\r\n\r\n_Huth, N.I., Fainges, J.L. and Holzworth, D.P._",
      "Name": "TitlePage",
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Storage.DataStore, Models",
      "useFirebird": false,
      "CustomFileName": null,
      "Name": "DataStore",
      "Children": [],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": true,
      "GraphsPerPage": 6,
      "Name": "Simple Test Using Split Populations",
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "\r\nThis test compares the water and nitrogen competition for simulations where a static crop canopy with LAI of 3, rooting depth of 1m and a daily N demand of 0.15 kgN/ha is a single crop, two half-populations or three one third-populations.  In each case the total canopy size and water demand of each of the single or split populations will be the same.  If the soil arbitrator is operating correctly the overall water and nitrogen balance of each simulation should be the same.  In the case of the split populations, the water and nitrogen supplies provided by the soil arbitrator to the sub-populations should sum to the same value calculated in the simulation for the full population.\r\n\r\nThis test simulation also tests that the uptakes provided by the arbitrator are passed to the correct instances of each crop model within a multiple zone simulation.  In such a simulation there may be multiple instances of a wheat model for example.  The arbitrator must communicate such that the correct information is supplied to each instance of each particular crop model.\r\n\r\nThe simulation includes 3 fields with up to three crops in each.\r\n\r\nField 1\r\n\r\nWheat: LAI = 3 (m^2^/m^2^), N demand = 0.15 (kg/ha)\r\n\r\nField 2\r\n\r\nWheat: LAI = 1.5 (m^2^/m^2^), N demand = 0.075 (kg/ha)\r\n\r\nBarley: LAI = 1.5 (m^2^/m^2^), N demand = 0.075 (kg/ha)\r\n\r\nField 3\r\n\r\nWheat: LAI = 1.0 (m^2^/m^2^), N demand = 0.05 (kg/ha)\r\n\r\nBarley: LAI = 1.0 (m^2^/m^2^), N demand = 0.05 (kg/ha)\r\n\r\nOats:   LAI = 1.0 (m^2^/m^2^), N demand = 0.05 (kg/ha)\r\n\r\nThe crops are simple instances of a static plant model and so the crop type is only of use in referencing the various instances of the models.\r\n",
          "Name": "Memo",
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Simulation, Models",
          "IsRunning": false,
          "Descriptors": null,
          "Name": "SplitPopulations",
          "Children": [
            {
              "$type": "Models.Clock, Models",
              "Start": "1900-01-01T00:00:00",
              "End": "1904-12-31T00:00:00",
              "Name": "Clock",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Summary, Models",
              "Verbosity": 100,
              "Name": "SummaryFile",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Climate.Weather, Models",
              "ConstantsFile": null,
              "FileName": "%root%\\Examples\\WeatherFiles\\Dalby.met",
              "ExcelWorkSheetName": null,
              "Name": "Weather",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
              "Name": "SoilArbitrator",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Zone, Models",
              "Area": 1.0,
              "Slope": 0.0,
              "AspectAngle": 0.0,
              "Altitude": 50.0,
              "Name": "Field1",
              "Children": [
                {
                  "$type": "Models.Report, Models",
                  "VariableNames": [
                    "[Clock].Today",
                    "sum([Soil].SoilWater.SWmm) as SWTotal",
                    "sum([Soil].SoilNitrogen.NO3.kgha) as NO3Total",
                    "sum([Soil].SoilNitrogen.NH4.kgha) as NH4Total",
                    "[Wheat].PotentialEP",
                    "[Wheat].EP"
                  ],
                  "EventNames": [
                    "[Clock].EndOfDay"
                  ],
                  "GroupByVariableName": null,
                  "Name": "Report1",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Fertiliser, Models",
                  "ResourceName": "Fertiliser",
                  "Name": "Fertiliser",
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Soil, Models",
                  "RecordNumber": 0,
                  "ASCOrder": "Vertosol",
                  "ASCSubOrder": "Black",
                  "SoilType": "Clay",
                  "LocalName": null,
                  "Site": "Norwin",
                  "NearestTown": "Norwin",
                  "Region": "Darling Downs and Granite Belt",
                  "State": "Queensland",
                  "Country": "Australia",
                  "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
                  "ApsoilNumber": "900",
                  "Latitude": -27.581836,
                  "Longitude": 151.320206,
                  "LocationAccuracy": " +/- 20m",
                  "YearOfSampling": null,
                  "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
                  "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
                  "Name": "Soil",
                  "Children": [
                    {
                      "$type": "Models.Soils.Physical, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "ParticleSizeClay": null,
                      "ParticleSizeSand": null,
                      "ParticleSizeSilt": null,
                      "Rocks": null,
                      "Texture": null,
                      "BD": [
                        1.01056473311131,
                        1.07145631083388,
                        1.09393858528057,
                        1.15861335018721,
                        1.17301160318016,
                        1.16287303586874,
                        1.18749547755906
                      ],
                      "AirDry": [
                        0.130250054518252,
                        0.198689390775399,
                        0.28,
                        0.28,
                        0.28,
                        0.28,
                        0.28
                      ],
                      "LL15": [
                        0.260500109036505,
                        0.248361738469248,
                        0.28,
                        0.28,
                        0.28,
                        0.28,
                        0.28
                      ],
                      "DUL": [
                        0.52100021807301,
                        0.496723476938497,
                        0.488437607673005,
                        0.480296969355493,
                        0.471583596524955,
                        0.457070570557793,
                        0.452331759845006
                      ],
                      "SAT": [
                        0.588654817693846,
                        0.565676863836273,
                        0.557192986686577,
                        0.532787415023694,
                        0.527354112007486,
                        0.531179986464627,
                        0.521888499034317
                      ],
                      "KS": [
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0
                      ],
                      "BDMetadata": null,
                      "AirDryMetadata": null,
                      "LL15Metadata": null,
                      "DULMetadata": null,
                      "SATMetadata": null,
                      "KSMetadata": null,
                      "RocksMetadata": null,
                      "TextureMetadata": null,
                      "ParticleSizeSandMetadata": null,
                      "ParticleSizeSiltMetadata": null,
                      "ParticleSizeClayMetadata": null,
                      "Name": "Physical",
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.261,
                            0.248,
                            0.28,
                            0.306,
                            0.36,
                            0.392,
                            0.446
                          ],
                          "KL": [
                            0.06,
                            0.06,
                            0.06,
                            0.03,
                            0.03,
                            0.03,
                            0.03
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "WheatSoil",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.WaterModel.WaterBalance, Models",
                      "SummerDate": "1-Nov",
                      "SummerU": 5.0,
                      "SummerCona": 5.0,
                      "WinterDate": "1-Apr",
                      "WinterU": 5.0,
                      "WinterCona": 5.0,
                      "DiffusConst": 40.0,
                      "DiffusSlope": 16.0,
                      "Salb": 0.12,
                      "CN2Bare": 73.0,
                      "CNRed": 20.0,
                      "CNCov": 0.8,
                      "DischargeWidth": "NaN",
                      "CatchmentArea": "NaN",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "SWCON": [
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3
                      ],
                      "KLAT": null,
                      "ResourceName": "WaterBalance",
                      "Name": "SoilWater",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogen, Models",
                      "fom_types": [
                        "default",
                        "manure",
                        "mucuna",
                        "lablab",
                        "shemp",
                        "stable"
                      ],
                      "fract_carb": [
                        0.2,
                        0.3,
                        0.54,
                        0.57,
                        0.45,
                        0.0
                      ],
                      "fract_cell": [
                        0.7,
                        0.3,
                        0.37,
                        0.37,
                        0.47,
                        0.1
                      ],
                      "fract_lign": [
                        0.1,
                        0.4,
                        0.09,
                        0.06,
                        0.08,
                        0.9
                      ],
                      "NPartitionApproach": 0,
                      "Name": "SoilNitrogen",
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilNitrogenNO3, Models",
                          "Name": "NO3",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenNH4, Models",
                          "Name": "NH4",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenUrea, Models",
                          "Name": "Urea",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Organic, Models",
                      "FOMCNRatio": 40.0,
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "Carbon": [
                        1.2,
                        0.96,
                        0.6,
                        0.3,
                        0.18,
                        0.12,
                        0.12
                      ],
                      "SoilCNRatio": [
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0
                      ],
                      "FBiom": [
                        0.04,
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "FInert": [
                        0.4,
                        0.6,
                        0.8,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "FOM": [
                        347.1290323127564,
                        270.3443621919937,
                        163.97214434990104,
                        99.45413288704063,
                        60.32198083112468,
                        36.58713082867487,
                        22.1912165985086
                      ],
                      "CarbonMetadata": null,
                      "FOMMetadata": null,
                      "Name": "Organic",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Chemical, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "NO3N": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "NH4N": [
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1
                      ],
                      "PH": [
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0
                      ],
                      "CL": null,
                      "EC": null,
                      "ESP": null,
                      "LabileP": null,
                      "UnavailableP": null,
                      "ECMetadata": null,
                      "CLMetadata": null,
                      "ESPMetadata": null,
                      "PHMetadata": null,
                      "Name": "Chemical",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.InitialWater, Models",
                      "PercentMethod": 1,
                      "FractionFull": 1.0,
                      "DepthWetSoil": "NaN",
                      "RelativeTo": null,
                      "Name": "InitialWater",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Sample, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "NO3": null,
                      "NH4": null,
                      "LabileP": null,
                      "UnavailableP": null,
                      "SW": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "OC": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "EC": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "CL": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "ESP": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "PH": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "SWUnits": 0,
                      "OCUnits": 0,
                      "PHUnits": 0,
                      "Name": "InitialN",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.CERESSoilTemperature, Models",
                      "Name": "Temperature",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                  "InitialResidueName": "wheat_stubble",
                  "InitialResidueType": "wheat",
                  "InitialResidueMass": 500.0,
                  "InitialStandingFraction": 0.0,
                  "InitialCPR": 0.0,
                  "InitialCNR": 100.0,
                  "ResourceName": "SurfaceOrganicMatter",
                  "Name": "SurfaceOrganicMatter",
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.MicroClimate, Models",
                  "a_interception": 0.0,
                  "b_interception": 1.0,
                  "c_interception": 0.0,
                  "d_interception": 0.0,
                  "SoilHeatFluxFraction": 0.4,
                  "MinimumHeightDiffForNewLayer": 0.0,
                  "NightInterceptionFraction": 0.5,
                  "ReferenceHeight": 2.0,
                  "Name": "MicroClimate",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.PMF.SimpleTree, Models",
                  "CanopyType": "wheat",
                  "LAI": 3.0,
                  "Height": 10000.0,
                  "LightProfile": null,
                  "RootDepth": 1000.0,
                  "NDemand": 0.15,
                  "NitrogenUptake": null,
                  "Name": "wheat",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Zone, Models",
              "Area": 1.0,
              "Slope": 0.0,
              "AspectAngle": 0.0,
              "Altitude": 50.0,
              "Name": "Field2",
              "Children": [
                {
                  "$type": "Models.Report, Models",
                  "VariableNames": [
                    "[Clock].Today",
                    "sum([Soil].SoilWater.SWmm) as SWTotal",
                    "sum([Soil].SoilNitrogen.NO3.kgha) as NO3Total",
                    "sum([Soil].SoilNitrogen.NH4.kgha) as NH4Total",
                    "[Wheat].PotentialEP",
                    "[Barley].PotentialEP",
                    "([Wheat].PotentialEP+[Barley].PotentialEP) as TotalPEP",
                    "[Wheat].EP",
                    "[Barley].EP",
                    "([Wheat].EP+[Barley].EP) as TotalEP"
                  ],
                  "EventNames": [
                    "[Clock].EndOfDay"
                  ],
                  "GroupByVariableName": null,
                  "Name": "Report2",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Fertiliser, Models",
                  "ResourceName": "Fertiliser",
                  "Name": "Fertiliser",
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Soil, Models",
                  "RecordNumber": 0,
                  "ASCOrder": "Vertosol",
                  "ASCSubOrder": "Black",
                  "SoilType": "Clay",
                  "LocalName": null,
                  "Site": "Norwin",
                  "NearestTown": "Norwin",
                  "Region": "Darling Downs and Granite Belt",
                  "State": "Queensland",
                  "Country": "Australia",
                  "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
                  "ApsoilNumber": "900",
                  "Latitude": -27.581836,
                  "Longitude": 151.320206,
                  "LocationAccuracy": " +/- 20m",
                  "YearOfSampling": null,
                  "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
                  "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
                  "Name": "Soil",
                  "Children": [
                    {
                      "$type": "Models.Soils.Physical, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "ParticleSizeClay": null,
                      "ParticleSizeSand": null,
                      "ParticleSizeSilt": null,
                      "Rocks": null,
                      "Texture": null,
                      "BD": [
                        1.01056473311131,
                        1.07145631083388,
                        1.09393858528057,
                        1.15861335018721,
                        1.17301160318016,
                        1.16287303586874,
                        1.18749547755906
                      ],
                      "AirDry": [
                        0.130250054518252,
                        0.198689390775399,
                        0.28,
                        0.28,
                        0.28,
                        0.28,
                        0.28
                      ],
                      "LL15": [
                        0.260500109036505,
                        0.248361738469248,
                        0.28,
                        0.28,
                        0.28,
                        0.28,
                        0.28
                      ],
                      "DUL": [
                        0.52100021807301,
                        0.496723476938497,
                        0.488437607673005,
                        0.480296969355493,
                        0.471583596524955,
                        0.457070570557793,
                        0.452331759845006
                      ],
                      "SAT": [
                        0.588654817693846,
                        0.565676863836273,
                        0.557192986686577,
                        0.532787415023694,
                        0.527354112007486,
                        0.531179986464627,
                        0.521888499034317
                      ],
                      "KS": [
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0
                      ],
                      "BDMetadata": null,
                      "AirDryMetadata": null,
                      "LL15Metadata": null,
                      "DULMetadata": null,
                      "SATMetadata": null,
                      "KSMetadata": null,
                      "RocksMetadata": null,
                      "TextureMetadata": null,
                      "ParticleSizeSandMetadata": null,
                      "ParticleSizeSiltMetadata": null,
                      "ParticleSizeClayMetadata": null,
                      "Name": "Physical",
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.261,
                            0.248,
                            0.28,
                            0.306,
                            0.36,
                            0.392,
                            0.446
                          ],
                          "KL": [
                            0.03,
                            0.03,
                            0.03,
                            0.015,
                            0.015,
                            0.015,
                            0.015
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "WheatSoil",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.261,
                            0.248,
                            0.28,
                            0.306,
                            0.36,
                            0.392,
                            0.446
                          ],
                          "KL": [
                            0.03,
                            0.03,
                            0.03,
                            0.015,
                            0.015,
                            0.015,
                            0.015
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "BarleySoil",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.WaterModel.WaterBalance, Models",
                      "SummerDate": "1-Nov",
                      "SummerU": 5.0,
                      "SummerCona": 5.0,
                      "WinterDate": "1-Apr",
                      "WinterU": 5.0,
                      "WinterCona": 5.0,
                      "DiffusConst": 40.0,
                      "DiffusSlope": 16.0,
                      "Salb": 0.12,
                      "CN2Bare": 73.0,
                      "CNRed": 20.0,
                      "CNCov": 0.8,
                      "DischargeWidth": "NaN",
                      "CatchmentArea": "NaN",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "SWCON": [
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3
                      ],
                      "KLAT": null,
                      "ResourceName": "WaterBalance",
                      "Name": "SoilWater",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogen, Models",
                      "fom_types": [
                        "default",
                        "manure",
                        "mucuna",
                        "lablab",
                        "shemp",
                        "stable"
                      ],
                      "fract_carb": [
                        0.2,
                        0.3,
                        0.54,
                        0.57,
                        0.45,
                        0.0
                      ],
                      "fract_cell": [
                        0.7,
                        0.3,
                        0.37,
                        0.37,
                        0.47,
                        0.1
                      ],
                      "fract_lign": [
                        0.1,
                        0.4,
                        0.09,
                        0.06,
                        0.08,
                        0.9
                      ],
                      "NPartitionApproach": 0,
                      "Name": "SoilNitrogen",
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilNitrogenNO3, Models",
                          "Name": "NO3",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenNH4, Models",
                          "Name": "NH4",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenUrea, Models",
                          "Name": "Urea",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Organic, Models",
                      "FOMCNRatio": 40.0,
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "Carbon": [
                        1.2,
                        0.96,
                        0.6,
                        0.3,
                        0.18,
                        0.12,
                        0.12
                      ],
                      "SoilCNRatio": [
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0
                      ],
                      "FBiom": [
                        0.04,
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "FInert": [
                        0.4,
                        0.6,
                        0.8,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "FOM": [
                        347.1290323127564,
                        270.3443621919937,
                        163.97214434990104,
                        99.45413288704063,
                        60.32198083112468,
                        36.58713082867487,
                        22.1912165985086
                      ],
                      "CarbonMetadata": null,
                      "FOMMetadata": null,
                      "Name": "Organic",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Chemical, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "NO3N": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "NH4N": [
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1
                      ],
                      "PH": [
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0
                      ],
                      "CL": null,
                      "EC": null,
                      "ESP": null,
                      "LabileP": null,
                      "UnavailableP": null,
                      "ECMetadata": null,
                      "CLMetadata": null,
                      "ESPMetadata": null,
                      "PHMetadata": null,
                      "Name": "Chemical",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.InitialWater, Models",
                      "PercentMethod": 1,
                      "FractionFull": 1.0,
                      "DepthWetSoil": "NaN",
                      "RelativeTo": null,
                      "Name": "InitialWater",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Sample, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "NO3": null,
                      "NH4": null,
                      "LabileP": null,
                      "UnavailableP": null,
                      "SW": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "OC": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "EC": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "CL": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "ESP": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "PH": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "SWUnits": 0,
                      "OCUnits": 0,
                      "PHUnits": 0,
                      "Name": "InitialN",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.CERESSoilTemperature, Models",
                      "Name": "Temperature",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                  "InitialResidueName": "wheat_stubble",
                  "InitialResidueType": "wheat",
                  "InitialResidueMass": 500.0,
                  "InitialStandingFraction": 0.0,
                  "InitialCPR": 0.0,
                  "InitialCNR": 100.0,
                  "ResourceName": "SurfaceOrganicMatter",
                  "Name": "SurfaceOrganicMatter",
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.MicroClimate, Models",
                  "a_interception": 0.0,
                  "b_interception": 1.0,
                  "c_interception": 0.0,
                  "d_interception": 0.0,
                  "SoilHeatFluxFraction": 0.4,
                  "MinimumHeightDiffForNewLayer": 0.0,
                  "NightInterceptionFraction": 0.5,
                  "ReferenceHeight": 2.0,
                  "Name": "MicroClimate",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.PMF.SimpleTree, Models",
                  "CanopyType": "wheat",
                  "LAI": 1.5,
                  "Height": 10000.0,
                  "LightProfile": null,
                  "RootDepth": 1000.0,
                  "NDemand": 0.075,
                  "NitrogenUptake": null,
                  "Name": "wheat",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.PMF.SimpleTree, Models",
                  "CanopyType": "barley",
                  "LAI": 1.5,
                  "Height": 10000.0,
                  "LightProfile": null,
                  "RootDepth": 1000.0,
                  "NDemand": 0.075,
                  "NitrogenUptake": null,
                  "Name": "barley",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Zone, Models",
              "Area": 1.0,
              "Slope": 0.0,
              "AspectAngle": 0.0,
              "Altitude": 50.0,
              "Name": "Field3",
              "Children": [
                {
                  "$type": "Models.Report, Models",
                  "VariableNames": [
                    "[Clock].Today",
                    "sum([Soil].SoilWater.SWmm) as SWTotal",
                    "sum([Soil].SoilNitrogen.NO3.kgha) as NO3Total",
                    "sum([Soil].SoilNitrogen.NH4.kgha) as NH4Total",
                    "[Wheat].PotentialEP",
                    "[Barley].PotentialEP",
                    "[Oats].PotentialEP",
                    "([Wheat].PotentialEP+[Barley].PotentialEP+[Oats].PotentialEP) as TotalPEP",
                    "[Wheat].EP",
                    "[Barley].EP",
                    "[Oats].EP",
                    "([Wheat].EP+[Barley].EP+[Oats].EP) as TotalEP"
                  ],
                  "EventNames": [
                    "[Clock].EndOfDay"
                  ],
                  "GroupByVariableName": null,
                  "Name": "Report3",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Fertiliser, Models",
                  "ResourceName": "Fertiliser",
                  "Name": "Fertiliser",
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Soil, Models",
                  "RecordNumber": 0,
                  "ASCOrder": "Vertosol",
                  "ASCSubOrder": "Black",
                  "SoilType": "Clay",
                  "LocalName": null,
                  "Site": "Norwin",
                  "NearestTown": "Norwin",
                  "Region": "Darling Downs and Granite Belt",
                  "State": "Queensland",
                  "Country": "Australia",
                  "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
                  "ApsoilNumber": "900",
                  "Latitude": -27.581836,
                  "Longitude": 151.320206,
                  "LocationAccuracy": " +/- 20m",
                  "YearOfSampling": null,
                  "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
                  "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
                  "Name": "Soil",
                  "Children": [
                    {
                      "$type": "Models.Soils.Physical, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "ParticleSizeClay": null,
                      "ParticleSizeSand": null,
                      "ParticleSizeSilt": null,
                      "Rocks": null,
                      "Texture": null,
                      "BD": [
                        1.01056473311131,
                        1.07145631083388,
                        1.09393858528057,
                        1.15861335018721,
                        1.17301160318016,
                        1.16287303586874,
                        1.18749547755906
                      ],
                      "AirDry": [
                        0.130250054518252,
                        0.198689390775399,
                        0.28,
                        0.28,
                        0.28,
                        0.28,
                        0.28
                      ],
                      "LL15": [
                        0.260500109036505,
                        0.248361738469248,
                        0.28,
                        0.28,
                        0.28,
                        0.28,
                        0.28
                      ],
                      "DUL": [
                        0.52100021807301,
                        0.496723476938497,
                        0.488437607673005,
                        0.480296969355493,
                        0.471583596524955,
                        0.457070570557793,
                        0.452331759845006
                      ],
                      "SAT": [
                        0.588654817693846,
                        0.565676863836273,
                        0.557192986686577,
                        0.532787415023694,
                        0.527354112007486,
                        0.531179986464627,
                        0.521888499034317
                      ],
                      "KS": [
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0,
                        20.0
                      ],
                      "BDMetadata": null,
                      "AirDryMetadata": null,
                      "LL15Metadata": null,
                      "DULMetadata": null,
                      "SATMetadata": null,
                      "KSMetadata": null,
                      "RocksMetadata": null,
                      "TextureMetadata": null,
                      "ParticleSizeSandMetadata": null,
                      "ParticleSizeSiltMetadata": null,
                      "ParticleSizeClayMetadata": null,
                      "Name": "Physical",
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.261,
                            0.248,
                            0.28,
                            0.306,
                            0.36,
                            0.392,
                            0.446
                          ],
                          "KL": [
                            0.02,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "WheatSoil",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.261,
                            0.248,
                            0.28,
                            0.306,
                            0.36,
                            0.392,
                            0.446
                          ],
                          "KL": [
                            0.02,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "BarleySoil",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilCrop, Models",
                          "LL": [
                            0.261,
                            0.248,
                            0.28,
                            0.306,
                            0.36,
                            0.392,
                            0.446
                          ],
                          "KL": [
                            0.02,
                            0.02,
                            0.02,
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "XF": [
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0,
                            1.0
                          ],
                          "LLMetadata": null,
                          "KLMetadata": null,
                          "XFMetadata": null,
                          "Name": "OatsSoil",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.WaterModel.WaterBalance, Models",
                      "SummerDate": "1-Nov",
                      "SummerU": 5.0,
                      "SummerCona": 5.0,
                      "WinterDate": "1-Apr",
                      "WinterU": 5.0,
                      "WinterCona": 5.0,
                      "DiffusConst": 40.0,
                      "DiffusSlope": 16.0,
                      "Salb": 0.12,
                      "CN2Bare": 73.0,
                      "CNRed": 20.0,
                      "CNCov": 0.8,
                      "DischargeWidth": "NaN",
                      "CatchmentArea": "NaN",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "SWCON": [
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3,
                        0.3
                      ],
                      "KLAT": null,
                      "ResourceName": "WaterBalance",
                      "Name": "SoilWater",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogen, Models",
                      "fom_types": [
                        "default",
                        "manure",
                        "mucuna",
                        "lablab",
                        "shemp",
                        "stable"
                      ],
                      "fract_carb": [
                        0.2,
                        0.3,
                        0.54,
                        0.57,
                        0.45,
                        0.0
                      ],
                      "fract_cell": [
                        0.7,
                        0.3,
                        0.37,
                        0.37,
                        0.47,
                        0.1
                      ],
                      "fract_lign": [
                        0.1,
                        0.4,
                        0.09,
                        0.06,
                        0.08,
                        0.9
                      ],
                      "NPartitionApproach": 0,
                      "Name": "SoilNitrogen",
                      "Children": [
                        {
                          "$type": "Models.Soils.SoilNitrogenNO3, Models",
                          "Name": "NO3",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenNH4, Models",
                          "Name": "NH4",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogenUrea, Models",
                          "Name": "Urea",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Organic, Models",
                      "FOMCNRatio": 40.0,
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "Carbon": [
                        1.2,
                        0.96,
                        0.6,
                        0.3,
                        0.18,
                        0.12,
                        0.12
                      ],
                      "SoilCNRatio": [
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0,
                        12.0
                      ],
                      "FBiom": [
                        0.04,
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "FInert": [
                        0.4,
                        0.6,
                        0.8,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "FOM": [
                        347.1290323127564,
                        270.3443621919937,
                        163.97214434990104,
                        99.45413288704063,
                        60.32198083112468,
                        36.58713082867487,
                        22.1912165985086
                      ],
                      "CarbonMetadata": null,
                      "FOMMetadata": null,
                      "Name": "Organic",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Chemical, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "NO3N": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "NH4N": [
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1,
                        0.1
                      ],
                      "PH": [
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0,
                        8.0
                      ],
                      "CL": null,
                      "EC": null,
                      "ESP": null,
                      "LabileP": null,
                      "UnavailableP": null,
                      "ECMetadata": null,
                      "CLMetadata": null,
                      "ESPMetadata": null,
                      "PHMetadata": null,
                      "Name": "Chemical",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.InitialWater, Models",
                      "PercentMethod": 1,
                      "FractionFull": 1.0,
                      "DepthWetSoil": "NaN",
                      "RelativeTo": null,
                      "Name": "InitialWater",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Sample, Models",
                      "Thickness": [
                        150.0,
                        150.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0,
                        300.0
                      ],
                      "NO3": null,
                      "NH4": null,
                      "LabileP": null,
                      "UnavailableP": null,
                      "SW": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "OC": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "EC": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "CL": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "ESP": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "PH": [
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN",
                        "NaN"
                      ],
                      "SWUnits": 0,
                      "OCUnits": 0,
                      "PHUnits": 0,
                      "Name": "InitialN",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.CERESSoilTemperature, Models",
                      "Name": "Temperature",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                  "InitialResidueName": "wheat_stubble",
                  "InitialResidueType": "wheat",
                  "InitialResidueMass": 500.0,
                  "InitialStandingFraction": 0.0,
                  "InitialCPR": 0.0,
                  "InitialCNR": 100.0,
                  "ResourceName": "SurfaceOrganicMatter",
                  "Name": "SurfaceOrganicMatter",
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.MicroClimate, Models",
                  "a_interception": 0.0,
                  "b_interception": 1.0,
                  "c_interception": 0.0,
                  "d_interception": 0.0,
                  "SoilHeatFluxFraction": 0.4,
                  "MinimumHeightDiffForNewLayer": 0.0,
                  "NightInterceptionFraction": 0.5,
                  "ReferenceHeight": 2.0,
                  "Name": "MicroClimate",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.PMF.SimpleTree, Models",
                  "CanopyType": "wheat",
                  "LAI": 1.0,
                  "Height": 10000.0,
                  "LightProfile": null,
                  "RootDepth": 1000.0,
                  "NDemand": 0.05,
                  "NitrogenUptake": null,
                  "Name": "wheat",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.PMF.SimpleTree, Models",
                  "CanopyType": "barley",
                  "LAI": 1.0,
                  "Height": 10000.0,
                  "LightProfile": null,
                  "RootDepth": 1000.0,
                  "NDemand": 0.05,
                  "NitrogenUptake": null,
                  "Name": "barley",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.PMF.SimpleTree, Models",
                  "CanopyType": "oats",
                  "LAI": 1.0,
                  "Height": 10000.0,
                  "LightProfile": null,
                  "RootDepth": 1000.0,
                  "NDemand": 0.05,
                  "NitrogenUptake": null,
                  "Name": "oats",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": "Note: Soil water levels are identical under single or split populations.",
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Total Soil Water (mm)",
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "SoilWater",
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report1",
              "XFieldName": "Clock.Today",
              "YFieldName": "SWTotal",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field1",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report2",
              "XFieldName": "Clock.Today",
              "YFieldName": "SWTotal",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field2",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report3",
              "XFieldName": "Clock.Today",
              "YFieldName": "SWTotal",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field3",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": "Note: Soil nitrate levels are identical under single or split populations.",
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Total soil NO3 (kg/ha)",
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "SoilNO3",
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report1",
              "XFieldName": "Clock.Today",
              "YFieldName": "NO3Total",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field1",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report2",
              "XFieldName": "Clock.Today",
              "YFieldName": "NO3Total",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field2",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report3",
              "XFieldName": "Clock.Today",
              "YFieldName": "NO3Total",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field3",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": "Note: Soil ammonium levels are identical under single or split populations.",
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Total Soil NH4 (kg/ha)",
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "SoilNH4",
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report1",
              "XFieldName": "Clock.Today",
              "YFieldName": "NH4Total",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field1",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report2",
              "XFieldName": "Clock.Today",
              "YFieldName": "NH4Total",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field2",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report3",
              "XFieldName": "Clock.Today",
              "YFieldName": "NH4Total",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field3",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": "Note that potential EP is identical across single or split populations.  This shows that the calculations in the Microclimate model are effective in handling split populations also.",
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Total Potential Evapotranspiration (mm)",
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "PotentialEP",
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report1",
              "XFieldName": "Clock.Today",
              "YFieldName": "Wheat.PotentialEP",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field1",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report2",
              "XFieldName": "Clock.Today",
              "YFieldName": "TotalPEP",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field2",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report3",
              "XFieldName": "Clock.Today",
              "YFieldName": "TotalPEP",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field3",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": "Note that actual EP summed across single or split populations is identical for each simulation.",
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Total Actual Evapotranspiration (mm)",
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "ActualEP",
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -16777216,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report1",
              "XFieldName": "Clock.Today",
              "YFieldName": "Wheat.EP",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field1",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report2",
              "XFieldName": "Clock.Today",
              "YFieldName": "TotalEP",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field2",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -11094807,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Report3",
              "XFieldName": "Clock.Today",
              "YFieldName": "TotalEP",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Field3",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Simulation, Models",
      "IsRunning": false,
      "Descriptors": null,
      "Name": "Intercrop test",
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "\r\nThis test compares the water demands and uptakes from two instances of Slurp, running in the same field (an intercrop). Both slurp instances are configured identically and so the water demands and uptakes for each are also identical.",
          "Name": "Memo",
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Clock, Models",
          "Start": "1900-01-01T00:00:00",
          "End": "1904-12-31T00:00:00",
          "Name": "Clock",
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Summary, Models",
          "Verbosity": 100,
          "Name": "SummaryFile",
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Climate.Weather, Models",
          "ConstantsFile": null,
          "FileName": "%root%\\Examples\\WeatherFiles\\Dalby.met",
          "ExcelWorkSheetName": null,
          "Name": "Weather",
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
          "Name": "Soil Arbitrator",
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Zone, Models",
          "Area": 1.0,
          "Slope": 0.0,
          "AspectAngle": 0.0,
          "Altitude": 50.0,
          "Name": "Field",
          "Children": [
            {
              "$type": "Models.Report, Models",
              "VariableNames": [
                "[Clock].Today",
                "[Slurp1].Root.Depth",
                "[Slurp2].Root.Depth",
                "[Slurp1].Leaf.LAI",
                "[Slurp2].Leaf.LAI",
                "[Slurp1].Root.WaterUptake",
                "[Slurp2].Root.WaterUptake",
                "[Slurp1].Leaf.WaterDemand",
                "[Slurp2].Leaf.WaterDemand",
                "[ExtraVariables].Script.AccumEO",
                "[ExtraVariables].Script.AccumEP",
                "[ExtraVariables].Script.AccumES",
                "[ExtraVariables].Script.AccumDrainage",
                "[ExtraVariables].Script.AccumRunoff",
                "[ExtraVariables].Script.AccumRainfall",
                "[ExtraVariables].Script.AccumIrrigation",
                "[ExtraVariables].Script.AccumOutflowLat",
                "[ExtraVariables].Script.SoilWaterDeficit"
              ],
              "EventNames": [
                "[Clock].EndOfDay"
              ],
              "GroupByVariableName": null,
              "Name": "Intercrop",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "ResourceName": "Fertiliser",
              "Name": "Fertiliser",
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "\nusing System.Linq;\nusing System;\nusing Models.Core;\nusing Models.PMF;\nusing APSIM.Shared.Utilities;\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] Clock Clock;\n\n        [Description(\"Cultivar\")]\n        public string CultivarName { get; set; }\n        [Description(\"Initial Root Depth\")]\n        public double InitialRootDepth { get; set; }\n        [Description(\"Sowing Date\")]\n        public DateTime SowingDate { get; set; }\n\n               \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (Clock.Today.Date == SowingDate)\n            {\n                foreach (Plant slurp in this.FindAllInScope<Plant>().OfType<IModel>().ToList())\n                    slurp.Sow(cultivar: CultivarName, population: 1, depth: InitialRootDepth, rowSpacing: 150);\n            }\n        }\n    }\n}\n                \n",
              "Parameters": [
                {
                  "Key": "CultivarName",
                  "Value": "StaticCrop"
                },
                {
                  "Key": "InitialRootDepth",
                  "Value": "600"
                },
                {
                  "Key": "SowingDate",
                  "Value": "1900-10-01"
                }
              ],
              "Name": "Slurp2Sow",
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Soils.Soil, Models",
              "RecordNumber": 0,
              "ASCOrder": "Vertosol",
              "ASCSubOrder": "Black",
              "SoilType": "Clay",
              "LocalName": null,
              "Site": "Norwin",
              "NearestTown": "Norwin",
              "Region": "Darling Downs and Granite Belt",
              "State": "Queensland",
              "Country": "Australia",
              "NaturalVegetation": "Qld. Bluegrass, possible Qld. Blue gum",
              "ApsoilNumber": "900",
              "Latitude": -27.581836,
              "Longitude": 151.320206,
              "LocationAccuracy": " +/- 20m",
              "YearOfSampling": null,
              "DataSource": "CSIRO Sustainable Ecosystems, Toowoomba; Characteriesd as part of the GRDC funded project\"Doing it better, doing it smarter, managing soil water in Australian agriculture' 2011",
              "Comments": "OC, CLL for all crops estimated-based on Bongeen Mywybilla Soil No1",
              "Name": "Soil",
              "Children": [
                {
                  "$type": "Models.Soils.Physical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "ParticleSizeClay": null,
                  "ParticleSizeSand": null,
                  "ParticleSizeSilt": null,
                  "Rocks": null,
                  "Texture": null,
                  "BD": [
                    1.01056473311131,
                    1.07145631083388,
                    1.09393858528057,
                    1.15861335018721,
                    1.17301160318016,
                    1.16287303586874,
                    1.18749547755906
                  ],
                  "AirDry": [
                    0.130250054518252,
                    0.198689390775399,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "LL15": [
                    0.260500109036505,
                    0.248361738469248,
                    0.28,
                    0.28,
                    0.28,
                    0.28,
                    0.28
                  ],
                  "DUL": [
                    0.52100021807301,
                    0.496723476938497,
                    0.488437607673005,
                    0.480296969355493,
                    0.471583596524955,
                    0.457070570557793,
                    0.452331759845006
                  ],
                  "SAT": [
                    0.588654817693846,
                    0.565676863836273,
                    0.557192986686577,
                    0.532787415023694,
                    0.527354112007486,
                    0.531179986464627,
                    0.521888499034317
                  ],
                  "KS": [
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0,
                    20.0
                  ],
                  "BDMetadata": null,
                  "AirDryMetadata": null,
                  "LL15Metadata": null,
                  "DULMetadata": null,
                  "SATMetadata": null,
                  "KSMetadata": null,
                  "RocksMetadata": null,
                  "TextureMetadata": null,
                  "ParticleSizeSandMetadata": null,
                  "ParticleSizeSiltMetadata": null,
                  "ParticleSizeClayMetadata": null,
                  "Name": "Physical",
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "WheatSoil",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "BarleySoil",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "Slurp1Soil",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilCrop, Models",
                      "LL": [
                        0.261,
                        0.248,
                        0.28,
                        0.306,
                        0.36,
                        0.392,
                        0.446
                      ],
                      "KL": [
                        0.02,
                        0.02,
                        0.02,
                        0.01,
                        0.01,
                        0.01,
                        0.01
                      ],
                      "XF": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0
                      ],
                      "LLMetadata": null,
                      "KLMetadata": null,
                      "XFMetadata": null,
                      "Name": "Slurp2Soil",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.WaterModel.WaterBalance, Models",
                  "SummerDate": "1-Nov",
                  "SummerU": 5.0,
                  "SummerCona": 5.0,
                  "WinterDate": "1-Apr",
                  "WinterU": 5.0,
                  "WinterCona": 5.0,
                  "DiffusConst": 40.0,
                  "DiffusSlope": 16.0,
                  "Salb": 0.12,
                  "CN2Bare": 73.0,
                  "CNRed": 20.0,
                  "CNCov": 0.8,
                  "DischargeWidth": "NaN",
                  "CatchmentArea": "NaN",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "SWCON": [
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3,
                    0.3
                  ],
                  "KLAT": null,
                  "ResourceName": "WaterBalance",
                  "Name": "SoilWater",
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.SoilNitrogen, Models",
                  "fom_types": [
                    "default",
                    "manure",
                    "mucuna",
                    "lablab",
                    "shemp",
                    "stable"
                  ],
                  "fract_carb": [
                    0.2,
                    0.3,
                    0.54,
                    0.57,
                    0.45,
                    0.0
                  ],
                  "fract_cell": [
                    0.7,
                    0.3,
                    0.37,
                    0.37,
                    0.47,
                    0.1
                  ],
                  "fract_lign": [
                    0.1,
                    0.4,
                    0.09,
                    0.06,
                    0.08,
                    0.9
                  ],
                  "NPartitionApproach": 0,
                  "Name": "SoilNitrogen",
                  "Children": [
                    {
                      "$type": "Models.Soils.SoilNitrogenNO3, Models",
                      "Name": "NO3",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenNH4, Models",
                      "Name": "NH4",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.SoilNitrogenUrea, Models",
                      "Name": "Urea",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Organic, Models",
                  "FOMCNRatio": 40.0,
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "Carbon": [
                    1.2,
                    0.96,
                    0.6,
                    0.3,
                    0.18,
                    0.12,
                    0.12
                  ],
                  "SoilCNRatio": [
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0,
                    12.0
                  ],
                  "FBiom": [
                    0.04,
                    0.02,
                    0.02,
                    0.02,
                    0.01,
                    0.01,
                    0.01
                  ],
                  "FInert": [
                    0.4,
                    0.6,
                    0.8,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "FOM": [
                    347.1290323127564,
                    270.3443621919937,
                    163.97214434990104,
                    99.45413288704063,
                    60.32198083112468,
                    36.58713082867487,
                    22.1912165985086
                  ],
                  "CarbonMetadata": null,
                  "FOMMetadata": null,
                  "Name": "Organic",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Chemical, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "NO3N": [
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0,
                    1.0
                  ],
                  "NH4N": [
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.1
                  ],
                  "PH": [
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0,
                    8.0
                  ],
                  "CL": null,
                  "EC": null,
                  "ESP": null,
                  "LabileP": null,
                  "UnavailableP": null,
                  "ECMetadata": null,
                  "CLMetadata": null,
                  "ESPMetadata": null,
                  "PHMetadata": null,
                  "Name": "Chemical",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.InitialWater, Models",
                  "PercentMethod": 1,
                  "FractionFull": 1.0,
                  "DepthWetSoil": "NaN",
                  "RelativeTo": null,
                  "Name": "InitialWater",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Sample, Models",
                  "Thickness": [
                    150.0,
                    150.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0,
                    300.0
                  ],
                  "NO3": null,
                  "NH4": null,
                  "LabileP": null,
                  "UnavailableP": null,
                  "SW": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "OC": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "EC": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "CL": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "ESP": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "PH": [
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN",
                    "NaN"
                  ],
                  "SWUnits": 0,
                  "OCUnits": 0,
                  "PHUnits": 0,
                  "Name": "InitialN",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.CERESSoilTemperature, Models",
                  "Name": "Temperature",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Surface.SurfaceOrganicMatter, Models",
              "InitialResidueName": "wheat_stubble",
              "InitialResidueType": "wheat",
              "InitialResidueMass": 500.0,
              "InitialStandingFraction": 0.0,
              "InitialCPR": 0.0,
              "InitialCNR": 100.0,
              "ResourceName": "SurfaceOrganicMatter",
              "Name": "SurfaceOrganicMatter",
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.MicroClimate, Models",
              "a_interception": 0.0,
              "b_interception": 1.0,
              "c_interception": 0.0,
              "d_interception": 0.0,
              "SoilHeatFluxFraction": 0.4,
              "MinimumHeightDiffForNewLayer": 0.0,
              "NightInterceptionFraction": 0.5,
              "ReferenceHeight": 2.0,
              "Name": "MicroClimate",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "ResourceName": "Slurp",
              "Name": "Slurp1",
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.PMF.Plant, Models",
              "ResourceName": "Slurp",
              "Name": "Slurp2",
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Manager, Models",
              "Code": "using Newtonsoft.Json;\nusing Models.PMF.Organs;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System;\nusing Models.Core;\nusing System.Collections.Generic;\nusing System.Text;\nusing Models.Soils;\nusing Models.PMF;\nusing Models;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Climate;\n\nnamespace Models\n{\n    [Serializable] \n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Weather Met;\n        [Link] private Fertiliser Fert;\n        [Link] private Irrigation Irrig;\n        [Link] private Plant Slurp;\n        [Link] private Zone zone;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private SoilNitrogen SoilNitrogen;\n        [Link] private Soils.Soil Soil;\n        [Link] private Models.Surface.SurfaceOrganicMatter SOM;\n        [Link(Type = LinkType.Path, Path = \"[Slurp1].Root\")]\n        private Root root;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n                    \n        [JsonIgnore] public bool InitialDay { get; set; }\n        \n        [JsonIgnore] public double AccumPlantN { get; set; }\n        [JsonIgnore] public double AccumMineralisation { get; set; }\n        [JsonIgnore] public double AccumDenit { get; set; }\n        [JsonIgnore] public double AccumFert { get; set; }\n        [JsonIgnore] public double AccumLeach { get; set; }\n        [JsonIgnore] public double AccumDetach { get; set; }\n        [JsonIgnore] public double DeltaSoilOMN { get; set; }\n        [JsonIgnore] public double DeltaSurfaceOMN { get; set; }\n        [JsonIgnore] public double DeltaSoilMineralN { get; set; }\n        [JsonIgnore] public double SoilNitrogenContent { get; set; }\n        \n        [JsonIgnore] public double AccumEO { get; set; }\n        [JsonIgnore] public double AccumEP { get; set; }\n        [JsonIgnore] public double AccumES { get; set; }\n        [JsonIgnore] public double AccumDrainage { get; set; }\n        [JsonIgnore] public double AccumRunoff { get; set; }\n        [JsonIgnore] public double AccumOutflowLat { get; set; }\n        [JsonIgnore] public double AccumIrrigation { get; set; }\n        [JsonIgnore] public double AccumRainfall { get; set; }\n        [JsonIgnore] public double SoilWaterDeficit { get; set; }\n    \n        [JsonIgnore] public double  InitialSoilOMN { get; set; }\n        [JsonIgnore] public double  InitialSurfaceOMN { get; set; }\n        [JsonIgnore] public double  InitialMineralN { get; set; }\n        \n        [JsonIgnore] public double SWC { get; set; }\n        [JsonIgnore] public double DUL { get; set; }\n        [JsonIgnore] public double OutFlowLat { get; set; }\n\n        [JsonIgnore] public double FomN { get; set; }\n        [JsonIgnore] public double BiomN { get; set; }\n        [JsonIgnore] public double HumN { get; set; }\n        [JsonIgnore] public double OrganicN { get; set; }\n        [JsonIgnore] public double NO3N { get; set; }\n        [JsonIgnore] public double NH4N { get; set; }\n        [JsonIgnore] public double UreaN { get; set; }\n        [JsonIgnore] public double MineralN { get; set; }\n        [JsonIgnore] public double DltNMinRes { get; set; }\n        [JsonIgnore] public double DltNMinTot { get; set; }\n        \n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            InitialDay = true;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            //!!!!!! Nitrogen balance components !!!!!!\n            //!!!!!!^^^^^^^^^^^^^^^^^^^^^^^^^^^^^!!!!!!\n            FomN = MathUtilities.Sum(SoilNitrogen.FOMN);\n            HumN = MathUtilities.Sum(SoilNitrogen.HumicN);\n            BiomN = MathUtilities.Sum(SoilNitrogen.MicrobialN);\n            OrganicN = FomN + HumN + BiomN;\n            NO3N = MathUtilities.Sum(NO3.kgha);\n            NH4N = MathUtilities.Sum(NH4.kgha);\n            UreaN = MathUtilities.Sum(Urea.kgha);\n            MineralN = NO3N + NH4N + UreaN; \n            DltNMinRes = MathUtilities.Sum(SoilNitrogen.dlt_n_min_res);\n            DltNMinTot = MathUtilities.Sum(SoilNitrogen.MineralisedN);\n            int layers = soilPhysical.Thickness.Length;\n            if (InitialDay == true)\n            {\n                InitialSurfaceOMN = SOM.N;\n                InitialSoilOMN = OrganicN;\n                InitialMineralN = MineralN;\n                InitialDay = false;\n            }\n            AccumFert += Fert.NitrogenApplied;\n            DeltaSurfaceOMN = SOM.N - InitialSurfaceOMN;\n            AccumLeach = AccumLeach - waterBalance.LeachNH4 - waterBalance.LeachNO3 - waterBalance.LeachUrea; //Fails\n            AccumMineralisation += MathUtilities.Sum(SoilNitrogen.MineralisedN);\n            AccumDenit -= MathUtilities.Sum(SoilNitrogen.Denitrification);\n            AccumPlantN -= (double)zone.Get(\"Slurp1.Root.NUptake\");\n            DeltaSoilOMN = OrganicN - InitialSoilOMN;\n            DeltaSoilMineralN = MineralN - InitialMineralN;\n            SoilNitrogenContent = MineralN;\n            \n            //!!!!!! Water balance components !!!!!!\n            //!!!!!!^^^^^^^^^^^^^^^^^^^^^^^^^^!!!!!!\n\n            AccumIrrigation += Irrig.IrrigationApplied;\n            AccumRainfall += Met.Rain;\n            //AccumEP -= (double)zone.Get(\"[Slurp].Leaf.Transpiration\");\n            AccumEP -= (double)zone.Get(\"Slurp1.Root.WaterUptake\");\n            SoilWaterDeficit = (SWC - DUL);\n            double OutFlowLat = MathUtilities.Sum(waterBalance.LateralOutflow);\n            AccumOutflowLat -= OutFlowLat;\n        }\n        \n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            FomN = MathUtilities.Sum(SoilNitrogen.FOMN);\n            HumN = MathUtilities.Sum(SoilNitrogen.HumicN);\n            BiomN = MathUtilities.Sum(SoilNitrogen.MicrobialN);\n            \n            \n            AccumEO -= waterBalance.Eo;\n            AccumES -= waterBalance.Es; \n            AccumDrainage -= waterBalance.Drainage;\n            AccumRunoff -= waterBalance.Runoff;\n            SWC = MathUtilities.Sum(waterBalance.SWmm);\n            DUL = MathUtilities.Sum(soilPhysical.DULmm);\n        }\n    }\n}\n       \n",
              "Parameters": null,
              "Name": "ExtraVariables",
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Irrigation, Models",
              "Name": "Irrigation",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Fertiliser, Models",
              "ResourceName": "Fertiliser",
              "Name": "Fertiliser1",
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Graph, Models",
          "Caption": null,
          "Axis": [
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Water Demand and Uptake (mm)",
              "Position": 0,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            },
            {
              "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
              "Title": "Date",
              "Position": 3,
              "Inverted": false,
              "CrossesAtZero": false,
              "Minimum": null,
              "Maximum": null,
              "Interval": null
            }
          ],
          "LegendPosition": 0,
          "LegendOrientation": 0,
          "AnnotationLocation": 0,
          "DisabledSeries": [],
          "LegendOutsideGraph": false,
          "Name": "Water Demand and Uptakes",
          "Children": [
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Intercrop",
              "XFieldName": "Clock.Today",
              "YFieldName": "Slurp1.Leaf.WaterDemand",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Slurp1Demand",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -3376729,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Intercrop",
              "XFieldName": "Clock.Today",
              "YFieldName": "Slurp2.Leaf.WaterDemand",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Slurp2Demand",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -1663232,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Intercrop",
              "XFieldName": "Clock.Today",
              "YFieldName": "Slurp1.Root.WaterUptake",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Slurp1Uptake",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Series, Models",
              "Type": 1,
              "XAxis": 3,
              "YAxis": 0,
              "ColourArgb": -990142,
              "FactorToVaryColours": null,
              "FactorToVaryMarkers": null,
              "FactorToVaryLines": null,
              "Marker": 11,
              "MarkerSize": 0,
              "Line": 0,
              "LineThickness": 0,
              "TableName": "Intercrop",
              "XFieldName": "Clock.Today",
              "YFieldName": "Slurp2.Root.WaterUptake",
              "X2FieldName": "",
              "Y2FieldName": "",
              "ShowInLegend": true,
              "IncludeSeriesNameInLegend": false,
              "Cumulative": false,
              "CumulativeX": false,
              "Filter": null,
              "Name": "Slurp2Uptake",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": true,
      "GraphsPerPage": 6,
      "Name": "Conceptual Tests of Multiple Crops in a Single Zone",
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "The series of test and simulations in this section test the performance of SoilArbitrator when there are multiple plants competing for resources in a single zone.  These tests take place with either a deep or a shallow soil and in the Lincoln (NZ) environment.  The plants vary between one or more Slurps, one or more ryegrasses and then finally a ryegrass – white clover sward.\r\n\r\nThe first test compares simulations with one Slurp against equivalent simulations with two Slurps (each with half the leaf area etc. as the single Slurp).  The point is to demonstrate that the SoilArbitrator can effectively aggregate the multiple Slurps to match the single.\r\n\r\n“AgPasture Deep Soil Test” simulations have either two deep-rooted ryegrasses or one deep and one shallow rooted.  The simulated plant growth and sward composition are compared when under conditions with and without irrigation and fertiliser.  The exercise is repeated in “AgPasture Shallow Soil Test” but using a soil with substantially reduced soil water storage.\r\n\r\n“AgPasture Test Root Depth Differential” repeats “AgPasture Deep Soil Test” but only under conditions of no irrigation or fertiliser but with a range of rooting depths of the second ryegrass.\r\n\r\n The final test “A Ryegrass and White Clover Example” is more realistic in that it contains a white clover competing with a ryegrass and examines the changing sward composition as water and/or fertiliser are added to the simulation.\r\n",
          "Name": "Overview",
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "01 Basic Conceptual Test",
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This 'experiment' does a basic test of the SoilArbitrator comparing a single Slurp to two equal Slurps, both with and without irrigation and fertiliser.  Slurp is a static plant model in which LAI, water and nitrogen demand are user-set constants but in which the uptake of water and N are determined by availability and competition.  \r\n\r\nSuccess in this test is that there should be minimal differences in leaf weight, soil water and soil nitrogen uptake when comparing one Slurp (OneSlurp) to two equal Slurps (TwoSlurp).  The simulations are done under conditions of unlimited irrigation and fertiliser (Plus) and with no irrigation or fertiliser (Minus).  In the graphs below, the relevant outputs from the individual Slurps in TwoSlurp are added together in the Output component.\r\n\r\nOneSlurp models are set up with photosynthesis at 6.0 g C /m2, LAI at 3.5 and N uptake at 2.5 kg N /ha /day.  TwoSlurp simulations are set up with two equal Slurps using values of 3.0 g C /m2, LAI at 1.75 and N uptake at 1.25 kg N /ha /day.  All simulations are run using the Lincoln weather data.\r\n\r\nThe first four graphs below show soil water storage, soil nitrate N storage, cumulative water uptake and cumulative N uptake for the four contrasting simulations.  As expected, there are minimal differences caused by the number of Slurp models in the simulation but there are substantial differences caused by the presence or absence of irrigation and fertiliser.  \r\n\r\nThere are small differences in the soil water storage for the water-limited simulations (first graph, SoilWater) under conditions of severe water shortage.  These are likely to be due to the approximations in the Runge-Kutta method.  While it might be improved with a higher-order solution, the third plot (WaterUptake) shows that there are no persistent differences in water uptake and that the Runge-Kutta solution is likely to be sufficient for the types of simulation for which APSIM is used.\r\n\r\nThe second and fourth graphs minimal differences in N storage and N uptake.\r\n\r\nThe final two plots show the water and N uptake from the TwoSlurp simulations only giving the uptake from the individual crops.  As expected, there are no discernible differences between the crops.\r\n\r\nThe simulations in this section are very simple conceptual tests using the static Slurp model.  They show that the Runge-Kutta method in SoilArbitrator is behaving sensibly in the presence of two equal crops when they are compared to a single equivalent crop.  These were intentionally simple tests.  Slurp is a static model and will not reduce its water or N demand in response to stress (i.e. no feedback to crop performance).  The next series of tests will use a dynamic model that will include that feedback.",
              "Name": "Memo BasicConceptualTest",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWater",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "sum(LismoreSoil.SoilWater.SWmm)",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Series",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNO3",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "sum(LismoreSoil.SoilNitrogen.NO3.kgha)",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Series",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterUptake",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "WaterTakenUp",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Series",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NUptake",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "NTakenUp",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Series",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Individual_Water_Uptake",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "Slurp1.Root.WaterUptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "NumSlurps = 2",
                  "Name": "Slurp1",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 9,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "Slurp2.Root.WaterUptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "NumSlurps = 2",
                  "Name": "Slurp2",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Individual_N_Uptake",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "Slurp1.Root.NTakenUp",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "NumSlurps = 2",
                  "Name": "Slurp1",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 9,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "BasicConceptualTest",
                  "XFieldName": "Date",
                  "YFieldName": "Slurp2.Root.NTakenUp",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "NumSlurps = 2",
                  "Name": "Slurp2",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment01",
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": "",
                      "Name": "Factor",
                      "Children": [
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[SlurpSowMulitple].Script.NumSlurps = 1",
                            "[SetProduction].Script.OverRidePhoto = 6.0",
                            "[SetProduction].Script.OverRideLAI = 3.5",
                            "[SetProduction].Script.OverRideNUp = 2.5",
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "OneSlurp_Plus",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[SlurpSowMulitple].Script.NumSlurps = 2",
                            "[SetProduction].Script.OverRidePhoto = 3.0",
                            "[SetProduction].Script.OverRideLAI = 1.75",
                            "[SetProduction].Script.OverRideNUp = 1.25",
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "TwoSlurp_Plus",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[SlurpSowMulitple].Script.NumSlurps = 1",
                            "[SetProduction].Script.OverRidePhoto = 6.0",
                            "[SetProduction].Script.OverRideLAI = 3.5",
                            "[SetProduction].Script.OverRideNUp = 2.5",
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "OneSlurp_Minus",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[SlurpSowMulitple].Script.NumSlurps = 2",
                            "[SetProduction].Script.OverRidePhoto = 3.0",
                            "[SetProduction].Script.OverRideLAI = 1.75",
                            "[SetProduction].Script.OverRideNUp = 1.25",
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "TwoSlurp_Minus",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "IsRunning": false,
                  "Descriptors": null,
                  "Name": "BasicConceptualTest",
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "1980-07-01T00:00:00",
                      "End": "1981-06-30T00:00:00",
                      "Name": "Clock",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.Weather, Models",
                      "ConstantsFile": null,
                      "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
                      "ExcelWorkSheetName": null,
                      "Name": "Weather",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Field",
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn fertiliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int FertOn { get; set; }\n\n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount * FertOn, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "FertOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "500"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "200"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "OnOffFertiliser",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")]\n        public answerType allowIrrigation { get; set; }\n        \n        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int IrrigOn { get; set; }\n\n\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply * IrrigOn);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "IrrigOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "15-Aug"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "30-May"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "75"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "30"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "300"
                                }
                              ],
                              "Name": "OnOffIrrigation",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link(ByName = true)] Plant Slurp1;\n        [Link(ByName = true)] Plant Slurp2;\n        [Link] Clock Clock;\n\n        [Description(\"How many Slurps should be sown?\")] public int NumSlurps { get; set; }\n        [Description(\"Cultivar\")] public string CultivarName { get; set; }\n        [Description(\"Initial Root Depth\")] public double InitialRootDepth { get; set; }\n        [Description(\"Sowing Date\")] public DateTime SowingDate { get; set; }\n\n               \n        [EventSubscribe(\"DoManagement\")] private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (Clock.Today.Date == SowingDate)\n            {\n                Slurp1.Sow(cultivar: CultivarName, population: 1, depth: InitialRootDepth, rowSpacing: 150);\n                if (NumSlurps > 1)\n                    Slurp2.Sow(cultivar: CultivarName, population: 1, depth: InitialRootDepth, rowSpacing: 150);                \n            }\n        }\n    }\n}\n                \n",
                              "Parameters": [
                                {
                                  "Key": "NumSlurps",
                                  "Value": "1"
                                },
                                {
                                  "Key": "CultivarName",
                                  "Value": "StaticCrop"
                                },
                                {
                                  "Key": "InitialRootDepth",
                                  "Value": "600"
                                },
                                {
                                  "Key": "SowingDate",
                                  "Value": "1980-07-01"
                                }
                              ],
                              "Name": "SlurpSowMulitple",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models;\nusing Models.PMF;\nusing System.Text;\nusing System.Collections.Generic;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable] \n    public class Script : Model\n    {\n        [Link] Plant Plant;\n        [Link(ByName = true)] Plant Slurp1;\n        [Link(ByName = true)] Plant Slurp2;\n        [Link] Clock Clock;\n        [Link] Zone zone;\n        \n        public int myNumSlurps { get; set; }\n        public string OverRidePath { get; set; }\n        \n        [Description(\"Change Date\")] public DateTime ChangeDate { get; set; }\n        [Description(\"Value for Leaf.Photosynthesis.FixedValue\")] public double OverRidePhoto { get; set; }\n        [Description(\"Value for Leaf.Area.FixedValue\")] public double OverRideLAI { get; set; }\n        [Description(\"Value for Root.MaxDailyNUptake.FixedValue\")] public double OverRideNUp { get; set; }\n        //[Description(\"Value for new coefficient Integer\")] public int OverRideInteger { get; set; }\n\n\n\n\n        [EventSubscribe(\"StartOfSimulation\")] private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            myNumSlurps = (int)zone.Get(\"[SlurpSowMulitple].Script.NumSlurps\");\n            OverRidePath = \"Leaf.Photosynthesis.FixedValue\";\n        }\n        \n        [EventSubscribe(\"DoManagement\")] private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (Clock.Today.Date == ChangeDate)\n            {\n                object ResetValue = OverRidePhoto;\n                OverRidePath = \"Leaf.Photosynthesis.FixedValue\";\n                zone.Set(\"Slurp1.\" + OverRidePath, ResetValue);\n                if (myNumSlurps > 1)\n                    zone.Set(\"Slurp2.\" + OverRidePath, ResetValue);\n\n                ResetValue = OverRideLAI;\n                OverRidePath = \"Leaf.Area.FixedValue\";\n                zone.Set(\"Slurp1.\" + OverRidePath, ResetValue);\n                if (myNumSlurps > 1)\n                    zone.Set(\"Slurp2.\" + OverRidePath, ResetValue);\n\n                ResetValue = OverRidePhoto;\n                OverRidePath = \"Root.MaxDailyNUptake.FixedValue\";\n                zone.Set(\"Slurp1.\" + OverRidePath, ResetValue);\n                if (myNumSlurps > 1)\n                    zone.Set(\"Slurp2.\" + OverRidePath, ResetValue);\n            }\n        }\n    }\n}\n       \n",
                              "Parameters": [
                                {
                                  "Key": "OverRidePhoto",
                                  "Value": "6"
                                },
                                {
                                  "Key": "OverRideLAI",
                                  "Value": "3.5"
                                },
                                {
                                  "Key": "OverRideNUp",
                                  "Value": "4"
                                },
                                {
                                  "Key": "myNumSlurps",
                                  "Value": "0"
                                },
                                {
                                  "Key": "OverRidePath",
                                  "Value": "Leaf.Photosynthesis.FixedValue"
                                },
                                {
                                  "Key": "ChangeDate",
                                  "Value": "1980-07-01"
                                }
                              ],
                              "Name": "SetProduction",
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 0.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "ResourceName": "Fertiliser",
                          "Name": "Fertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 1000.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "ResourceName": "SurfaceOrganicMatter",
                          "Name": "SurfaceOrganicMatter",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.PMF.Plant, Models",
                          "ResourceName": "Slurp",
                          "Name": "Slurp1",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.PMF.Plant, Models",
                          "ResourceName": "Slurp",
                          "Name": "Slurp2",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": "NZ_Sedimentary",
                          "LocalName": "Lismore",
                          "Site": "Winchmore",
                          "NearestTown": "Ashburton",
                          "Region": "Canterbury",
                          "State": null,
                          "Country": "New Zealand",
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": -48.48,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "LismoreSoil",
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "NO3N": [
                                50.0,
                                50.0,
                                50.0,
                                50.0,
                                50.0,
                                50.0,
                                50.0
                              ],
                              "NH4N": [
                                0.1,
                                0.1,
                                0.1,
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "CL": null,
                              "EC": null,
                              "ESP": null,
                              "LabileP": null,
                              "UnavailableP": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "ParticleSizeClay": [
                                20.0,
                                15.0,
                                12.0,
                                8.0,
                                6.0,
                                5.0,
                                5.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.35,
                                1.0,
                                0.53,
                                0.31,
                                0.3,
                                0.3
                              ],
                              "AirDry": [
                                0.05,
                                0.12,
                                0.055,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "LL15": [
                                0.15,
                                0.14,
                                0.055,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "DUL": [
                                0.36,
                                0.34,
                                0.19,
                                0.065,
                                0.04,
                                0.03,
                                0.03
                              ],
                              "SAT": [
                                0.45,
                                0.43,
                                0.25,
                                0.15,
                                0.11,
                                0.11,
                                0.11
                              ],
                              "KS": [
                                5000.0,
                                2500.0,
                                3000.0,
                                10000.0,
                                17500.0,
                                20000.0,
                                20000.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Slurp1Soil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Slurp2Soil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 2.0,
                              "WinterCona": 2.0,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "SWCON": [
                                0.5,
                                0.52,
                                0.55,
                                0.6,
                                0.65,
                                0.65,
                                0.65
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "ResourceName": "WaterBalance",
                              "Name": "SoilWater",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogen, Models",
                              "fom_types": [
                                "default",
                                "manure",
                                "mucuna",
                                "lablab",
                                "shemp",
                                "stable"
                              ],
                              "fract_carb": [
                                0.2,
                                0.3,
                                0.54,
                                0.57,
                                0.45,
                                0.0
                              ],
                              "fract_cell": [
                                0.7,
                                0.3,
                                0.37,
                                0.37,
                                0.47,
                                0.1
                              ],
                              "fract_lign": [
                                0.1,
                                0.4,
                                0.09,
                                0.06,
                                0.08,
                                0.9
                              ],
                              "NPartitionApproach": 0,
                              "Name": "SoilNitrogen",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilNitrogenNO3, Models",
                                  "Name": "NO3",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenNH4, Models",
                                  "Name": "NH4",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenUrea, Models",
                                  "Name": "Urea",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "Carbon": [
                                3.0,
                                1.0,
                                0.6,
                                0.4,
                                0.25,
                                0.15,
                                0.1
                              ],
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.04,
                                0.02,
                                0.02,
                                0.01,
                                0.01,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.5,
                                0.7,
                                0.83,
                                0.9,
                                0.95,
                                0.99,
                                0.99
                              ],
                              "FOM": [
                                331.337020409173,
                                245.4605019055056,
                                164.53709493722965,
                                121.89207790753734,
                                73.93128242700234,
                                40.57434806729268,
                                22.267674346259405
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.InitialWater, Models",
                              "PercentMethod": 1,
                              "FractionFull": 0.95,
                              "DepthWetSoil": "NaN",
                              "RelativeTo": null,
                              "Name": "Initial water",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "[SlurpSowMulitple].Script.NumSlurps as NumSlurps",
                            "[Slurp1].Leaf.Wt",
                            "[Slurp2].Leaf.Wt",
                            "[Slurp1].Root.NTakenUp",
                            "[Slurp2].Root.NTakenUp",
                            "[Slurp1].Root.WaterUptake",
                            "[Slurp2].Root.WaterUptake",
                            "([Slurp1].Leaf.Wt+[Slurp2].Leaf.Wt) as LeafWt",
                            "([Slurp1].Leaf.LAI+[Slurp2].Leaf.LAI) as LAI",
                            "([Slurp1].Root.WaterUptake+[Slurp2].Root.WaterUptake) as WaterTakenUp",
                            "([Slurp1].Root.NTakenUp+[Slurp2].Root.NTakenUp) as NTakenUp",
                            "sum([LismoreSoil].SoilNitrogen.NO3.kgha)",
                            "sum([LismoreSoil].SoilWater.SWmm)"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "BasicConceptualTest",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "02 AgPasture Deep Soil Test",
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This next series of tests uses a dynamic (full) crop model so that any discrepancies in water or N supply to the plant will produce feedbacks into demand and subsequent uptake.  In this series of tests each simulation contains two ryegrass models.  In the “Equal” simulations both ryegrasses have a rooting depth of 750 mm while in the “Unequal” simulations Rye1 has a 750 mm root depth but Rye2 has a 150 mm root depth.  In all other respects the crops are equal.  Simulations are run with unlimited irrigation and fertiliser (“IrrigFert”) and without either input supplied (“DryNofert”).  The simulations use a soil with 132 mm of PAW to 750 mm deep in the Lincoln environment. \r\n\r\nThe first two graphs show that there is no difference in standing herbage between the ryegrasses if they have the same rooting depth.  Graphs 3 and 4 show the significant advantage that the deeper-rooting Rye1 has over Rye2 in the Unequal simulations.  \r\n\r\nThe fifth graph “Yield” shows that there is a slight yield advantage, persistent despite inputs of irrigation or fertiliser, when the rooting depths are equal and deep.  This shows that the yield from the deeper-rooting Rye1 cannot completely compensate for the loss of yield from the shallow-rooting Rye2.  The sixth graph shows the proportion of the total yield originating from Rye1.  In the Equal simulations this sits, of course, at 0.5.  However, in the Unequal simulations the proportion of yield from Rye1 rises to 0.65 with earlier increases in this proportion when no irrigation or fertiliser is applied. \r\n",
              "Name": "Memo AgPastureDeepSoilTest",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "StandingHerbage EqualIrrigFert",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 8,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'EqualIrrigFert'",
                  "Name": "Rye1",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'EqualIrrigFert'",
                  "Name": "Rye2",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "StandingHerbage EqualDryNofert",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 8,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'EqualDryNofert'",
                  "Name": "Rye1",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'EqualDryNofert'",
                  "Name": "Rye2",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "StandingHerbage UnequalIrrigFert",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 8,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalIrrigFert'",
                  "Name": "Rye1",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalIrrigFert'",
                  "Name": "Rye2",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "StandingHerbage UnequalDryNofert",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 8,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalDryNofert'",
                  "Name": "Rye1",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalIrrigFert'",
                  "Name": "Rye2",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 2,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Yield",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 2,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Yield",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Yield",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.45,
                  "Maximum": 0.7,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PropRye1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": "Factor",
                  "FactorToVaryLines": "Factor",
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureDeepSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "PropYieldRye1",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "PropRye1",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment02",
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": null,
                      "Name": "Factor",
                      "Children": [
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "EqualIrrigFert",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "EqualDryNofert",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 150",
                            "[Rye2].InitialRootDepth = 150"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "UnequalIrrigFert",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 150",
                            "[Rye2].InitialRootDepth = 150"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "UnequalDryNofert",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "IsRunning": false,
                  "Descriptors": null,
                  "Name": "AgPastureDeepSoilTest",
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "1971-07-01T00:00:00",
                      "End": "1972-06-30T00:00:00",
                      "Name": "Clock",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.Weather, Models",
                      "ConstantsFile": null,
                      "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
                      "ExcelWorkSheetName": null,
                      "Name": "Weather",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Field",
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn fertiliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int FertOn { get; set; }\n\n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount * FertOn, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "FertOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "200"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "15"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "25"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "14"
                                }
                              ],
                              "Name": "OnOffFertiliser",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")]\n        public answerType allowIrrigation { get; set; }\n        \n        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int IrrigOn { get; set; }\n\n\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply * IrrigOn);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "IrrigOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "15-Aug"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "30-May"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "75"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "30"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "300"
                                }
                              ],
                              "Name": "OnOffIrrigation",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }\n        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }\n        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }\n        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }\n        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }\n        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }\n        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }\n        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }\n        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }\n        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }\n        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }\n        // Description: Pasture DM defoliated today\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }\n        // Description: Pasture N defoliate today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }\n        // Description: Pasture DM harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }\n        // Description: Pasture N harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }\n        // Description: Pasture DM removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }\n        // Description: Pasture N removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }\n        // Description: Residue DM returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }\n        // Description: Residue N returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }\n        // Description: Harvested N returned as dung (SurfaceOM)\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }\n        // Description: Harvested N returned as urine (urea)\n        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }\n        // Description: Number of days after last defoliation\n        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) before cut\n        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) after cut\n        \n        // - Internal variables\n        // fraction of harvested Dm to actually remove from field\n        private double fractionDM2Remove = 1.0;\n        // flag whether defoliation is allowed\n        //private bool rotationAllowed = true;\n        // number of days for each defoliation event\n        private int cuttingDuration = 0;\n        // counter for day within each defoliation\n        private int daysCutting = 0;\n        // type of interval (Fixed or target)\n        private string intervalType;\n        // total herbage to remove in g/m2 per day\n        private double herbageToRemove;\n        // type of DM amount (ResidualDM or DMToRemove)\n        private string amountType;\n        // auxiliary flag for defoliation\n        private bool aCutHasHappened = false;\n\n        // - Event to add residue or dung to surface OM\n        public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n\n            // reset variables\n            DaysAfterCut = 0;\n            resetVariables();\n            cuttingDuration = DurationOfCut;\n            \n            // get the type of amount given\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\n                amountType = \"SetResidueAmount\";\n            else\n                amountType = \"SetRemoveAmount\";\n\n            // get the type of amount given\n            if (IntervalType == rotationIntervalTypes.FixedInterval)\n                intervalType = \"Fixed\";\n            else\n                intervalType = \"Target\";\n\n            // make sure that rotation starts when startDate < simulationStartDay\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\n                CutRotationStartDate = Clock.Today;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (rotationAllowed)\n            {\n                if (Clock.Today == CutRotationStartDate)\n                    DaysAfterCut = CutInterval;\n\n                bool SwardIsAlive = false;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                {\n                    if (species.IsAlive)\n                        SwardIsAlive = true;\n                }\n                \n                // Check whether we can defoliate\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))\n                {\n                    // Check whether we should start a defoliation\n                    if (DaysAfterCut >= (CutInterval - 1))\n                    {\n                        Graze(AmountGiven, amountType, DurationOfCut);\n                    }\n                }\n            }\n\n            // Check whether we need to continue cutting\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\n            {\n                // reset outputs\n                resetVariables();\n\n                removeDM(herbageToRemove);\n                returnExcreta();\n                daysCutting += 1;\n                if (daysCutting == cuttingDuration)\n                {\n                    PostHarvestDM = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        PostHarvestDM += species.Standing.Wt;\n                }\n            }\n\n            // reset outputs\n            if (daysCutting < 0)\n            {\n                resetVariables();\n                daysCutting = 0;\n            }\n        }\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            // Check whether a cutting has finished\n            if (daysCutting == cuttingDuration)\n            {\n                aCutHasHappened = true;\n                daysCutting = -1;\n            }\n\n            // Increase the counter for days after cutting\n            if (aCutHasHappened && (daysCutting == 0))\n                DaysAfterCut += 1;\n        }\n\n        public enum removeAmountTypes\n        {\n            /// <summary>Setting DM amount to remove</summary>\n            DMToRemove,\n            /// <summary>Setting residual DM amount</summary>\n            ResidualDM\n        }\n\n        public enum rotationIntervalTypes\n        {\n            /// <summary>Setting a fixed interval</summary>\n            FixedInterval,\n            /// <summary>Setting a target (minimum) inteval</summary>\n            TargetInterval\n        }\n\n        public enum removeDMTypes\n        {\n            /// <summary>Remove all DM</summary>\n            RemoveAll,\n            /// <summary>Remove no DM</summary>\n            RemoveNone,\n            /// <summary>Remove a fraction based on digestibility</summary>\n            BasedOnDigestibility\n        }\n\n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n        \n                \n        // Resets the values of all outputs\n        private void resetVariables()\n        {\n            DefoliatedWt = 0.0;\n            DefoliatedN = 0.0;\n            HarvestedWt = 0.0;\n            HarvestedN = 0.0;\n            RemovedWt = 0.0;\n            RemovedN = 0.0;\n            ReturnedWt = 0.0;\n            ReturnedN = 0.0;\n            NReturnedInDung = 0.0;\n            NReturnedInUrine = 0.0;\n        }\n\n        // Description: Perform the basic calculations for defoliation\n        public void Graze(double amountDM, string amountType, int duration)\n        {\n            // Get the existing plant amount\n            PreHarvestDM = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                PreHarvestDM += species.Standing.Wt;\n            \n            // Check the amount to remove and print some info\n            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))\n            {\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = amountDM / duration;\n            }\n            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))\n            {\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\n            }\n            else\n            {\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);\n                if (intervalType == \"Fixed\")\n                    DaysAfterCut = -duration;\n                return;\n            }\n\n            cuttingDuration = duration;\n            // Preform first defoliation\n            removeDM(herbageToRemove);\n            returnExcreta();\n            daysCutting = 1;\n            DaysAfterCut = 0;\n            if (daysCutting == cuttingDuration)\n            {\n                PostHarvestDM = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    PostHarvestDM += species.Standing.Wt;\n            }\n        }\n\n        // Do the DM removal\n        private void removeDM(double removeAmount)\n        {\n            double existingWt = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                existingWt += species.Harvestable.Wt;\n\n\n            // Check whether we harvest anything\n            if (existingWt >= removeAmount)\n            {\n                foreach (AgPasture.PastureSpecies species in Pasture)\n                {\n                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;\n                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\n                }\n                \n                // get total harvested\n                DefoliatedWt = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedWt += species.HarvestedWt;\n                DefoliatedN = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedN += species.HarvestedN;\n                HarvestedWt = DefoliatedWt;\n                HarvestedN = DefoliatedN;\n\n                // get amounts actually removed from field and that to be returned (dung/urine)\n                if (DMRemoveType == removeDMTypes.RemoveAll)\n                    fractionDM2Remove = 1.0;\n                else if (DMRemoveType == removeDMTypes.RemoveNone)\n                    fractionDM2Remove = 0.0;\n                else\n                {\n                    fractionDM2Remove = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;\n                    fractionDM2Remove /= removeAmount;\n                }\n                \n                RemovedWt = HarvestedWt * fractionDM2Remove;\n                RemovedN = HarvestedN * FractionN2Remove;\n                ReturnedWt = HarvestedWt - RemovedWt;\n                ReturnedN = HarvestedN - RemovedN;\n                NReturnedInDung = ReturnedN * ProportionN2Dung;\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\n            }\n        }\n\n        // Return dung and urine\n        private void returnExcreta()\n        {\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\n            {\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\n                float[] dltdm = new float[] { (Single)ReturnedWt };\n                float[] dltn = new float[] { (Single)NReturnedInDung };\n                float[] dltp = new float[] { 0 };\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\n\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\n                BiomassDung.dm_type = type;\n                BiomassDung.dlt_crop_dm = dltdm;\n                BiomassDung.dlt_dm_n = dltn;\n                BiomassDung.dlt_dm_p = dltp;\n                BiomassDung.fraction_to_residue = fraction;\n                BiomassRemoved.Invoke(BiomassDung);\n            }\n\n            if (NReturnedInUrine > 0.0)\n            {\n                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "1900-07-01"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "2100-12-31"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "21"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "1000"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"kg/kg\")] public double PropYieldRye1 { get; set; }\n        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye1 { get; set; }\n        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye2 { get; set; }\n        \n        // - Internal variables\n        //private double fractionDM2Remove = 1.0;\n\n        // - Event to add residue or dung to surface OM\n        //public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n            YieldRye1 = 0.0;\n            YieldRye2 = 0.0;\n            PropYieldRye1 = 0.0;\n        }\n        \n\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                //Pasture.Add(species);\n            }\n            YieldRye1 += Pasture[0].HarvestedWt;\n            YieldRye2 += Pasture[1].HarvestedWt;\n            if ((YieldRye1 + YieldRye2) > 0.0)\n                PropYieldRye1 = YieldRye1 / (YieldRye1 + YieldRye2);\n        }\n\n    }\n}\n",
                              "Parameters": [],
                              "Name": "PropRye1",
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 0.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "ResourceName": "Fertiliser",
                          "Name": "Fertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 1000.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "ResourceName": "SurfaceOrganicMatter",
                          "Name": "SurfaceOrganicMatter",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "InitialShootDM": 750.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "ResourceName": "AGPRyegrass",
                          "Name": "Rye1",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "InitialShootDM": 750.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "ResourceName": "AGPRyegrass",
                          "Name": "Rye2",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": null,
                          "Site": null,
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "TempletonABlock",
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "NO3N": [
                                27.3,
                                11.4,
                                0.25157232704402605,
                                1.9532908704883236,
                                1.9166666666666667,
                                0.20833333333333334
                              ],
                              "NH4N": [
                                4.3,
                                7.6,
                                4.1,
                                2.7,
                                2.4,
                                0.1
                              ],
                              "PH": [
                                6.6,
                                6.2,
                                5.7,
                                5.5,
                                5.5,
                                5.5
                              ],
                              "CL": null,
                              "EC": null,
                              "ESP": null,
                              "LabileP": null,
                              "UnavailableP": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.InitialWater, Models",
                              "PercentMethod": 1,
                              "FractionFull": 1.0,
                              "DepthWetSoil": "NaN",
                              "RelativeTo": null,
                              "Name": "Initial water",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "ParticleSizeClay": null,
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.0,
                                1.0,
                                1.59,
                                1.57,
                                1.6,
                                1.6
                              ],
                              "AirDry": [
                                0.05,
                                0.05,
                                0.16,
                                0.17,
                                0.17,
                                0.12
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.16,
                                0.17,
                                0.17,
                                0.12
                              ],
                              "DUL": [
                                0.27,
                                0.27,
                                0.29,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "SAT": [
                                0.42,
                                0.4,
                                0.36,
                                0.37,
                                0.37,
                                0.32
                              ],
                              "KS": [
                                4832.0,
                                389.0,
                                16.0,
                                16.0,
                                98.0,
                                98.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye1Soil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye2Soil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 9.0,
                              "SummerCona": 4.4,
                              "WinterDate": "1-Apr",
                              "WinterU": 9.0,
                              "WinterCona": 4.4,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.4,
                              "Salb": 0.18,
                              "CN2Bare": 68.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": "NaN",
                              "CatchmentArea": "NaN",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "SWCON": [
                                0.55,
                                0.55,
                                0.55,
                                0.55,
                                0.55,
                                0.55
                              ],
                              "KLAT": null,
                              "ResourceName": "WaterBalance",
                              "Name": "SoilWater",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogen, Models",
                              "fom_types": [
                                "default",
                                "manure",
                                "mucuna",
                                "lablab",
                                "shemp",
                                "stable"
                              ],
                              "fract_carb": [
                                0.2,
                                0.3,
                                0.54,
                                0.57,
                                0.45,
                                0.0
                              ],
                              "fract_cell": [
                                0.7,
                                0.3,
                                0.37,
                                0.37,
                                0.47,
                                0.1
                              ],
                              "fract_lign": [
                                0.1,
                                0.4,
                                0.09,
                                0.06,
                                0.08,
                                0.9
                              ],
                              "NPartitionApproach": 0,
                              "Name": "SoilNitrogen",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilNitrogenNO3, Models",
                                  "Name": "NO3",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenNH4, Models",
                                  "Name": "NH4",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenUrea, Models",
                                  "Name": "Urea",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 30.0,
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "Carbon": [
                                1.82,
                                1.47,
                                1.2,
                                1.03,
                                0.47,
                                0.47
                              ],
                              "SoilCNRatio": [
                                11.5,
                                11.5,
                                11.5,
                                11.5,
                                11.5,
                                11.5
                              ],
                              "FBiom": [
                                0.025,
                                0.025,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "FInert": [
                                0.3,
                                0.4,
                                0.75,
                                0.9,
                                0.96,
                                0.96
                              ],
                              "FOM": [
                                1243.9310541346904,
                                833.8319214727269,
                                457.61666105087295,
                                251.1453484552152,
                                137.83148958311097,
                                75.64352530338392
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Graph, Models",
                              "Caption": null,
                              "Axis": [
                                {
                                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                                  "Title": "Depth (mm)",
                                  "Position": 0,
                                  "Inverted": true,
                                  "CrossesAtZero": false,
                                  "Minimum": null,
                                  "Maximum": null,
                                  "Interval": null
                                },
                                {
                                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                                  "Title": "Volumetric water (mm/mm)",
                                  "Position": 1,
                                  "Inverted": false,
                                  "CrossesAtZero": false,
                                  "Minimum": null,
                                  "Maximum": null,
                                  "Interval": null
                                }
                              ],
                              "LegendPosition": 3,
                              "LegendOrientation": 0,
                              "AnnotationLocation": 0,
                              "DisabledSeries": null,
                              "LegendOutsideGraph": false,
                              "Name": "Graph",
                              "Children": [
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 2,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -3479297,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "[Soil].DUL",
                                  "Y2FieldName": "[Soil].DepthMidPoints",
                                  "ShowInLegend": false,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL15",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16711681,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL151",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -32768,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil]l.DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": false,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL152",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -65536,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].AirDry",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "Air dry",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16776961,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].DUL",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "DUL",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16760704,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].SAT",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "SAT",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "sum([TempletonABlock].SoilNitrogen.NO3.kgha) as NO3",
                            "sum([TempletonABlock].SoilWater.SWmm) as SWDep",
                            "[Rye1].AboveGroundWt",
                            "[Rye2].AboveGroundWt",
                            "[Rye1].HarvestedWt",
                            "[Rye2].HarvestedWt",
                            "([Rye1].HarvestedWt + [Rye2].HarvestedWt) as Yield",
                            "[PropRye1].Script.PropYieldRye1 as PropYieldRye1",
                            "([Fertiliser].NitrogenApplied-( 10.0 * [CutRotation].Script.NReturnedInUrine)) as RealFert",
                            "[Rye2].RootDepth"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "AgPastureDeepSoilTest",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "03 AgPasture Shallow Soil Test",
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This series of simulations is as for “AgPasture Deep Soil Test” but substituting a soil with a lower soil water storage - 60 mm to 750 mm deep.  The graphs of the simulations with equal ryegrasses are not repeated but the standing herbage from the equal ryegrass simulations are shown as a reference on the first two graphs.  \r\n\r\nUnder conditions of no irrigation or fertiliser the differences between Rye1 and Rye2 are intensified under the shallow soil compared to the earlier simulations with the deep soil.  The proportion of the total yield from Rye1 is greater in the shallow than the deep soil but still reaches a maximum of 0.67.  The dominance of Rye1 seems limited by the couple of months (in winter) at the beginning of the simulation in which the shallow-rooted Rye2 is not much constrained by its shallow root depth.\r\n",
              "Name": "Memo AgPastureShallowSoilTest",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "StandingHerbage UnequalIrrigFert",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalIrrigFert1'",
                  "Name": "Rye1",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalIrrigFert1'",
                  "Name": "Rye2",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'EqualIrrigFert1'",
                  "Name": "RyeEqualForReference",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "StandingHerbage UnequalDryNofert",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalDryNofert1'",
                  "Name": "Rye1",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'UnequalDryNofert1'",
                  "Name": "Rye2",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = 'EqualDryNofert1'",
                  "Name": "RyeEqualForReference",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 2,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Yield",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 2,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "Yield",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Yield",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.45,
                  "Maximum": 0.75,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PropRye1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": "Factor",
                  "FactorToVaryLines": "Factor",
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureShallowSoilTest",
                  "XFieldName": "Date",
                  "YFieldName": "PropYieldRye1",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "PropRye1",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment03",
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": "",
                      "Name": "Factor",
                      "Children": [
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "EqualIrrigFert1",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "EqualDryNofert1",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 150",
                            "[Rye2].InitialRootDepth = 150"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "UnequalIrrigFert1",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 150",
                            "[Rye2].InitialRootDepth = 150"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "UnequalDryNofert1",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "IsRunning": false,
                  "Descriptors": null,
                  "Name": "AgPastureShallowSoilTest",
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "1971-07-01T00:00:00",
                      "End": "1972-06-30T00:00:00",
                      "Name": "Clock",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.Weather, Models",
                      "ConstantsFile": null,
                      "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
                      "ExcelWorkSheetName": null,
                      "Name": "Weather",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Field",
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn fertiliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int FertOn { get; set; }\n\n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount * FertOn, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "FertOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "200"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "15"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "25"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "14"
                                }
                              ],
                              "Name": "OnOffFertiliser",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")]\n        public answerType allowIrrigation { get; set; }\n        \n        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int IrrigOn { get; set; }\n\n\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply * IrrigOn);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "IrrigOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "15-Aug"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "30-May"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "75"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "30"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "300"
                                }
                              ],
                              "Name": "OnOffIrrigation",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }\n        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }\n        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }\n        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }\n        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }\n        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }\n        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }\n        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }\n        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }\n        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }\n        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }\n        // Description: Pasture DM defoliated today\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }\n        // Description: Pasture N defoliate today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }\n        // Description: Pasture DM harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }\n        // Description: Pasture N harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }\n        // Description: Pasture DM removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }\n        // Description: Pasture N removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }\n        // Description: Residue DM returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }\n        // Description: Residue N returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }\n        // Description: Harvested N returned as dung (SurfaceOM)\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }\n        // Description: Harvested N returned as urine (urea)\n        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }\n        // Description: Number of days after last defoliation\n        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) before cut\n        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) after cut\n        \n        // - Internal variables\n        // fraction of harvested Dm to actually remove from field\n        private double fractionDM2Remove = 1.0;\n        // flag whether defoliation is allowed\n        //private bool rotationAllowed = true;\n        // number of days for each defoliation event\n        private int cuttingDuration = 0;\n        // counter for day within each defoliation\n        private int daysCutting = 0;\n        // type of interval (Fixed or target)\n        private string intervalType;\n        // total herbage to remove in g/m2 per day\n        private double herbageToRemove;\n        // type of DM amount (ResidualDM or DMToRemove)\n        private string amountType;\n        // auxiliary flag for defoliation\n        private bool aCutHasHappened = false;\n\n        // - Event to add residue or dung to surface OM\n        public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n\n            // reset variables\n            DaysAfterCut = 0;\n            resetVariables();\n            cuttingDuration = DurationOfCut;\n            \n            // get the type of amount given\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\n                amountType = \"SetResidueAmount\";\n            else\n                amountType = \"SetRemoveAmount\";\n\n            // get the type of amount given\n            if (IntervalType == rotationIntervalTypes.FixedInterval)\n                intervalType = \"Fixed\";\n            else\n                intervalType = \"Target\";\n\n            // make sure that rotation starts when startDate < simulationStartDay\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\n                CutRotationStartDate = Clock.Today;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (rotationAllowed)\n            {\n                if (Clock.Today == CutRotationStartDate)\n                    DaysAfterCut = CutInterval;\n\n                bool SwardIsAlive = false;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                {\n                    if (species.IsAlive)\n                        SwardIsAlive = true;\n                }\n                \n                // Check whether we can defoliate\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))\n                {\n                    // Check whether we should start a defoliation\n                    if (DaysAfterCut >= (CutInterval - 1))\n                    {\n                        Graze(AmountGiven, amountType, DurationOfCut);\n                    }\n                }\n            }\n\n            // Check whether we need to continue cutting\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\n            {\n                // reset outputs\n                resetVariables();\n\n                removeDM(herbageToRemove);\n                returnExcreta();\n                daysCutting += 1;\n                if (daysCutting == cuttingDuration)\n                {\n                    PostHarvestDM = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        PostHarvestDM += species.Standing.Wt;\n                }\n            }\n\n            // reset outputs\n            if (daysCutting < 0)\n            {\n                resetVariables();\n                daysCutting = 0;\n            }\n        }\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            // Check whether a cutting has finished\n            if (daysCutting == cuttingDuration)\n            {\n                aCutHasHappened = true;\n                daysCutting = -1;\n            }\n\n            // Increase the counter for days after cutting\n            if (aCutHasHappened && (daysCutting == 0))\n                DaysAfterCut += 1;\n        }\n\n        public enum removeAmountTypes\n        {\n            /// <summary>Setting DM amount to remove</summary>\n            DMToRemove,\n            /// <summary>Setting residual DM amount</summary>\n            ResidualDM\n        }\n\n        public enum rotationIntervalTypes\n        {\n            /// <summary>Setting a fixed interval</summary>\n            FixedInterval,\n            /// <summary>Setting a target (minimum) inteval</summary>\n            TargetInterval\n        }\n\n        public enum removeDMTypes\n        {\n            /// <summary>Remove all DM</summary>\n            RemoveAll,\n            /// <summary>Remove no DM</summary>\n            RemoveNone,\n            /// <summary>Remove a fraction based on digestibility</summary>\n            BasedOnDigestibility\n        }\n\n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n        \n                \n        // Resets the values of all outputs\n        private void resetVariables()\n        {\n            DefoliatedWt = 0.0;\n            DefoliatedN = 0.0;\n            HarvestedWt = 0.0;\n            HarvestedN = 0.0;\n            RemovedWt = 0.0;\n            RemovedN = 0.0;\n            ReturnedWt = 0.0;\n            ReturnedN = 0.0;\n            NReturnedInDung = 0.0;\n            NReturnedInUrine = 0.0;\n        }\n\n        // Description: Perform the basic calculations for defoliation\n        public void Graze(double amountDM, string amountType, int duration)\n        {\n            // Get the existing plant amount\n            PreHarvestDM = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                PreHarvestDM += species.Standing.Wt;\n            \n            // Check the amount to remove and print some info\n            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))\n            {\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = amountDM / duration;\n            }\n            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))\n            {\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\n            }\n            else\n            {\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);\n                if (intervalType == \"Fixed\")\n                    DaysAfterCut = -duration;\n                return;\n            }\n\n            cuttingDuration = duration;\n            // Preform first defoliation\n            removeDM(herbageToRemove);\n            returnExcreta();\n            daysCutting = 1;\n            DaysAfterCut = 0;\n            if (daysCutting == cuttingDuration)\n            {\n                PostHarvestDM = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    PostHarvestDM += species.Standing.Wt;\n            }\n        }\n\n        // Do the DM removal\n        private void removeDM(double removeAmount)\n        {\n            double existingWt = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                existingWt += species.Harvestable.Wt;\n\n\n            // Check whether we harvest anything\n            if (existingWt >= removeAmount)\n            {\n                foreach (AgPasture.PastureSpecies species in Pasture)\n                {\n                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;\n                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\n                }\n                \n                // get total harvested\n                DefoliatedWt = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedWt += species.HarvestedWt;\n                DefoliatedN = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedN += species.HarvestedN;\n                HarvestedWt = DefoliatedWt;\n                HarvestedN = DefoliatedN;\n\n                // get amounts actually removed from field and that to be returned (dung/urine)\n                if (DMRemoveType == removeDMTypes.RemoveAll)\n                    fractionDM2Remove = 1.0;\n                else if (DMRemoveType == removeDMTypes.RemoveNone)\n                    fractionDM2Remove = 0.0;\n                else\n                {\n                    fractionDM2Remove = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;\n                    fractionDM2Remove /= removeAmount;\n                }\n                \n                RemovedWt = HarvestedWt * fractionDM2Remove;\n                RemovedN = HarvestedN * FractionN2Remove;\n                ReturnedWt = HarvestedWt - RemovedWt;\n                ReturnedN = HarvestedN - RemovedN;\n                NReturnedInDung = ReturnedN * ProportionN2Dung;\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\n            }\n        }\n\n        // Return dung and urine\n        private void returnExcreta()\n        {\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\n            {\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\n                float[] dltdm = new float[] { (Single)ReturnedWt };\n                float[] dltn = new float[] { (Single)NReturnedInDung };\n                float[] dltp = new float[] { 0 };\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\n\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\n                BiomassDung.dm_type = type;\n                BiomassDung.dlt_crop_dm = dltdm;\n                BiomassDung.dlt_dm_n = dltn;\n                BiomassDung.dlt_dm_p = dltp;\n                BiomassDung.fraction_to_residue = fraction;\n                BiomassRemoved.Invoke(BiomassDung);\n            }\n\n            if (NReturnedInUrine > 0.0)\n            {\n                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "1900-07-01"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "2100-12-31"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "21"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "1000"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"kg/kg\")] public double PropYieldRye1 { get; set; }\n        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye1 { get; set; }\n        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye2 { get; set; }\n        \n        // - Internal variables\n        //private double fractionDM2Remove = 1.0;\n\n        // - Event to add residue or dung to surface OM\n        //public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n            YieldRye1 = 0.0;\n            YieldRye2 = 0.0;\n            PropYieldRye1 = 0.0;\n        }\n        \n\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                //Pasture.Add(species);\n            }\n            YieldRye1 += Pasture[0].HarvestedWt;\n            YieldRye2 += Pasture[1].HarvestedWt;\n            if ((YieldRye1 + YieldRye2) > 0.0)\n                PropYieldRye1 = YieldRye1 / (YieldRye1 + YieldRye2);\n        }\n\n    }\n}\n",
                              "Parameters": [],
                              "Name": "PropRye1",
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 0.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "ResourceName": "Fertiliser",
                          "Name": "Fertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 1000.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "ResourceName": "SurfaceOrganicMatter",
                          "Name": "SurfaceOrganicMatter",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "InitialShootDM": 750.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "ResourceName": "AGPRyegrass",
                          "Name": "Rye1",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "InitialShootDM": 750.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "ResourceName": "AGPRyegrass",
                          "Name": "Rye2",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": "NZ_Sedimentary",
                          "LocalName": "Lismore",
                          "Site": "Winchmore",
                          "NearestTown": "Ashburton",
                          "Region": "Canterbury",
                          "State": null,
                          "Country": "New Zealand",
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": -48.48,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "ShallowSoil",
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "NO3N": [
                                50.0,
                                50.0,
                                50.0,
                                50.0,
                                50.0,
                                50.0,
                                50.0
                              ],
                              "NH4N": [
                                0.1,
                                0.1,
                                0.1,
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "CL": null,
                              "EC": null,
                              "ESP": null,
                              "LabileP": null,
                              "UnavailableP": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "ParticleSizeClay": [
                                20.0,
                                15.0,
                                12.0,
                                8.0,
                                6.0,
                                5.0,
                                5.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.35,
                                1.0,
                                0.53,
                                0.31,
                                0.3,
                                0.3
                              ],
                              "AirDry": [
                                0.05,
                                0.12,
                                0.055,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "LL15": [
                                0.15,
                                0.14,
                                0.055,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "DUL": [
                                0.25,
                                0.22,
                                0.15,
                                0.05,
                                0.03,
                                0.03,
                                0.03
                              ],
                              "SAT": [
                                0.45,
                                0.43,
                                0.25,
                                0.15,
                                0.11,
                                0.11,
                                0.11
                              ],
                              "KS": [
                                5000.0,
                                2500.0,
                                3000.0,
                                10000.0,
                                17500.0,
                                20000.0,
                                20000.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Slurp1Soil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Slurp2Soil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye1Soil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.15,
                                    0.14,
                                    0.06,
                                    0.02,
                                    0.01,
                                    0.01,
                                    0.01
                                  ],
                                  "KL": [
                                    0.1,
                                    0.1,
                                    0.08,
                                    0.04,
                                    0.01,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye2Soil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 2.0,
                              "WinterCona": 2.0,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "SWCON": [
                                0.5,
                                0.52,
                                0.55,
                                0.6,
                                0.65,
                                0.65,
                                0.65
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "ResourceName": "WaterBalance",
                              "Name": "SoilWater",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogen, Models",
                              "fom_types": [
                                "default",
                                "manure",
                                "mucuna",
                                "lablab",
                                "shemp",
                                "stable"
                              ],
                              "fract_carb": [
                                0.2,
                                0.3,
                                0.54,
                                0.57,
                                0.45,
                                0.0
                              ],
                              "fract_cell": [
                                0.7,
                                0.3,
                                0.37,
                                0.37,
                                0.47,
                                0.1
                              ],
                              "fract_lign": [
                                0.1,
                                0.4,
                                0.09,
                                0.06,
                                0.08,
                                0.9
                              ],
                              "NPartitionApproach": 0,
                              "Name": "SoilNitrogen",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilNitrogenNO3, Models",
                                  "Name": "NO3",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenNH4, Models",
                                  "Name": "NH4",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenUrea, Models",
                                  "Name": "Urea",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                200.0,
                                150.0,
                                250.0,
                                300.0,
                                300.0
                              ],
                              "Carbon": [
                                3.0,
                                1.0,
                                0.6,
                                0.4,
                                0.25,
                                0.15,
                                0.1
                              ],
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.04,
                                0.02,
                                0.02,
                                0.01,
                                0.01,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.5,
                                0.7,
                                0.83,
                                0.9,
                                0.95,
                                0.99,
                                0.99
                              ],
                              "FOM": [
                                331.337020409173,
                                245.4605019055056,
                                164.53709493722965,
                                121.89207790753734,
                                73.93128242700234,
                                40.57434806729268,
                                22.267674346259405
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.InitialWater, Models",
                              "PercentMethod": 1,
                              "FractionFull": 0.95,
                              "DepthWetSoil": "NaN",
                              "RelativeTo": null,
                              "Name": "Initial water",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "sum([ShallowSoil].SoilNitrogen.NO3.kgha) as NO3",
                            "sum([ShallowSoil].SoilWater.SWmm) as SWDep",
                            "[Rye1].AboveGroundWt",
                            "[Rye2].AboveGroundWt",
                            "[Rye1].HarvestedWt",
                            "[Rye2].HarvestedWt",
                            "([Rye1].HarvestedWt + [Rye2].HarvestedWt) as Yield",
                            "[PropRye1].Script.PropYieldRye1 as PropYieldRye1",
                            "([Fertiliser].NitrogenApplied-( 10.0 * [CutRotation].Script.NReturnedInUrine)) as RealFert",
                            "[Rye2].RootDepth"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "AgPastureShallowSoilTest",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "04 AgPasture Test Root Depth Differential",
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This series of simulations is as for “AgPasture Deep Soil Test” but applying a range of rooting depths to Rye2 while leaving Rye1 at a rooting depth of 750 mm.  The simulations use a soil with 132 mm of PAW to 750 mm deep in the Lincoln environment and are not fertilised or irrigated. \r\n\r\nTotal yield (first graph) again shows the small yield penalty as the root systems become more unequal.  Against this trend the total yield (Rye1 + Rye2) when Rye2 has a 100 mm rooting depth is slightly higher (~ 50 kg DM /ha or < 1 % of the total yield) than when Rye2 has a rooting depth of 225 mm.  The most likely explanation is that of less competition effect from the shallowest-rooting Rye2.  The proportion of the total yield arising from the deeper-rooted Rye1 (second graph) ranges from 0.5 for the equal root depth scenario to 0.7 for the scenario with the shallowest Rye2.  Graphs 3 and 4 show the cumulative harvested yield from each of the grasses – the patterns are sensible given the changes in rooting depth.\r\n\r\nThe final two graphs show the degree of water stress (1 is no stress) in December and January for each of the grasses.  As the root depth of Rye2 decreases, water stress in Rye1 shows a slower onset and a reduction in magnitude.  Again, these patterns meet expectations.\r\n",
              "Name": "Memo AgPastureTestRootDepthDifferential",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 2,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Yield",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 2,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureTestRootDepthDifferential",
                  "XFieldName": "Date",
                  "YFieldName": "Yield",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Yield",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PropRye1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": "Factor",
                  "FactorToVaryLines": "Factor",
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureTestRootDepthDifferential",
                  "XFieldName": "Date",
                  "YFieldName": "PropYieldRye1",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "PropRye1",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 2,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 4500.0,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "YieldRye1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 2,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureTestRootDepthDifferential",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.HarvestedWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Yield",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 2,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 4500.0,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "YieldRye2",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 2,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureTestRootDepthDifferential",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.HarvestedWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Yield",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStressRye1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureTestRootDepthDifferential",
                  "XFieldName": "Date",
                  "YFieldName": "Rye1.GlfWaterSupply",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "Clock.Today.Month IN (12, 1)",
                  "Name": "WaterStressRye1",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStressRye2",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "AgPastureTestRootDepthDifferential",
                  "XFieldName": "Date",
                  "YFieldName": "Rye2.GlfWaterSupply",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "Clock.Today.Month IN (12, 1)",
                  "Name": "WaterStressRye2",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment04",
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": null,
                      "Name": "Factor",
                      "Children": [
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 750",
                            "[Rye2].InitialRootDepth = 750"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "750mm",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 500",
                            "[Rye2].InitialRootDepth = 500"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "500mm",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 350",
                            "[Rye2].InitialRootDepth = 350"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "350mm",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 225",
                            "[Rye2].InitialRootDepth = 225"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "225mm",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0",
                            "[Rye2].Root.MaximumPotentialRootingDepth = 100",
                            "[Rye2].InitialRootDepth = 100"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "100mm",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "IsRunning": false,
                  "Descriptors": null,
                  "Name": "AgPastureTestRootDepthDifferential",
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "1971-07-01T00:00:00",
                      "End": "1972-06-30T00:00:00",
                      "Name": "Clock",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.Weather, Models",
                      "ConstantsFile": null,
                      "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
                      "ExcelWorkSheetName": null,
                      "Name": "Weather",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Field",
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn fertiliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int FertOn { get; set; }\n\n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount * FertOn, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "FertOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "200"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "15"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "25"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "14"
                                }
                              ],
                              "Name": "OnOffFertiliser",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")]\n        public answerType allowIrrigation { get; set; }\n        \n        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int IrrigOn { get; set; }\n\n\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply * IrrigOn);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "IrrigOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "15-Aug"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "30-May"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "75"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "30"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "300"
                                }
                              ],
                              "Name": "OnOffIrrigation",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }\n        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }\n        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }\n        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }\n        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }\n        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }\n        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }\n        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }\n        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }\n        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }\n        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }\n        // Description: Pasture DM defoliated today\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }\n        // Description: Pasture N defoliate today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }\n        // Description: Pasture DM harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }\n        // Description: Pasture N harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }\n        // Description: Pasture DM removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }\n        // Description: Pasture N removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }\n        // Description: Residue DM returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }\n        // Description: Residue N returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }\n        // Description: Harvested N returned as dung (SurfaceOM)\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }\n        // Description: Harvested N returned as urine (urea)\n        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }\n        // Description: Number of days after last defoliation\n        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) before cut\n        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) after cut\n        \n        // - Internal variables\n        // fraction of harvested Dm to actually remove from field\n        private double fractionDM2Remove = 1.0;\n        // flag whether defoliation is allowed\n        //private bool rotationAllowed = true;\n        // number of days for each defoliation event\n        private int cuttingDuration = 0;\n        // counter for day within each defoliation\n        private int daysCutting = 0;\n        // type of interval (Fixed or target)\n        private string intervalType;\n        // total herbage to remove in g/m2 per day\n        private double herbageToRemove;\n        // type of DM amount (ResidualDM or DMToRemove)\n        private string amountType;\n        // auxiliary flag for defoliation\n        private bool aCutHasHappened = false;\n\n        // - Event to add residue or dung to surface OM\n        public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n\n            // reset variables\n            DaysAfterCut = 0;\n            resetVariables();\n            cuttingDuration = DurationOfCut;\n            \n            // get the type of amount given\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\n                amountType = \"SetResidueAmount\";\n            else\n                amountType = \"SetRemoveAmount\";\n\n            // get the type of amount given\n            if (IntervalType == rotationIntervalTypes.FixedInterval)\n                intervalType = \"Fixed\";\n            else\n                intervalType = \"Target\";\n\n            // make sure that rotation starts when startDate < simulationStartDay\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\n                CutRotationStartDate = Clock.Today;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (rotationAllowed)\n            {\n                if (Clock.Today == CutRotationStartDate)\n                    DaysAfterCut = CutInterval;\n\n                bool SwardIsAlive = false;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                {\n                    if (species.IsAlive)\n                        SwardIsAlive = true;\n                }\n                \n                // Check whether we can defoliate\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))\n                {\n                    // Check whether we should start a defoliation\n                    if (DaysAfterCut >= (CutInterval - 1))\n                    {\n                        Graze(AmountGiven, amountType, DurationOfCut);\n                    }\n                }\n            }\n\n            // Check whether we need to continue cutting\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\n            {\n                // reset outputs\n                resetVariables();\n\n                removeDM(herbageToRemove);\n                returnExcreta();\n                daysCutting += 1;\n                if (daysCutting == cuttingDuration)\n                {\n                    PostHarvestDM = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        PostHarvestDM += species.Standing.Wt;\n                }\n            }\n\n            // reset outputs\n            if (daysCutting < 0)\n            {\n                resetVariables();\n                daysCutting = 0;\n            }\n        }\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            // Check whether a cutting has finished\n            if (daysCutting == cuttingDuration)\n            {\n                aCutHasHappened = true;\n                daysCutting = -1;\n            }\n\n            // Increase the counter for days after cutting\n            if (aCutHasHappened && (daysCutting == 0))\n                DaysAfterCut += 1;\n        }\n\n        public enum removeAmountTypes\n        {\n            /// <summary>Setting DM amount to remove</summary>\n            DMToRemove,\n            /// <summary>Setting residual DM amount</summary>\n            ResidualDM\n        }\n\n        public enum rotationIntervalTypes\n        {\n            /// <summary>Setting a fixed interval</summary>\n            FixedInterval,\n            /// <summary>Setting a target (minimum) inteval</summary>\n            TargetInterval\n        }\n\n        public enum removeDMTypes\n        {\n            /// <summary>Remove all DM</summary>\n            RemoveAll,\n            /// <summary>Remove no DM</summary>\n            RemoveNone,\n            /// <summary>Remove a fraction based on digestibility</summary>\n            BasedOnDigestibility\n        }\n\n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n        \n                \n        // Resets the values of all outputs\n        private void resetVariables()\n        {\n            DefoliatedWt = 0.0;\n            DefoliatedN = 0.0;\n            HarvestedWt = 0.0;\n            HarvestedN = 0.0;\n            RemovedWt = 0.0;\n            RemovedN = 0.0;\n            ReturnedWt = 0.0;\n            ReturnedN = 0.0;\n            NReturnedInDung = 0.0;\n            NReturnedInUrine = 0.0;\n        }\n\n        // Description: Perform the basic calculations for defoliation\n        public void Graze(double amountDM, string amountType, int duration)\n        {\n            // Get the existing plant amount\n            PreHarvestDM = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                PreHarvestDM += species.Standing.Wt;\n            \n            // Check the amount to remove and print some info\n            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))\n            {\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = amountDM / duration;\n            }\n            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))\n            {\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\n            }\n            else\n            {\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);\n                if (intervalType == \"Fixed\")\n                    DaysAfterCut = -duration;\n                return;\n            }\n\n            cuttingDuration = duration;\n            // Preform first defoliation\n            removeDM(herbageToRemove);\n            returnExcreta();\n            daysCutting = 1;\n            DaysAfterCut = 0;\n            if (daysCutting == cuttingDuration)\n            {\n                PostHarvestDM = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    PostHarvestDM += species.Standing.Wt;\n            }\n        }\n\n        // Do the DM removal\n        private void removeDM(double removeAmount)\n        {\n            double existingWt = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                existingWt += species.Harvestable.Wt;\n\n\n            // Check whether we harvest anything\n            if (existingWt >= removeAmount)\n            {\n                foreach (AgPasture.PastureSpecies species in Pasture)\n                {\n                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;\n                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\n                }\n                \n                // get total harvested\n                DefoliatedWt = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedWt += species.HarvestedWt;\n                DefoliatedN = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedN += species.HarvestedN;\n                HarvestedWt = DefoliatedWt;\n                HarvestedN = DefoliatedN;\n\n                // get amounts actually removed from field and that to be returned (dung/urine)\n                if (DMRemoveType == removeDMTypes.RemoveAll)\n                    fractionDM2Remove = 1.0;\n                else if (DMRemoveType == removeDMTypes.RemoveNone)\n                    fractionDM2Remove = 0.0;\n                else\n                {\n                    fractionDM2Remove = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;\n                    fractionDM2Remove /= removeAmount;\n                }\n                \n                RemovedWt = HarvestedWt * fractionDM2Remove;\n                RemovedN = HarvestedN * FractionN2Remove;\n                ReturnedWt = HarvestedWt - RemovedWt;\n                ReturnedN = HarvestedN - RemovedN;\n                NReturnedInDung = ReturnedN * ProportionN2Dung;\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\n            }\n        }\n\n        // Return dung and urine\n        private void returnExcreta()\n        {\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\n            {\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\n                float[] dltdm = new float[] { (Single)ReturnedWt };\n                float[] dltn = new float[] { (Single)NReturnedInDung };\n                float[] dltp = new float[] { 0 };\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\n\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\n                BiomassDung.dm_type = type;\n                BiomassDung.dlt_crop_dm = dltdm;\n                BiomassDung.dlt_dm_n = dltn;\n                BiomassDung.dlt_dm_p = dltp;\n                BiomassDung.fraction_to_residue = fraction;\n                BiomassRemoved.Invoke(BiomassDung);\n            }\n\n            if (NReturnedInUrine > 0.0)\n            {\n                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "1900-07-01"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "2100-12-31"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "21"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "1000"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"kg/kg\")] public double PropYieldRye1 { get; set; }\n        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye1 { get; set; }\n        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye2 { get; set; }\n        \n        // - Internal variables\n        //private double fractionDM2Remove = 1.0;\n\n        // - Event to add residue or dung to surface OM\n        //public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n            YieldRye1 = 0.0;\n            YieldRye2 = 0.0;\n            PropYieldRye1 = 0.0;\n        }\n        \n\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                //Pasture.Add(species);\n            }\n            YieldRye1 += Pasture[0].HarvestedWt;\n            YieldRye2 += Pasture[1].HarvestedWt;\n            if ((YieldRye1 + YieldRye2) > 0.0)\n                PropYieldRye1 = YieldRye1 / (YieldRye1 + YieldRye2);\n        }\n\n    }\n}\n",
                              "Parameters": [],
                              "Name": "PropRye1",
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 1000.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "ResourceName": "SurfaceOrganicMatter",
                          "Name": "SurfaceOrganicMatter",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 0.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "ResourceName": "Fertiliser",
                          "Name": "Fertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "InitialShootDM": 750.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "ResourceName": "AGPRyegrass",
                          "Name": "Rye1",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "InitialShootDM": 750.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "ResourceName": "AGPRyegrass",
                          "Name": "Rye2",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": null,
                          "Site": null,
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "NO3N": [
                                27.3,
                                11.4,
                                0.25157232704402605,
                                1.9532908704883236,
                                1.9166666666666667,
                                0.20833333333333334
                              ],
                              "NH4N": [
                                4.3,
                                7.6,
                                4.1,
                                2.7,
                                2.4,
                                0.1
                              ],
                              "PH": [
                                6.6,
                                6.2,
                                5.7,
                                5.5,
                                5.5,
                                5.5
                              ],
                              "CL": null,
                              "EC": null,
                              "ESP": null,
                              "LabileP": null,
                              "UnavailableP": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.InitialWater, Models",
                              "PercentMethod": 1,
                              "FractionFull": 1.0,
                              "DepthWetSoil": "NaN",
                              "RelativeTo": null,
                              "Name": "Initial water",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "ParticleSizeClay": null,
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.0,
                                1.0,
                                1.59,
                                1.57,
                                1.6,
                                1.6
                              ],
                              "AirDry": [
                                0.05,
                                0.05,
                                0.16,
                                0.17,
                                0.17,
                                0.12
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.16,
                                0.17,
                                0.17,
                                0.12
                              ],
                              "DUL": [
                                0.27,
                                0.27,
                                0.29,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "SAT": [
                                0.42,
                                0.4,
                                0.36,
                                0.37,
                                0.37,
                                0.32
                              ],
                              "KS": [
                                4832.0,
                                389.0,
                                16.0,
                                16.0,
                                98.0,
                                98.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye1Soil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye2Soil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 9.0,
                              "SummerCona": 4.4,
                              "WinterDate": "1-Apr",
                              "WinterU": 9.0,
                              "WinterCona": 4.4,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.4,
                              "Salb": 0.18,
                              "CN2Bare": 68.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": "NaN",
                              "CatchmentArea": "NaN",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "SWCON": [
                                0.55,
                                0.55,
                                0.55,
                                0.55,
                                0.55,
                                0.55
                              ],
                              "KLAT": null,
                              "ResourceName": "WaterBalance",
                              "Name": "SoilWater",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogen, Models",
                              "fom_types": [
                                "default",
                                "manure",
                                "mucuna",
                                "lablab",
                                "shemp",
                                "stable"
                              ],
                              "fract_carb": [
                                0.2,
                                0.3,
                                0.54,
                                0.57,
                                0.45,
                                0.0
                              ],
                              "fract_cell": [
                                0.7,
                                0.3,
                                0.37,
                                0.37,
                                0.47,
                                0.1
                              ],
                              "fract_lign": [
                                0.1,
                                0.4,
                                0.09,
                                0.06,
                                0.08,
                                0.9
                              ],
                              "NPartitionApproach": 0,
                              "Name": "SoilNitrogen",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilNitrogenNO3, Models",
                                  "Name": "NO3",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenNH4, Models",
                                  "Name": "NH4",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenUrea, Models",
                                  "Name": "Urea",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 30.0,
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "Carbon": [
                                1.82,
                                1.47,
                                1.2,
                                1.03,
                                0.47,
                                0.47
                              ],
                              "SoilCNRatio": [
                                11.5,
                                11.5,
                                11.5,
                                11.5,
                                11.5,
                                11.5
                              ],
                              "FBiom": [
                                0.025,
                                0.025,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "FInert": [
                                0.3,
                                0.4,
                                0.75,
                                0.9,
                                0.96,
                                0.96
                              ],
                              "FOM": [
                                1243.9310541346904,
                                833.8319214727269,
                                457.61666105087295,
                                251.1453484552152,
                                137.83148958311097,
                                75.64352530338392
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Graph, Models",
                              "Caption": null,
                              "Axis": [
                                {
                                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                                  "Title": "Depth (mm)",
                                  "Position": 0,
                                  "Inverted": true,
                                  "CrossesAtZero": false,
                                  "Minimum": null,
                                  "Maximum": null,
                                  "Interval": null
                                },
                                {
                                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                                  "Title": "Volumetric water (mm/mm)",
                                  "Position": 1,
                                  "Inverted": false,
                                  "CrossesAtZero": false,
                                  "Minimum": null,
                                  "Maximum": null,
                                  "Interval": null
                                }
                              ],
                              "LegendPosition": 3,
                              "LegendOrientation": 0,
                              "AnnotationLocation": 0,
                              "DisabledSeries": null,
                              "LegendOutsideGraph": false,
                              "Name": "Graph",
                              "Children": [
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 2,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -3479297,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "[Soil].DUL",
                                  "Y2FieldName": "[Soil].DepthMidPoints",
                                  "ShowInLegend": false,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL15",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16711681,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL151",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -32768,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil]l.DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": false,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL152",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -65536,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].AirDry",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "Air dry",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16776961,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].DUL",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "DUL",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16760704,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].SAT",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "SAT",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "[Clock].Today.Month",
                            "[Clock].Today.Year",
                            "sum([Soil].SoilNitrogen.NO3.kgha) as NO3",
                            "sum([Soil].SoilWater.SWmm) as SWDep",
                            "[Rye1].AboveGroundWt",
                            "[Rye2].AboveGroundWt",
                            "[Rye1].HarvestedWt",
                            "[Rye2].HarvestedWt",
                            "([Rye1].HarvestedWt + [Rye2].HarvestedWt) as Yield",
                            "[PropRye1].Script.PropYieldRye1 as PropYieldRye1",
                            "([Fertiliser].NitrogenApplied-( 10.0 * [CutRotation].Script.NReturnedInUrine)) as RealFert",
                            "[Rye2].RootDepth",
                            "[Rye2].GlfWaterSupply",
                            "sum([Rye2].WaterAvailable)",
                            "sum([Rye2].WaterUptake)",
                            "[Rye1].GlfWaterSupply"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "AgPastureTestRootDepthDifferential",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "05 A Ryegrass and White Clover Example",
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "The final test in the single zone set is of a typical ryegrass and white clover pasture.  The white clover has a rooting depth of 150 mm and the ryegrass has roots down to 750 mm deep.  The simulations use a soil with 132 mm of PAW to 750 mm deep in the Lincoln environment which the pasture harvested by cutting down to 1000 kg DM /ha every 21 days with all herbage removed from the paddock. The simulation is run for ten years and in three combinations: no irrigation or fertiliser, irrigation but no fertiliser, and both irrigation and fertiliser. \r\n\r\nThe first graph shows the proportion of the total harvested dry matter that was ryegrass and the next three graphs show the standing dry matter of the white clover (pink) and the total (clover plus ryegrass) sward.  In this deep soil with no irrigation or fertiliser and under a cutting regime, the grass and clover stabilise to about 35% grass and 65% clover.  The soil here allows for reasonable growth in the shallow-rooted clover and the poor nutrient status of the soil (no nutrient returns at all) gives the clover a competitive advantage.  When fertiliser is added to the dry simulation the sward becomes 90% grass (not shown).  With irrigation but no fertiliser, the sward becomes clover dominant (about 70%) but when fertilised the sward swaps to grass-dominant (about 20% clover).  These patterns make sense given the physiological characteristics of the individual plants and suggests that the Runge-Kutta method is a reasonable representation of the competitive processes in the soil.\r\n",
              "Name": "Memo RyegrassWhiteCloverExample",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PropGrass",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Factor",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "PropYieldRyegrass",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Both",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Standing_DryNone",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "WhiteClover.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = '0_DryNone'",
                  "Name": "Clover",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16777216,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "TotalAboveGround",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = '0_DryNone'",
                  "Name": "Total",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Standing_IrrigNone",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "WhiteClover.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = '1_IrrigNone'",
                  "Name": "Clover",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "TotalAboveGround",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = '1_IrrigNone'",
                  "Name": "Total",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 0,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Standing_IrrigFert",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -3376729,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "WhiteClover.AboveGroundWt",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = '2_IrrigFert'",
                  "Name": "Clover",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -11094807,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "RyegrassWhiteCloverExample",
                  "XFieldName": "Date",
                  "YFieldName": "TotalAboveGround",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": true,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Factor] = '2_IrrigFert'",
                  "Name": "Total",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment05",
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": null,
                      "Name": "Factor",
                      "Children": [
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 0"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "0_DryNone",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 0",
                            "[OnOffIrrigation].Script.IrrigOn = 1"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "1_IrrigNone",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Factorial.CompositeFactor, Models",
                          "Specifications": [
                            "[OnOffFertiliser].Script.FertOn = 1",
                            "[OnOffIrrigation].Script.IrrigOn = 1"
                          ],
                          "Paths": null,
                          "Values": null,
                          "Name": "2_IrrigFert",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "IsRunning": false,
                  "Descriptors": null,
                  "Name": "RyegrassWhiteCloverExample",
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "2000-07-01T00:00:00",
                      "End": "2010-06-30T00:00:00",
                      "Name": "Clock",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.Weather, Models",
                      "ConstantsFile": null,
                      "FileName": "%root%\\Examples\\WeatherFiles\\lincoln.met",
                      "ExcelWorkSheetName": null,
                      "Name": "Weather",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Field",
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn fertiliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int FertOn { get; set; }\n\n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount * FertOn, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "FertOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "200"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "15"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "25"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "14"
                                }
                              ],
                              "Name": "OnOffFertiliser",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")]\n        public answerType allowIrrigation { get; set; }\n        \n        [Description(\"Temporary variable to turn fertiliser on (1) or off (0): \")] public int IrrigOn { get; set; }\n\n\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply * IrrigOn);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "IrrigOn",
                                  "Value": "1"
                                },
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "15-Aug"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "30-May"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "75"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "30"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "300"
                                }
                              ],
                              "Name": "OnOffIrrigation",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }\n        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }\n        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }\n        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }\n        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }\n        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }\n        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }\n        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }\n        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }\n        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }\n        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }\n        // Description: Pasture DM defoliated today\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }\n        // Description: Pasture N defoliate today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }\n        // Description: Pasture DM harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }\n        // Description: Pasture N harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }\n        // Description: Pasture DM removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }\n        // Description: Pasture N removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }\n        // Description: Residue DM returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }\n        // Description: Residue N returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }\n        // Description: Harvested N returned as dung (SurfaceOM)\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }\n        // Description: Harvested N returned as urine (urea)\n        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }\n        // Description: Number of days after last defoliation\n        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) before cut\n        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) after cut\n        \n        // - Internal variables\n        // fraction of harvested Dm to actually remove from field\n        private double fractionDM2Remove = 1.0;\n        // flag whether defoliation is allowed\n        //private bool rotationAllowed = true;\n        // number of days for each defoliation event\n        private int cuttingDuration = 0;\n        // counter for day within each defoliation\n        private int daysCutting = 0;\n        // type of interval (Fixed or target)\n        private string intervalType;\n        // total herbage to remove in g/m2 per day\n        private double herbageToRemove;\n        // type of DM amount (ResidualDM or DMToRemove)\n        private string amountType;\n        // auxiliary flag for defoliation\n        private bool aCutHasHappened = false;\n\n        // - Event to add residue or dung to surface OM\n        public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n\n            // reset variables\n            DaysAfterCut = 0;\n            resetVariables();\n            cuttingDuration = DurationOfCut;\n            \n            // get the type of amount given\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\n                amountType = \"SetResidueAmount\";\n            else\n                amountType = \"SetRemoveAmount\";\n\n            // get the type of amount given\n            if (IntervalType == rotationIntervalTypes.FixedInterval)\n                intervalType = \"Fixed\";\n            else\n                intervalType = \"Target\";\n\n            // make sure that rotation starts when startDate < simulationStartDay\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\n                CutRotationStartDate = Clock.Today;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (rotationAllowed)\n            {\n                if (Clock.Today == CutRotationStartDate)\n                    DaysAfterCut = CutInterval;\n\n                bool SwardIsAlive = false;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                {\n                    if (species.IsAlive)\n                        SwardIsAlive = true;\n                }\n                \n                // Check whether we can defoliate\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))\n                {\n                    // Check whether we should start a defoliation\n                    if (DaysAfterCut >= (CutInterval - 1))\n                    {\n                        Graze(AmountGiven, amountType, DurationOfCut);\n                    }\n                }\n            }\n\n            // Check whether we need to continue cutting\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\n            {\n                // reset outputs\n                resetVariables();\n\n                removeDM(herbageToRemove);\n                returnExcreta();\n                daysCutting += 1;\n                if (daysCutting == cuttingDuration)\n                {\n                    PostHarvestDM = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        PostHarvestDM += species.Standing.Wt;\n                }\n            }\n\n            // reset outputs\n            if (daysCutting < 0)\n            {\n                resetVariables();\n                daysCutting = 0;\n            }\n        }\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            // Check whether a cutting has finished\n            if (daysCutting == cuttingDuration)\n            {\n                aCutHasHappened = true;\n                daysCutting = -1;\n            }\n\n            // Increase the counter for days after cutting\n            if (aCutHasHappened && (daysCutting == 0))\n                DaysAfterCut += 1;\n        }\n\n        public enum removeAmountTypes\n        {\n            /// <summary>Setting DM amount to remove</summary>\n            DMToRemove,\n            /// <summary>Setting residual DM amount</summary>\n            ResidualDM\n        }\n\n        public enum rotationIntervalTypes\n        {\n            /// <summary>Setting a fixed interval</summary>\n            FixedInterval,\n            /// <summary>Setting a target (minimum) inteval</summary>\n            TargetInterval\n        }\n\n        public enum removeDMTypes\n        {\n            /// <summary>Remove all DM</summary>\n            RemoveAll,\n            /// <summary>Remove no DM</summary>\n            RemoveNone,\n            /// <summary>Remove a fraction based on digestibility</summary>\n            BasedOnDigestibility\n        }\n\n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n        \n                \n        // Resets the values of all outputs\n        private void resetVariables()\n        {\n            DefoliatedWt = 0.0;\n            DefoliatedN = 0.0;\n            HarvestedWt = 0.0;\n            HarvestedN = 0.0;\n            RemovedWt = 0.0;\n            RemovedN = 0.0;\n            ReturnedWt = 0.0;\n            ReturnedN = 0.0;\n            NReturnedInDung = 0.0;\n            NReturnedInUrine = 0.0;\n        }\n\n        // Description: Perform the basic calculations for defoliation\n        public void Graze(double amountDM, string amountType, int duration)\n        {\n            // Get the existing plant amount\n            PreHarvestDM = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                PreHarvestDM += species.Standing.Wt;\n            \n            // Check the amount to remove and print some info\n            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))\n            {\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = amountDM / duration;\n            }\n            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))\n            {\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\n            }\n            else\n            {\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);\n                if (intervalType == \"Fixed\")\n                    DaysAfterCut = -duration;\n                return;\n            }\n\n            cuttingDuration = duration;\n            // Preform first defoliation\n            removeDM(herbageToRemove);\n            returnExcreta();\n            daysCutting = 1;\n            DaysAfterCut = 0;\n            if (daysCutting == cuttingDuration)\n            {\n                PostHarvestDM = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    PostHarvestDM += species.Standing.Wt;\n            }\n        }\n\n        // Do the DM removal\n        private void removeDM(double removeAmount)\n        {\n            double existingWt = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                existingWt += species.Harvestable.Wt;\n\n\n            // Check whether we harvest anything\n            if (existingWt >= removeAmount)\n            {\n                foreach (AgPasture.PastureSpecies species in Pasture)\n                {\n                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;\n                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\n                }\n                \n                // get total harvested\n                DefoliatedWt = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedWt += species.HarvestedWt;\n                DefoliatedN = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedN += species.HarvestedN;\n                HarvestedWt = DefoliatedWt;\n                HarvestedN = DefoliatedN;\n\n                // get amounts actually removed from field and that to be returned (dung/urine)\n                if (DMRemoveType == removeDMTypes.RemoveAll)\n                    fractionDM2Remove = 1.0;\n                else if (DMRemoveType == removeDMTypes.RemoveNone)\n                    fractionDM2Remove = 0.0;\n                else\n                {\n                    fractionDM2Remove = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;\n                    fractionDM2Remove /= removeAmount;\n                }\n                \n                RemovedWt = HarvestedWt * fractionDM2Remove;\n                RemovedN = HarvestedN * FractionN2Remove;\n                ReturnedWt = HarvestedWt - RemovedWt;\n                ReturnedN = HarvestedN - RemovedN;\n                NReturnedInDung = ReturnedN * ProportionN2Dung;\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\n            }\n        }\n\n        // Return dung and urine\n        private void returnExcreta()\n        {\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\n            {\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\n                float[] dltdm = new float[] { (Single)ReturnedWt };\n                float[] dltn = new float[] { (Single)NReturnedInDung };\n                float[] dltp = new float[] { 0 };\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\n\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\n                BiomassDung.dm_type = type;\n                BiomassDung.dlt_crop_dm = dltdm;\n                BiomassDung.dlt_dm_n = dltn;\n                BiomassDung.dlt_dm_p = dltp;\n                BiomassDung.fraction_to_residue = fraction;\n                BiomassRemoved.Invoke(BiomassDung);\n            }\n\n            if (NReturnedInUrine > 0.0)\n            {\n                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "1900-07-01"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "2100-12-31"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "21"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "1000"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"kg/kg\")] public double PropYieldRye1 { get; set; }\n        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye1 { get; set; }\n        [JsonIgnore][Units(\"kg/ha\")] public double YieldRye2 { get; set; }\n        \n        // - Internal variables\n        //private double fractionDM2Remove = 1.0;\n\n        // - Event to add residue or dung to surface OM\n        //public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n            YieldRye1 = 0.0;\n            YieldRye2 = 0.0;\n            PropYieldRye1 = 0.0;\n        }\n        \n\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                //Pasture.Add(species);\n            }\n            YieldRye1 += Pasture[0].HarvestedWt;\n            YieldRye2 += Pasture[1].HarvestedWt;\n            if ((YieldRye1 + YieldRye2) > 0.0)\n                PropYieldRye1 = YieldRye1 / (YieldRye1 + YieldRye2);\n        }\n\n    }\n}\n",
                              "Parameters": [],
                              "Name": "PropRye1",
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 1000.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "ResourceName": "SurfaceOrganicMatter",
                          "Name": "SurfaceOrganicMatter",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 0.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "ResourceName": "Fertiliser",
                          "Name": "Fertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "InitialShootDM": 1500.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "ResourceName": "AGPRyegrass",
                          "Name": "AGPRyegrass",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "InitialShootDM": 500.0,
                          "InitialRootDM": 150.0,
                          "InitialRootDepth": 350.0,
                          "ResourceName": "AGPWhiteClover",
                          "Name": "AGPWhiteClover",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": null,
                          "Site": null,
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "NO3N": [
                                27.3,
                                11.4,
                                0.25157232704402605,
                                1.9532908704883236,
                                1.9166666666666667,
                                0.20833333333333334
                              ],
                              "NH4N": [
                                4.3,
                                7.6,
                                4.1,
                                2.7,
                                2.4,
                                0.1
                              ],
                              "PH": [
                                6.6,
                                6.2,
                                5.7,
                                5.5,
                                5.5,
                                5.5
                              ],
                              "CL": null,
                              "EC": null,
                              "ESP": null,
                              "LabileP": null,
                              "UnavailableP": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.InitialWater, Models",
                              "PercentMethod": 1,
                              "FractionFull": 1.0,
                              "DepthWetSoil": "NaN",
                              "RelativeTo": null,
                              "Name": "Initial water",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "ParticleSizeClay": null,
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.0,
                                1.0,
                                1.59,
                                1.57,
                                1.6,
                                1.6
                              ],
                              "AirDry": [
                                0.05,
                                0.05,
                                0.16,
                                0.17,
                                0.17,
                                0.12
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.16,
                                0.17,
                                0.17,
                                0.12
                              ],
                              "DUL": [
                                0.27,
                                0.27,
                                0.29,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "SAT": [
                                0.42,
                                0.4,
                                0.36,
                                0.37,
                                0.37,
                                0.32
                              ],
                              "KS": [
                                4832.0,
                                389.0,
                                16.0,
                                16.0,
                                98.0,
                                98.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye1Soil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.16,
                                    0.17,
                                    0.17,
                                    0.12
                                  ],
                                  "KL": [
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.06,
                                    0.0,
                                    0.0
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0,
                                    0.0,
                                    0.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "Rye2Soil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 9.0,
                              "SummerCona": 4.4,
                              "WinterDate": "1-Apr",
                              "WinterU": 9.0,
                              "WinterCona": 4.4,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.4,
                              "Salb": 0.18,
                              "CN2Bare": 68.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": "NaN",
                              "CatchmentArea": "NaN",
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "SWCON": [
                                0.55,
                                0.55,
                                0.55,
                                0.55,
                                0.55,
                                0.55
                              ],
                              "KLAT": null,
                              "ResourceName": "WaterBalance",
                              "Name": "SoilWater",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogen, Models",
                              "fom_types": [
                                "default",
                                "manure",
                                "mucuna",
                                "lablab",
                                "shemp",
                                "stable"
                              ],
                              "fract_carb": [
                                0.2,
                                0.3,
                                0.54,
                                0.57,
                                0.45,
                                0.0
                              ],
                              "fract_cell": [
                                0.7,
                                0.3,
                                0.37,
                                0.37,
                                0.47,
                                0.1
                              ],
                              "fract_lign": [
                                0.1,
                                0.4,
                                0.09,
                                0.06,
                                0.08,
                                0.9
                              ],
                              "NPartitionApproach": 0,
                              "Name": "SoilNitrogen",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilNitrogenNO3, Models",
                                  "Name": "NO3",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenNH4, Models",
                                  "Name": "NH4",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenUrea, Models",
                                  "Name": "Urea",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 30.0,
                              "Thickness": [
                                100.0,
                                200.0,
                                300.0,
                                300.0,
                                300.0,
                                300.0
                              ],
                              "Carbon": [
                                1.82,
                                1.47,
                                1.2,
                                1.03,
                                0.47,
                                0.47
                              ],
                              "SoilCNRatio": [
                                11.5,
                                11.5,
                                11.5,
                                11.5,
                                11.5,
                                11.5
                              ],
                              "FBiom": [
                                0.025,
                                0.025,
                                0.015,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "FInert": [
                                0.3,
                                0.4,
                                0.75,
                                0.9,
                                0.96,
                                0.96
                              ],
                              "FOM": [
                                1243.9310541346904,
                                833.8319214727269,
                                457.61666105087295,
                                251.1453484552152,
                                137.83148958311097,
                                75.64352530338392
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Graph, Models",
                              "Caption": null,
                              "Axis": [
                                {
                                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                                  "Title": "Depth (mm)",
                                  "Position": 0,
                                  "Inverted": true,
                                  "CrossesAtZero": false,
                                  "Minimum": null,
                                  "Maximum": null,
                                  "Interval": null
                                },
                                {
                                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                                  "Title": "Volumetric water (mm/mm)",
                                  "Position": 1,
                                  "Inverted": false,
                                  "CrossesAtZero": false,
                                  "Minimum": null,
                                  "Maximum": null,
                                  "Interval": null
                                }
                              ],
                              "LegendPosition": 3,
                              "LegendOrientation": 0,
                              "AnnotationLocation": 0,
                              "DisabledSeries": null,
                              "LegendOutsideGraph": false,
                              "Name": "Graph",
                              "Children": [
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 2,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -3479297,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "[Soil].DUL",
                                  "Y2FieldName": "[Soil].DepthMidPoints",
                                  "ShowInLegend": false,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL15",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16711681,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL151",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -32768,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].LL15",
                                  "YFieldName": "[Soil]l.DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": false,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "LL152",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -65536,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].AirDry",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "Air dry",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16776961,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].DUL",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "DUL",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Series, Models",
                                  "Type": 1,
                                  "XAxis": 1,
                                  "YAxis": 0,
                                  "ColourArgb": -16760704,
                                  "FactorToVaryColours": null,
                                  "FactorToVaryMarkers": null,
                                  "FactorToVaryLines": null,
                                  "Marker": 11,
                                  "MarkerSize": 0,
                                  "Line": 0,
                                  "LineThickness": 0,
                                  "TableName": null,
                                  "XFieldName": "[Soil].SAT",
                                  "YFieldName": "[Soil].DepthMidPoints",
                                  "X2FieldName": "",
                                  "Y2FieldName": "",
                                  "ShowInLegend": true,
                                  "IncludeSeriesNameInLegend": false,
                                  "Cumulative": false,
                                  "CumulativeX": false,
                                  "Filter": null,
                                  "Name": "SAT",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "sum([Soil].SoilNitrogen.NO3.kgha) as NO3",
                            "sum([Soil].SoilWater.SWmm) as SWDep",
                            "[AGPRyegrass].AboveGroundWt",
                            "[AGPWhiteClover].AboveGroundWt",
                            "[AGPRyegrass].AboveGroundWt + [AGPWhiteClover].AboveGroundWt as TotalAboveGround",
                            "[AGPRyegrass].HarvestedWt",
                            "[AGPWhiteClover].HarvestedWt",
                            "([AGPRyegrass].HarvestedWt + [AGPWhiteClover].HarvestedWt) as Yield",
                            "[PropRye1].Script.PropYieldRye1 as PropYieldRyegrass",
                            "([Fertiliser].NitrogenApplied-( 10.0 * [CutRotation].Script.NReturnedInUrine)) as RealFert"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "RyegrassWhiteCloverExample",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    },
    {
      "$type": "Models.Core.Folder, Models",
      "ShowInDocs": true,
      "GraphsPerPage": 6,
      "Name": "Conceptual Tests of Crops with Roots Across Zones",
      "Children": [
        {
          "$type": "Models.Memo, Models",
          "Text": "The series of test and simulations in this section test the performance of SoilArbitrator when there are plants with roots spread across zones.  All of these tests are in a uniform soil with lots of soil water storage but no source of organic N.  The climate is a uniform or controlled environment.  The plant is a ryegrass.\r\n\r\nThe first three series demonstrate two-zone simulations with the ryegrass in Zone0 and a bare soil in Zone1.  The Zone0 ryegrass can spread a variable proportion of its roots into Zone1.\r\n\r\nThe last two simulations are each three zones and a ryegrass in each zone.  The ryegrass in the central zone can spread roots into its neighbours but the ryegrasses in the outer zones can access only their ‘home’ zones.  The simulations start with either uniform mineral N across the zones or with increased N in Zone0.\r\n",
          "Name": "Overview",
          "Children": [],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "06 Test With No Stress",
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "The conditions for this series of simulations are: \r\n\r\n•\ta controlled environment with 25 MJ /m2 solar radiation, 15 C minimum and 25 C maximum air temperature, no rainfall; \r\n\r\n•\ta uniform soil with 210 mm of PAW to 600 mm deep; \r\n\r\n•\tthe soil has no organic matter and there is no surface organic matter;\r\n\r\n•\tZone0 has a ryegrass with roots to 600 mm deep; \r\n\r\n•\tZone 1 has no plant in the zone;\r\n\r\n•\tthe ryegrass is trimmed every day to maintain 2250 kg DM /ha with all herbage removed from the simulation; and\r\n\r\n•\twater and fertiliser are applied every day sufficient to maintain conditions of no water or N stress.\r\n\r\n\r\nThe series of simulations add some roots from the ryegrass in Zone0 into Zone1 such that Zone1 contains 0, 0.25, 0.5, 0.75 or 1.0 of the roots in Zone0 so that the ryegrass can meet its water and N demand from some combination of the resources in the two zones.  Note that there is no canopy cover in Zone1 and therefore evaporation from the soil surface will be greater than that in Zone0.  The expectation is that as a greater proportion of the roots are in Zone1, that:\r\n\r\n•\tthe irrigation need in Zone0 will decrease and that in Zone 1 will increase and possibly exceed that in Zone0 when there is an even spread of roots (because of the expected additional evaporation of soil water without canopy cover in Zone1)\r\n\r\n•\tthe amount of fertiliser added should decrease in Zone0 and increase in Zone1 as more rots are spread into Zone1\r\n\r\nThe graphs show that these expectations are met.\r\n",
              "Name": "Memo TestWithNoStress",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2600.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PlantWt",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "PlantMass",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Harvested",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "Harvested",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterDemand",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Demand",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Demand",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterUptake",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Uptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Uptake",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStress",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "glfWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NStress",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "glfNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWaterZone0",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Water",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWaterZone1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Water",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 150.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogenZone1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Nitrogen",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 150.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogenZone0",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Nitrogen",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2000.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationAppliedZone0",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Irrigation",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2000.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationAppliedZone1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Irrigation",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2300.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserAppliedZone0",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Fertiliser",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2300.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserAppliedZone1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNoStress",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Fertiliser",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment06",
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": "[DoRootsSingle].Script.Zone1Prop=0.0,0.25,0.5,0.75,1.0",
                      "Name": "NumOfZones",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "IsRunning": false,
                  "Descriptors": null,
                  "Name": "TestWithNoStress",
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "2000-01-01T00:00:00",
                      "End": "2000-12-31T00:00:00",
                      "Name": "Clock",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.ControlledEnvironment, Models",
                      "MaxT": 25.0,
                      "MinT": 15.0,
                      "Rain": 0.0,
                      "Radn": 25.0,
                      "PanEvap": 0.0,
                      "VP": 17.0,
                      "Wind": 3.0,
                      "CO2": 350.0,
                      "AirPressure": 1010.0,
                      "DiffuseFraction": 0.0,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "DayLength": 12.0,
                      "SunRise": 0.0,
                      "SunSet": 0.0,
                      "Name": "ControlledEnvironment",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Zone0",
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing System.Linq;\nusing System;\nusing System.Collections.Generic;\nusing System.Xml.Serialization;\nusing Models.Core;\nusing Models.PMF;\nusing APSIM.Shared.Utilities;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Root depth in the plant's zone (mm): \")]  public double Zone0Depth { get; set; }\n        [Description(\"Root mass  in the plant's zone (mm): \")]  public double Zone0Mass { get; set; }\n\n        [Description(\"Name of the first zone: \")] public string Zone1Name { get; set; }\n        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone1Prop { get; set; }\n\n        [Description(\"Name of the second zone: \")] public string Zone2Name { get; set; }\n        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone2Prop { get; set; }\n\n        [Description(\"Name of the third zone: \")] public string Zone3Name { get; set; }\n        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone3Prop { get; set; }\n\n        // - Outputs from this manager\n\n        // - Internal variables\n\n        [EventSubscribe(\"FinalInitialise\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            int SpeciesNum = 0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                SpeciesNum += 1;\n                if (SpeciesNum == 1)\n                {\n                    //double test = species.RootWt;\n                    if (Zone1Prop > 0)\n                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone1Prop * Zone0Depth, rootDM: Zone1Prop * Zone0Mass);\n                    if (Zone2Prop > 0)\n                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone2Prop * Zone0Depth, rootDM: Zone2Prop * Zone0Mass);\n                    if (Zone3Prop > 0)\n                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone3Prop * Zone0Depth, rootDM: Zone3Prop * Zone0Mass);\n                }\n            }\n\n            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);\n            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "Zone0Depth",
                                  "Value": "600"
                                },
                                {
                                  "Key": "Zone0Mass",
                                  "Value": "500"
                                },
                                {
                                  "Key": "Zone1Name",
                                  "Value": "Zone1"
                                },
                                {
                                  "Key": "Zone1Prop",
                                  "Value": "0"
                                },
                                {
                                  "Key": "Zone2Name",
                                  "Value": "Zone2"
                                },
                                {
                                  "Key": "Zone2Prop",
                                  "Value": "0"
                                },
                                {
                                  "Key": "Zone3Name",
                                  "Value": "Zone3"
                                },
                                {
                                  "Key": "Zone3Prop",
                                  "Value": "0"
                                }
                              ],
                              "Name": "DoRootsSingle",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn ferliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "600"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "50"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "AutomaticFertiliser",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }\n        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool IrrigationIsAlwaysAllowed { get; set; }\n        \n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n            if (allowIrrigationAll == answerType.yes)\n                IrrigationIsAlwaysAllowed = true; \n\n\n\n\n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if (IrrigationIsAlwaysAllowed)\n                CropIsActive = true;  // might not be but we don't care\n            else if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "allowIrrigationAll",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "1-Jan"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "31-Dec"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "100"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "5"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "600"
                                }
                              ],
                              "Name": "AutomaticIrrigation",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }\n        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }\n        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }\n        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }\n        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }\n        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }\n        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }\n        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }\n        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }\n        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }\n        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }\n        // Description: Pasture DM defoliated today\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }\n        // Description: Pasture N defoliate today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }\n        // Description: Pasture DM harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }\n        // Description: Pasture N harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }\n        // Description: Pasture DM removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }\n        // Description: Pasture N removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }\n        // Description: Residue DM returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }\n        // Description: Residue N returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }\n        // Description: Harvested N returned as dung (SurfaceOM)\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }\n        // Description: Harvested N returned as urine (urea)\n        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }\n        // Description: Number of days after last defoliation\n        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) before cut\n        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) after cut\n        \n        // - Internal variables\n        // fraction of harvested Dm to actually remove from field\n        private double fractionDM2Remove = 1.0;\n        // flag whether defoliation is allowed\n        //private bool rotationAllowed = true;\n        // number of days for each defoliation event\n        private int cuttingDuration = 0;\n        // counter for day within each defoliation\n        private int daysCutting = 0;\n        // type of interval (Fixed or target)\n        private string intervalType;\n        // total herbage to remove in g/m2 per day\n        private double herbageToRemove;\n        // type of DM amount (ResidualDM or DMToRemove)\n        private string amountType;\n        // auxiliary flag for defoliation\n        private bool aCutHasHappened = false;\n\n        // - Event to add residue or dung to surface OM\n        public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n\n            // reset variables\n            DaysAfterCut = 0;\n            resetVariables();\n            cuttingDuration = DurationOfCut;\n            \n            // get the type of amount given\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\n                amountType = \"SetResidueAmount\";\n            else\n                amountType = \"SetRemoveAmount\";\n\n            // get the type of amount given\n            if (IntervalType == rotationIntervalTypes.FixedInterval)\n                intervalType = \"Fixed\";\n            else\n                intervalType = \"Target\";\n\n            // make sure that rotation starts when startDate < simulationStartDay\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\n                CutRotationStartDate = Clock.Today;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (rotationAllowed)\n            {\n                if (Clock.Today == CutRotationStartDate)\n                    DaysAfterCut = CutInterval;\n\n                bool SwardIsAlive = false;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                {\n                    if (species.IsAlive)\n                        SwardIsAlive = true;\n                }\n                \n                // Check whether we can defoliate\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))\n                {\n                    // Check whether we should start a defoliation\n                    if (DaysAfterCut >= (CutInterval - 1))\n                    {\n                        Graze(AmountGiven, amountType, DurationOfCut);\n                    }\n                }\n            }\n\n            // Check whether we need to continue cutting\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\n            {\n                // reset outputs\n                resetVariables();\n\n                removeDM(herbageToRemove);\n                returnExcreta();\n                daysCutting += 1;\n                if (daysCutting == cuttingDuration)\n                {\n                    PostHarvestDM = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        PostHarvestDM += species.Standing.Wt;\n                }\n            }\n\n            // reset outputs\n            if (daysCutting < 0)\n            {\n                resetVariables();\n                daysCutting = 0;\n            }\n        }\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            // Check whether a cutting has finished\n            if (daysCutting == cuttingDuration)\n            {\n                aCutHasHappened = true;\n                daysCutting = -1;\n            }\n\n            // Increase the counter for days after cutting\n            if (aCutHasHappened && (daysCutting == 0))\n                DaysAfterCut += 1;\n        }\n\n        public enum removeAmountTypes\n        {\n            /// <summary>Setting DM amount to remove</summary>\n            DMToRemove,\n            /// <summary>Setting residual DM amount</summary>\n            ResidualDM\n        }\n\n        public enum rotationIntervalTypes\n        {\n            /// <summary>Setting a fixed interval</summary>\n            FixedInterval,\n            /// <summary>Setting a target (minimum) inteval</summary>\n            TargetInterval\n        }\n\n        public enum removeDMTypes\n        {\n            /// <summary>Remove all DM</summary>\n            RemoveAll,\n            /// <summary>Remove no DM</summary>\n            RemoveNone,\n            /// <summary>Remove a fraction based on digestibility</summary>\n            BasedOnDigestibility\n        }\n\n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n        \n                \n        // Resets the values of all outputs\n        private void resetVariables()\n        {\n            DefoliatedWt = 0.0;\n            DefoliatedN = 0.0;\n            HarvestedWt = 0.0;\n            HarvestedN = 0.0;\n            RemovedWt = 0.0;\n            RemovedN = 0.0;\n            ReturnedWt = 0.0;\n            ReturnedN = 0.0;\n            NReturnedInDung = 0.0;\n            NReturnedInUrine = 0.0;\n        }\n\n        // Description: Perform the basic calculations for defoliation\n        public void Graze(double amountDM, string amountType, int duration)\n        {\n            // Get the existing plant amount\n            PreHarvestDM = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                PreHarvestDM += species.Standing.Wt;\n            \n            // Check the amount to remove and print some info\n            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))\n            {\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = amountDM / duration;\n            }\n            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))\n            {\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\n            }\n            else\n            {\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);\n                if (intervalType == \"Fixed\")\n                    DaysAfterCut = -duration;\n                return;\n            }\n\n            cuttingDuration = duration;\n            // Preform first defoliation\n            removeDM(herbageToRemove);\n            returnExcreta();\n            daysCutting = 1;\n            DaysAfterCut = 0;\n            if (daysCutting == cuttingDuration)\n            {\n                PostHarvestDM = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    PostHarvestDM += species.Standing.Wt;\n            }\n        }\n\n        // Do the DM removal\n        private void removeDM(double removeAmount)\n        {\n            double existingWt = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                existingWt += species.Harvestable.Wt;\n\n\n            // Check whether we harvest anything\n            if (existingWt >= removeAmount)\n            {\n                foreach (AgPasture.PastureSpecies species in Pasture)\n                {\n                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;\n                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\n                }\n                \n                // get total harvested\n                DefoliatedWt = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedWt += species.HarvestedWt;\n                DefoliatedN = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedN += species.HarvestedN;\n                HarvestedWt = DefoliatedWt;\n                HarvestedN = DefoliatedN;\n\n                // get amounts actually removed from field and that to be returned (dung/urine)\n                if (DMRemoveType == removeDMTypes.RemoveAll)\n                    fractionDM2Remove = 1.0;\n                else if (DMRemoveType == removeDMTypes.RemoveNone)\n                    fractionDM2Remove = 0.0;\n                else\n                {\n                    fractionDM2Remove = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;\n                    fractionDM2Remove /= removeAmount;\n                }\n                \n                RemovedWt = HarvestedWt * fractionDM2Remove;\n                RemovedN = HarvestedN * FractionN2Remove;\n                ReturnedWt = HarvestedWt - RemovedWt;\n                ReturnedN = HarvestedN - RemovedN;\n                NReturnedInDung = ReturnedN * ProportionN2Dung;\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\n            }\n        }\n\n        // Return dung and urine\n        private void returnExcreta()\n        {\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\n            {\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\n                float[] dltdm = new float[] { (Single)ReturnedWt };\n                float[] dltn = new float[] { (Single)NReturnedInDung };\n                float[] dltp = new float[] { 0 };\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\n\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\n                BiomassDung.dm_type = type;\n                BiomassDung.dlt_crop_dm = dltdm;\n                BiomassDung.dlt_dm_n = dltn;\n                BiomassDung.dlt_dm_p = dltp;\n                BiomassDung.fraction_to_residue = fraction;\n                BiomassRemoved.Invoke(BiomassDung);\n            }\n\n            if (NReturnedInUrine > 0.0)\n            {\n                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "1900-07-01"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "2100-12-31"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "1"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "2250"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 1.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "ResourceName": "Fertiliser",
                          "Name": "Fertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 0.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "ResourceName": "SurfaceOrganicMatter",
                          "Name": "SurfaceOrganicMatter",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": "Stores lots of water",
                          "Site": "Made up",
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "NO3N": [
                                15.0,
                                15.0,
                                15.0,
                                15.0
                              ],
                              "NH4N": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "CL": null,
                              "EC": null,
                              "ESP": null,
                              "LabileP": null,
                              "UnavailableP": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "ParticleSizeClay": [
                                60.0,
                                60.0,
                                60.0,
                                60.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.3,
                                1.3,
                                1.3
                              ],
                              "AirDry": [
                                0.05,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "DUL": [
                                0.45,
                                0.45,
                                0.45,
                                0.45
                              ],
                              "SAT": [
                                0.5,
                                0.5,
                                0.5,
                                0.5
                              ],
                              "KS": [
                                500.0,
                                500.0,
                                500.0,
                                500.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 6.0,
                              "WinterCona": 3.5,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "SWCON": [
                                0.3,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "ResourceName": "WaterBalance",
                              "Name": "SoilWater",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogen, Models",
                              "fom_types": [
                                "default",
                                "manure",
                                "mucuna",
                                "lablab",
                                "shemp",
                                "stable"
                              ],
                              "fract_carb": [
                                0.2,
                                0.3,
                                0.54,
                                0.57,
                                0.45,
                                0.0
                              ],
                              "fract_cell": [
                                0.7,
                                0.3,
                                0.37,
                                0.37,
                                0.47,
                                0.1
                              ],
                              "fract_lign": [
                                0.1,
                                0.4,
                                0.09,
                                0.06,
                                0.08,
                                0.9
                              ],
                              "NPartitionApproach": 0,
                              "Name": "SoilNitrogen",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilNitrogenNO3, Models",
                                  "Name": "NO3",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenNH4, Models",
                                  "Name": "NH4",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenUrea, Models",
                                  "Name": "Urea",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "Carbon": [
                                0.01,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FOM": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.InitialWater, Models",
                              "PercentMethod": 1,
                              "FractionFull": 0.95,
                              "DepthWetSoil": "NaN",
                              "RelativeTo": null,
                              "Name": "Initial water",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "InitialShootDM": 1500.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "ResourceName": "AGPRyegrass",
                          "Name": "AGPRyegrass",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "[AGPRyegrass].AboveGroundWt as PlantMass",
                            "[AGPRyegrass].HarvestedWt as Harvested",
                            "[AGPRyegrass].WaterDemand as SW_Demand",
                            "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                            "[AGPRyegrass].GlfWaterSupply as glfWater",
                            "[AGPRyegrass].GlfNSupply as glfNitrogen",
                            "sum([Soil].SoilWater.SWmm) as SoilWater",
                            "sum([Soil].SoilNitrogen.NH4.kgha)+sum([Soil].SoilNitrogen.NO3.kgha) as SoilNitrogen",
                            "[Irrigation].IrrigationApplied as Irrigation",
                            "[Fertiliser].NitrogenApplied as Fertiliser"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "TestWithNoStress",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Zone1",
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn ferliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "600"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "50"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "AutomaticFertiliser",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }\n        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool IrrigationIsAlwaysAllowed { get; set; }\n        \n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n            if (allowIrrigationAll == answerType.yes)\n                IrrigationIsAlwaysAllowed = true; \n\n\n\n\n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if (IrrigationIsAlwaysAllowed)\n                CropIsActive = true;  // might not be but we don't care\n            else if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "allowIrrigationAll",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "1-Jan"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "31-Dec"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "100"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "5"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "600"
                                }
                              ],
                              "Name": "AutomaticIrrigation",
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 1.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "ResourceName": "Fertiliser",
                          "Name": "Fertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 0.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "ResourceName": "SurfaceOrganicMatter",
                          "Name": "SurfaceOrganicMatter",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": "Stores lots of water",
                          "Site": "Made up",
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "NO3N": [
                                15.0,
                                15.0,
                                15.0,
                                15.0
                              ],
                              "NH4N": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "CL": null,
                              "EC": null,
                              "ESP": null,
                              "LabileP": null,
                              "UnavailableP": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "ParticleSizeClay": [
                                60.0,
                                60.0,
                                60.0,
                                60.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.3,
                                1.3,
                                1.3
                              ],
                              "AirDry": [
                                0.05,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "DUL": [
                                0.45,
                                0.45,
                                0.45,
                                0.45
                              ],
                              "SAT": [
                                0.5,
                                0.5,
                                0.5,
                                0.5
                              ],
                              "KS": [
                                500.0,
                                500.0,
                                500.0,
                                500.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 6.0,
                              "WinterCona": 3.5,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "SWCON": [
                                0.3,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "ResourceName": "WaterBalance",
                              "Name": "SoilWater",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogen, Models",
                              "fom_types": [
                                "default",
                                "manure",
                                "mucuna",
                                "lablab",
                                "shemp",
                                "stable"
                              ],
                              "fract_carb": [
                                0.2,
                                0.3,
                                0.54,
                                0.57,
                                0.45,
                                0.0
                              ],
                              "fract_cell": [
                                0.7,
                                0.3,
                                0.37,
                                0.37,
                                0.47,
                                0.1
                              ],
                              "fract_lign": [
                                0.1,
                                0.4,
                                0.09,
                                0.06,
                                0.08,
                                0.9
                              ],
                              "NPartitionApproach": 0,
                              "Name": "SoilNitrogen",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilNitrogenNO3, Models",
                                  "Name": "NO3",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenNH4, Models",
                                  "Name": "NH4",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenUrea, Models",
                                  "Name": "Urea",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "Carbon": [
                                0.01,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FOM": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.InitialWater, Models",
                              "PercentMethod": 1,
                              "FractionFull": 0.95,
                              "DepthWetSoil": "NaN",
                              "RelativeTo": null,
                              "Name": "Initial water",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "sum([Soil].SoilWater.SWmm) as SoilWater",
                            "sum([Soil].SoilNitrogen.NH4.kgha)+sum([Soil].SoilNitrogen.NO3.kgha) as SoilNitrogen",
                            "[Irrigation].IrrigationApplied as Irrigation",
                            "[Fertiliser].NitrogenApplied as Fertiliser"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "TestWithNoStress",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "07 Test With Water Stress",
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This series of simulations are as for the ‘No Stress’ series except there is no irrigation (fertiliser remains turned on).  There is also no rainfall so this is a run-down experiment.  The expectation is that as more roots are spread into Zone1 that:\r\n•\tThe plant can access more water so more dry matter will be harvested and, later on when there is insufficient stored soil water, senescence will be slower;\r\n\r\n•\tWater demand and water uptake will be maintained for longer;\r\n\r\n•\tWater stress will be later and less severe for a while;\r\n\r\n•\tThere will be no N stress because fertiliser is applied as needed;\r\n\r\n•\tThe soil water in Zone0 will be depleted more slowly while the soil water in Zone1 will be depleted more quickly;\r\n\r\n•\tSoil nitrogen will be unaffected; and \r\n\r\n•\tLess fertiliser will be applied in Zone0 and more in Zone1.\r\n\r\nThese expectations are met.  It seems likely that the fluctuations in soil N storage are due to the size of each fertiliser addition (50 kg N /ha).\r\n",
              "Name": "Memo TestWithWaterStress",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2600.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PlantWt",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "PlantMass",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Harvested",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "Harvested",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterDemand",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Demand",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Demand",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterUptake",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Uptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Uptake",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStress",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "glfWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NStress",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "glfNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWaterZone0",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Water",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWaterZone1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Water",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 150.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogenZone1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Nitrogen",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 150.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogenZone0",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Nitrogen",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2000.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationAppliedZone0",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Irrigation",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2000.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationAppliedZone1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Irrigation",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 300.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserAppliedZone0",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Fertiliser",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 300.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserAppliedZone1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": null,
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithWaterStress",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Fertiliser",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment07",
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": "[DoRootsSingle].Script.Zone1Prop=0.0,0.25,0.5,0.75,1.0",
                      "Name": "NumOfZones",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "IsRunning": false,
                  "Descriptors": null,
                  "Name": "TestWithWaterStress",
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "2000-01-01T00:00:00",
                      "End": "2000-12-31T00:00:00",
                      "Name": "Clock",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.ControlledEnvironment, Models",
                      "MaxT": 25.0,
                      "MinT": 15.0,
                      "Rain": 0.0,
                      "Radn": 25.0,
                      "PanEvap": 0.0,
                      "VP": 17.0,
                      "Wind": 3.0,
                      "CO2": 350.0,
                      "AirPressure": 1010.0,
                      "DiffuseFraction": 0.0,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "DayLength": 12.0,
                      "SunRise": 0.0,
                      "SunSet": 0.0,
                      "Name": "ControlledEnvironment",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Zone0",
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing System.Linq;\nusing System;\nusing System.Collections.Generic;\nusing System.Xml.Serialization;\nusing Models.Core;\nusing Models.PMF;\nusing APSIM.Shared.Utilities;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Root depth in the plant's zone (mm): \")]  public double Zone0Depth { get; set; }\n        [Description(\"Root mass  in the plant's zone (mm): \")]  public double Zone0Mass { get; set; }\n\n        [Description(\"Name of the first zone: \")] public string Zone1Name { get; set; }\n        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone1Prop { get; set; }\n\n        [Description(\"Name of the second zone: \")] public string Zone2Name { get; set; }\n        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone2Prop { get; set; }\n\n        [Description(\"Name of the third zone: \")] public string Zone3Name { get; set; }\n        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone3Prop { get; set; }\n\n        // - Outputs from this manager\n\n        // - Internal variables\n\n        [EventSubscribe(\"FinalInitialise\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            int SpeciesNum = 0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                SpeciesNum += 1;\n                if (SpeciesNum == 1)\n                {\n                    //double test = species.RootWt;\n                    if (Zone1Prop > 0)\n                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone1Prop * Zone0Depth, rootDM: Zone1Prop * Zone0Mass);\n                    if (Zone2Prop > 0)\n                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone2Prop * Zone0Depth, rootDM: Zone2Prop * Zone0Mass);\n                    if (Zone3Prop > 0)\n                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone3Prop * Zone0Depth, rootDM: Zone3Prop * Zone0Mass);\n                }\n            }\n\n            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);\n            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "Zone0Depth",
                                  "Value": "600"
                                },
                                {
                                  "Key": "Zone0Mass",
                                  "Value": "500"
                                },
                                {
                                  "Key": "Zone1Name",
                                  "Value": "Zone1"
                                },
                                {
                                  "Key": "Zone1Prop",
                                  "Value": "0"
                                },
                                {
                                  "Key": "Zone2Name",
                                  "Value": "Zone2"
                                },
                                {
                                  "Key": "Zone2Prop",
                                  "Value": "0"
                                },
                                {
                                  "Key": "Zone3Name",
                                  "Value": "Zone3"
                                },
                                {
                                  "Key": "Zone3Prop",
                                  "Value": "0"
                                }
                              ],
                              "Name": "DoRootsSingle",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn ferliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "600"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "50"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "AutomaticFertiliser",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }\n        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool IrrigationIsAlwaysAllowed { get; set; }\n        \n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n            if (allowIrrigationAll == answerType.yes)\n                IrrigationIsAlwaysAllowed = true; \n\n\n\n\n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if (IrrigationIsAlwaysAllowed)\n                CropIsActive = true;  // might not be but we don't care\n            else if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "no"
                                },
                                {
                                  "Key": "allowIrrigationAll",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "1-Jan"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "31-Dec"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "100"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "5"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "600"
                                }
                              ],
                              "Name": "AutomaticIrrigation",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }\n        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }\n        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }\n        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }\n        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }\n        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }\n        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }\n        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }\n        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }\n        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }\n        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }\n        // Description: Pasture DM defoliated today\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }\n        // Description: Pasture N defoliate today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }\n        // Description: Pasture DM harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }\n        // Description: Pasture N harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }\n        // Description: Pasture DM removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }\n        // Description: Pasture N removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }\n        // Description: Residue DM returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }\n        // Description: Residue N returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }\n        // Description: Harvested N returned as dung (SurfaceOM)\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }\n        // Description: Harvested N returned as urine (urea)\n        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }\n        // Description: Number of days after last defoliation\n        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) before cut\n        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) after cut\n        \n        // - Internal variables\n        // fraction of harvested Dm to actually remove from field\n        private double fractionDM2Remove = 1.0;\n        // flag whether defoliation is allowed\n        //private bool rotationAllowed = true;\n        // number of days for each defoliation event\n        private int cuttingDuration = 0;\n        // counter for day within each defoliation\n        private int daysCutting = 0;\n        // type of interval (Fixed or target)\n        private string intervalType;\n        // total herbage to remove in g/m2 per day\n        private double herbageToRemove;\n        // type of DM amount (ResidualDM or DMToRemove)\n        private string amountType;\n        // auxiliary flag for defoliation\n        private bool aCutHasHappened = false;\n\n        // - Event to add residue or dung to surface OM\n        public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n\n            // reset variables\n            DaysAfterCut = 0;\n            resetVariables();\n            cuttingDuration = DurationOfCut;\n            \n            // get the type of amount given\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\n                amountType = \"SetResidueAmount\";\n            else\n                amountType = \"SetRemoveAmount\";\n\n            // get the type of amount given\n            if (IntervalType == rotationIntervalTypes.FixedInterval)\n                intervalType = \"Fixed\";\n            else\n                intervalType = \"Target\";\n\n            // make sure that rotation starts when startDate < simulationStartDay\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\n                CutRotationStartDate = Clock.Today;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (rotationAllowed)\n            {\n                if (Clock.Today == CutRotationStartDate)\n                    DaysAfterCut = CutInterval;\n\n                bool SwardIsAlive = false;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                {\n                    if (species.IsAlive)\n                        SwardIsAlive = true;\n                }\n                \n                // Check whether we can defoliate\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))\n                {\n                    // Check whether we should start a defoliation\n                    if (DaysAfterCut >= (CutInterval - 1))\n                    {\n                        Graze(AmountGiven, amountType, DurationOfCut);\n                    }\n                }\n            }\n\n            // Check whether we need to continue cutting\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\n            {\n                // reset outputs\n                resetVariables();\n\n                removeDM(herbageToRemove);\n                returnExcreta();\n                daysCutting += 1;\n                if (daysCutting == cuttingDuration)\n                {\n                    PostHarvestDM = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        PostHarvestDM += species.Standing.Wt;\n                }\n            }\n\n            // reset outputs\n            if (daysCutting < 0)\n            {\n                resetVariables();\n                daysCutting = 0;\n            }\n        }\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            // Check whether a cutting has finished\n            if (daysCutting == cuttingDuration)\n            {\n                aCutHasHappened = true;\n                daysCutting = -1;\n            }\n\n            // Increase the counter for days after cutting\n            if (aCutHasHappened && (daysCutting == 0))\n                DaysAfterCut += 1;\n        }\n\n        public enum removeAmountTypes\n        {\n            /// <summary>Setting DM amount to remove</summary>\n            DMToRemove,\n            /// <summary>Setting residual DM amount</summary>\n            ResidualDM\n        }\n\n        public enum rotationIntervalTypes\n        {\n            /// <summary>Setting a fixed interval</summary>\n            FixedInterval,\n            /// <summary>Setting a target (minimum) inteval</summary>\n            TargetInterval\n        }\n\n        public enum removeDMTypes\n        {\n            /// <summary>Remove all DM</summary>\n            RemoveAll,\n            /// <summary>Remove no DM</summary>\n            RemoveNone,\n            /// <summary>Remove a fraction based on digestibility</summary>\n            BasedOnDigestibility\n        }\n\n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n        \n                \n        // Resets the values of all outputs\n        private void resetVariables()\n        {\n            DefoliatedWt = 0.0;\n            DefoliatedN = 0.0;\n            HarvestedWt = 0.0;\n            HarvestedN = 0.0;\n            RemovedWt = 0.0;\n            RemovedN = 0.0;\n            ReturnedWt = 0.0;\n            ReturnedN = 0.0;\n            NReturnedInDung = 0.0;\n            NReturnedInUrine = 0.0;\n        }\n\n        // Description: Perform the basic calculations for defoliation\n        public void Graze(double amountDM, string amountType, int duration)\n        {\n            // Get the existing plant amount\n            PreHarvestDM = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                PreHarvestDM += species.Standing.Wt;\n            \n            // Check the amount to remove and print some info\n            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))\n            {\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = amountDM / duration;\n            }\n            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))\n            {\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\n            }\n            else\n            {\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);\n                if (intervalType == \"Fixed\")\n                    DaysAfterCut = -duration;\n                return;\n            }\n\n            cuttingDuration = duration;\n            // Preform first defoliation\n            removeDM(herbageToRemove);\n            returnExcreta();\n            daysCutting = 1;\n            DaysAfterCut = 0;\n            if (daysCutting == cuttingDuration)\n            {\n                PostHarvestDM = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    PostHarvestDM += species.Standing.Wt;\n            }\n        }\n\n        // Do the DM removal\n        private void removeDM(double removeAmount)\n        {\n            double existingWt = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                existingWt += species.Harvestable.Wt;\n\n\n            // Check whether we harvest anything\n            if (existingWt >= removeAmount)\n            {\n                foreach (AgPasture.PastureSpecies species in Pasture)\n                {\n                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;\n                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\n                }\n                \n                // get total harvested\n                DefoliatedWt = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedWt += species.HarvestedWt;\n                DefoliatedN = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedN += species.HarvestedN;\n                HarvestedWt = DefoliatedWt;\n                HarvestedN = DefoliatedN;\n\n                // get amounts actually removed from field and that to be returned (dung/urine)\n                if (DMRemoveType == removeDMTypes.RemoveAll)\n                    fractionDM2Remove = 1.0;\n                else if (DMRemoveType == removeDMTypes.RemoveNone)\n                    fractionDM2Remove = 0.0;\n                else\n                {\n                    fractionDM2Remove = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;\n                    fractionDM2Remove /= removeAmount;\n                }\n                \n                RemovedWt = HarvestedWt * fractionDM2Remove;\n                RemovedN = HarvestedN * FractionN2Remove;\n                ReturnedWt = HarvestedWt - RemovedWt;\n                ReturnedN = HarvestedN - RemovedN;\n                NReturnedInDung = ReturnedN * ProportionN2Dung;\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\n            }\n        }\n\n        // Return dung and urine\n        private void returnExcreta()\n        {\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\n            {\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\n                float[] dltdm = new float[] { (Single)ReturnedWt };\n                float[] dltn = new float[] { (Single)NReturnedInDung };\n                float[] dltp = new float[] { 0 };\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\n\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\n                BiomassDung.dm_type = type;\n                BiomassDung.dlt_crop_dm = dltdm;\n                BiomassDung.dlt_dm_n = dltn;\n                BiomassDung.dlt_dm_p = dltp;\n                BiomassDung.fraction_to_residue = fraction;\n                BiomassRemoved.Invoke(BiomassDung);\n            }\n\n            if (NReturnedInUrine > 0.0)\n            {\n                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "1900-07-01"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "2100-12-31"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "1"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "2250"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 1.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "ResourceName": "Fertiliser",
                          "Name": "Fertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 0.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "ResourceName": "SurfaceOrganicMatter",
                          "Name": "SurfaceOrganicMatter",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": "Stores lots of water",
                          "Site": "Made up",
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "NO3N": [
                                15.0,
                                15.0,
                                15.0,
                                15.0
                              ],
                              "NH4N": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "CL": null,
                              "EC": null,
                              "ESP": null,
                              "LabileP": null,
                              "UnavailableP": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "ParticleSizeClay": [
                                60.0,
                                60.0,
                                60.0,
                                60.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.3,
                                1.3,
                                1.3
                              ],
                              "AirDry": [
                                0.05,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "DUL": [
                                0.45,
                                0.45,
                                0.45,
                                0.45
                              ],
                              "SAT": [
                                0.5,
                                0.5,
                                0.5,
                                0.5
                              ],
                              "KS": [
                                500.0,
                                500.0,
                                500.0,
                                500.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 6.0,
                              "WinterCona": 3.5,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "SWCON": [
                                0.3,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "ResourceName": "WaterBalance",
                              "Name": "SoilWater",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogen, Models",
                              "fom_types": [
                                "default",
                                "manure",
                                "mucuna",
                                "lablab",
                                "shemp",
                                "stable"
                              ],
                              "fract_carb": [
                                0.2,
                                0.3,
                                0.54,
                                0.57,
                                0.45,
                                0.0
                              ],
                              "fract_cell": [
                                0.7,
                                0.3,
                                0.37,
                                0.37,
                                0.47,
                                0.1
                              ],
                              "fract_lign": [
                                0.1,
                                0.4,
                                0.09,
                                0.06,
                                0.08,
                                0.9
                              ],
                              "NPartitionApproach": 0,
                              "Name": "SoilNitrogen",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilNitrogenNO3, Models",
                                  "Name": "NO3",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenNH4, Models",
                                  "Name": "NH4",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenUrea, Models",
                                  "Name": "Urea",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "Carbon": [
                                0.01,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FOM": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.InitialWater, Models",
                              "PercentMethod": 1,
                              "FractionFull": 0.95,
                              "DepthWetSoil": "NaN",
                              "RelativeTo": null,
                              "Name": "Initial water",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "InitialShootDM": 1500.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "ResourceName": "AGPRyegrass",
                          "Name": "AGPRyegrass",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "[AGPRyegrass].AboveGroundWt as PlantMass",
                            "[AGPRyegrass].HarvestedWt as Harvested",
                            "[AGPRyegrass].WaterDemand as SW_Demand",
                            "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                            "[AGPRyegrass].GlfWaterSupply as glfWater",
                            "[AGPRyegrass].GlfNSupply as glfNitrogen",
                            "sum([Soil].SoilWater.SWmm) as SoilWater",
                            "sum([Soil].SoilNitrogen.NH4.kgha)+sum([Soil].SoilNitrogen.NO3.kgha) as SoilNitrogen",
                            "[Irrigation].IrrigationApplied as Irrigation",
                            "[Fertiliser].NitrogenApplied as Fertiliser"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "TestWithWaterStress",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Zone1",
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn ferliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "600"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "50"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "AutomaticFertiliser",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }\n        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool IrrigationIsAlwaysAllowed { get; set; }\n        \n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n            if (allowIrrigationAll == answerType.yes)\n                IrrigationIsAlwaysAllowed = true; \n\n\n\n\n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if (IrrigationIsAlwaysAllowed)\n                CropIsActive = true;  // might not be but we don't care\n            else if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "no"
                                },
                                {
                                  "Key": "allowIrrigationAll",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "1-Jan"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "31-Dec"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "100"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "5"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "600"
                                }
                              ],
                              "Name": "AutomaticIrrigation",
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 1.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "ResourceName": "Fertiliser",
                          "Name": "Fertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 0.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "ResourceName": "SurfaceOrganicMatter",
                          "Name": "SurfaceOrganicMatter",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": "Stores lots of water",
                          "Site": "Made up",
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "NO3N": [
                                15.0,
                                15.0,
                                15.0,
                                15.0
                              ],
                              "NH4N": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "CL": null,
                              "EC": null,
                              "ESP": null,
                              "LabileP": null,
                              "UnavailableP": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "ParticleSizeClay": [
                                60.0,
                                60.0,
                                60.0,
                                60.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.3,
                                1.3,
                                1.3
                              ],
                              "AirDry": [
                                0.05,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "DUL": [
                                0.45,
                                0.45,
                                0.45,
                                0.45
                              ],
                              "SAT": [
                                0.5,
                                0.5,
                                0.5,
                                0.5
                              ],
                              "KS": [
                                500.0,
                                500.0,
                                500.0,
                                500.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 6.0,
                              "WinterCona": 3.5,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "SWCON": [
                                0.3,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "ResourceName": "WaterBalance",
                              "Name": "SoilWater",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogen, Models",
                              "fom_types": [
                                "default",
                                "manure",
                                "mucuna",
                                "lablab",
                                "shemp",
                                "stable"
                              ],
                              "fract_carb": [
                                0.2,
                                0.3,
                                0.54,
                                0.57,
                                0.45,
                                0.0
                              ],
                              "fract_cell": [
                                0.7,
                                0.3,
                                0.37,
                                0.37,
                                0.47,
                                0.1
                              ],
                              "fract_lign": [
                                0.1,
                                0.4,
                                0.09,
                                0.06,
                                0.08,
                                0.9
                              ],
                              "NPartitionApproach": 0,
                              "Name": "SoilNitrogen",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilNitrogenNO3, Models",
                                  "Name": "NO3",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenNH4, Models",
                                  "Name": "NH4",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenUrea, Models",
                                  "Name": "Urea",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "Carbon": [
                                0.01,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FOM": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.InitialWater, Models",
                              "PercentMethod": 1,
                              "FractionFull": 0.95,
                              "DepthWetSoil": "NaN",
                              "RelativeTo": null,
                              "Name": "Initial water",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "sum([Soil].SoilWater.SWmm) as SoilWater",
                            "sum([Soil].SoilNitrogen.NH4.kgha)+sum([Soil].SoilNitrogen.NO3.kgha) as SoilNitrogen",
                            "[Irrigation].IrrigationApplied as Irrigation",
                            "[Fertiliser].NitrogenApplied as Fertiliser"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "TestWithWaterStress",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "08 Test With Nitrogen Stress",
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This series of simulations are as for the ‘No Stress’ series except there is no fertiliser (irrigation remains turned on).  There is also no soil organic matter or initial mineral N so this is a run-down experiment.  The expectation is that as more roots are spread into Zone1 that:\r\n•\tThe plant can access more N so more dry matter will be harvested and, later on when there is insufficient stored N, senescence will be slower;\r\n\r\n•\tWater demand and water uptake will be maintained for longer;\r\n\r\n•\tThere will be no water stress;\r\n\r\n•\tN stress will be delayed and less severe;\r\n\r\n•\tSoil water storage will be unaffected;\r\n\r\n•\tThe soil N storage in Zone0 will be depleted more slowly while the soil N in Zone1 will be depleted more quickly; and\r\n\r\n\r\n•\tThere is likely to be a reduction in irrigation applied to Zone0 and an increase in Zone1 as more water is extracted from Zone1 but this will be moderated by the reduction in growth as N becomes severely limited.\r\n\r\nThese expectations are largely met.  There are some strange dynamics when 0.25 of the roots are in Zone1 for which there is no obvious explanation but otherwise the patterns are as expected.\r\n",
              "Name": "Memo TestWithNitrogenStress",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2600.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PlantWt",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "PlantMass",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Harvested",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "Harvested",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterDemand",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Demand",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Demand",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterUptake",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Uptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Uptake",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStress",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "glfWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NStress",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "glfNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWaterZone0",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Water",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWaterZone1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Water",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 150.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogenZone1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Nitrogen",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 150.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogenZone0",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Nitrogen",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2000.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationAppliedZone0",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Irrigation",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2000.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationAppliedZone1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Irrigation",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2300.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserAppliedZone0",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone0'",
                  "Name": "Fertiliser",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2300.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserAppliedZone1",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "NumOfZones",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "TestWithNitrogenStress",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": "[Zone] = 'Zone1'",
                  "Name": "Fertiliser",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Factorial.Experiment, Models",
              "DisabledSimNames": null,
              "Name": "Experiment08",
              "Children": [
                {
                  "$type": "Models.Factorial.Factors, Models",
                  "Name": "Factors",
                  "Children": [
                    {
                      "$type": "Models.Factorial.Factor, Models",
                      "Specification": "[DoRootsSingle].Script.Zone1Prop=0.0,0.25,0.5,0.75,1.0",
                      "Name": "NumOfZones",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Simulation, Models",
                  "IsRunning": false,
                  "Descriptors": null,
                  "Name": "TestWithNitrogenStress",
                  "Children": [
                    {
                      "$type": "Models.Clock, Models",
                      "Start": "2000-01-01T00:00:00",
                      "End": "2000-12-31T00:00:00",
                      "Name": "Clock",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Climate.ControlledEnvironment, Models",
                      "MaxT": 25.0,
                      "MinT": 15.0,
                      "Rain": 0.0,
                      "Radn": 25.0,
                      "PanEvap": 0.0,
                      "VP": 17.0,
                      "Wind": 3.0,
                      "CO2": 350.0,
                      "AirPressure": 1010.0,
                      "DiffuseFraction": 0.0,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "DayLength": 12.0,
                      "SunRise": 0.0,
                      "SunSet": 0.0,
                      "Name": "ControlledEnvironment",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                      "Name": "SoilArbitrator",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Summary, Models",
                      "Verbosity": 100,
                      "Name": "Summary",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Zone0",
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing System.Linq;\nusing System;\nusing System.Collections.Generic;\nusing System.Xml.Serialization;\nusing Models.Core;\nusing Models.PMF;\nusing APSIM.Shared.Utilities;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Root depth in the plant's zone (mm): \")]  public double Zone0Depth { get; set; }\n        [Description(\"Root mass  in the plant's zone (mm): \")]  public double Zone0Mass { get; set; }\n\n        [Description(\"Name of the first zone: \")] public string Zone1Name { get; set; }\n        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone1Prop { get; set; }\n\n        [Description(\"Name of the second zone: \")] public string Zone2Name { get; set; }\n        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone2Prop { get; set; }\n\n        [Description(\"Name of the third zone: \")] public string Zone3Name { get; set; }\n        [Description(\"Proportionate depth and mass in the first zone (-): \")]  public double Zone3Prop { get; set; }\n\n        // - Outputs from this manager\n\n        // - Internal variables\n\n        [EventSubscribe(\"FinalInitialise\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            int SpeciesNum = 0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                SpeciesNum += 1;\n                if (SpeciesNum == 1)\n                {\n                    //double test = species.RootWt;\n                    if (Zone1Prop > 0)\n                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone1Prop * Zone0Depth, rootDM: Zone1Prop * Zone0Mass);\n                    if (Zone2Prop > 0)\n                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone2Prop * Zone0Depth, rootDM: Zone2Prop * Zone0Mass);\n                    if (Zone3Prop > 0)\n                        species.AddZone(zoneName: Zone1Name, rootDepth: Zone3Prop * Zone0Depth, rootDM: Zone3Prop * Zone0Mass);\n                }\n            }\n\n            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);\n            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "Zone0Depth",
                                  "Value": "600"
                                },
                                {
                                  "Key": "Zone0Mass",
                                  "Value": "500"
                                },
                                {
                                  "Key": "Zone1Name",
                                  "Value": "Zone1"
                                },
                                {
                                  "Key": "Zone1Prop",
                                  "Value": "0"
                                },
                                {
                                  "Key": "Zone2Name",
                                  "Value": "Zone2"
                                },
                                {
                                  "Key": "Zone2Prop",
                                  "Value": "0"
                                },
                                {
                                  "Key": "Zone3Name",
                                  "Value": "Zone3"
                                },
                                {
                                  "Key": "Zone3Prop",
                                  "Value": "0"
                                }
                              ],
                              "Name": "DoRootsSingle",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn ferliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "no"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "600"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "50"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "AutomaticFertiliser",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }\n        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool IrrigationIsAlwaysAllowed { get; set; }\n        \n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n            if (allowIrrigationAll == answerType.yes)\n                IrrigationIsAlwaysAllowed = true; \n\n\n\n\n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if (IrrigationIsAlwaysAllowed)\n                CropIsActive = true;  // might not be but we don't care\n            else if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "allowIrrigationAll",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "1-Jan"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "31-Dec"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "100"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "5"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "600"
                                }
                              ],
                              "Name": "AutomaticIrrigation",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Do the grazing/cutting?: \")] public bool rotationAllowed { get; set; }\n        [Description(\"Date to begin the rotation: \")] public DateTime CutRotationStartDate { get; set; }\n        [Description(\"Date to finish the rotation: \")] public DateTime CutRotationEndDate { get; set; }\n        [Description(\"Rotation interval (days): \")] public int CutInterval { get; set; }\n        [Description(\"How the interval is defined: \")] public rotationIntervalTypes IntervalType { get; set; }\n        [Description(\"Duration of each event (days): \")] public int DurationOfCut { get; set; }\n        [Description(\"What amount is being defined: \")] public removeAmountTypes RemoveAmountType { get; set; }\n        [Description(\"Amount to use (kg/ha): \")] public double AmountGiven { get; set; }\n        [Description(\"Fraction of DM that is removed from the field:\")] public removeDMTypes DMRemoveType { get; set; }\n        [Description(\"Fraction of N that is removed from the field (0-1):\")] public double FractionN2Remove { get; set; }\n        [Description(\"Proportion of N returned in dung (0-1):\")] public double ProportionN2Dung { get; set; }\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedWt { get; set; }\n        // Description: Pasture DM defoliated today\n        [JsonIgnore][Units(\"g/m2\")] public double DefoliatedN { get; set; }\n        // Description: Pasture N defoliate today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedWt { get; set; }\n        // Description: Pasture DM harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double HarvestedN { get; set; }\n        // Description: Pasture N harvested today\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedWt { get; set; }\n        // Description: Pasture DM removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double RemovedN { get; set; }\n        // Description: Pasture N removed from the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedWt { get; set; }\n        // Description: Residue DM returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double ReturnedN { get; set; }\n        // Description: Residue N returned to the field\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInDung { get; set; }\n        // Description: Harvested N returned as dung (SurfaceOM)\n        [JsonIgnore][Units(\"g/m2\")] public double NReturnedInUrine { get; set; }\n        // Description: Harvested N returned as urine (urea)\n        [JsonIgnore][Units(\"day\")] public int DaysAfterCut { get; set; }\n        // Description: Number of days after last defoliation\n        [JsonIgnore][Units(\"g/m2\")] public double PreHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) before cut\n        [JsonIgnore][Units(\"g/m2\")] public double PostHarvestDM { get; set; }\n        // Description: Total standing DM (Leaf + Stem/Sheath) after cut\n        \n        // - Internal variables\n        // fraction of harvested Dm to actually remove from field\n        private double fractionDM2Remove = 1.0;\n        // flag whether defoliation is allowed\n        //private bool rotationAllowed = true;\n        // number of days for each defoliation event\n        private int cuttingDuration = 0;\n        // counter for day within each defoliation\n        private int daysCutting = 0;\n        // type of interval (Fixed or target)\n        private string intervalType;\n        // total herbage to remove in g/m2 per day\n        private double herbageToRemove;\n        // type of DM amount (ResidualDM or DMToRemove)\n        private string amountType;\n        // auxiliary flag for defoliation\n        private bool aCutHasHappened = false;\n\n        // - Event to add residue or dung to surface OM\n        public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n\n            // reset variables\n            DaysAfterCut = 0;\n            resetVariables();\n            cuttingDuration = DurationOfCut;\n            \n            // get the type of amount given\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\n                amountType = \"SetResidueAmount\";\n            else\n                amountType = \"SetRemoveAmount\";\n\n            // get the type of amount given\n            if (IntervalType == rotationIntervalTypes.FixedInterval)\n                intervalType = \"Fixed\";\n            else\n                intervalType = \"Target\";\n\n            // make sure that rotation starts when startDate < simulationStartDay\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\n                CutRotationStartDate = Clock.Today;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (rotationAllowed)\n            {\n                if (Clock.Today == CutRotationStartDate)\n                    DaysAfterCut = CutInterval;\n\n                bool SwardIsAlive = false;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                {\n                    if (species.IsAlive)\n                        SwardIsAlive = true;\n                }\n                \n                // Check whether we can defoliate\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (SwardIsAlive))\n                {\n                    // Check whether we should start a defoliation\n                    if (DaysAfterCut >= (CutInterval - 1))\n                    {\n                        Graze(AmountGiven, amountType, DurationOfCut);\n                    }\n                }\n            }\n\n            // Check whether we need to continue cutting\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\n            {\n                // reset outputs\n                resetVariables();\n\n                removeDM(herbageToRemove);\n                returnExcreta();\n                daysCutting += 1;\n                if (daysCutting == cuttingDuration)\n                {\n                    PostHarvestDM = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        PostHarvestDM += species.Standing.Wt;\n                }\n            }\n\n            // reset outputs\n            if (daysCutting < 0)\n            {\n                resetVariables();\n                daysCutting = 0;\n            }\n        }\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            // Check whether a cutting has finished\n            if (daysCutting == cuttingDuration)\n            {\n                aCutHasHappened = true;\n                daysCutting = -1;\n            }\n\n            // Increase the counter for days after cutting\n            if (aCutHasHappened && (daysCutting == 0))\n                DaysAfterCut += 1;\n        }\n\n        public enum removeAmountTypes\n        {\n            /// <summary>Setting DM amount to remove</summary>\n            DMToRemove,\n            /// <summary>Setting residual DM amount</summary>\n            ResidualDM\n        }\n\n        public enum rotationIntervalTypes\n        {\n            /// <summary>Setting a fixed interval</summary>\n            FixedInterval,\n            /// <summary>Setting a target (minimum) inteval</summary>\n            TargetInterval\n        }\n\n        public enum removeDMTypes\n        {\n            /// <summary>Remove all DM</summary>\n            RemoveAll,\n            /// <summary>Remove no DM</summary>\n            RemoveNone,\n            /// <summary>Remove a fraction based on digestibility</summary>\n            BasedOnDigestibility\n        }\n\n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n        \n                \n        // Resets the values of all outputs\n        private void resetVariables()\n        {\n            DefoliatedWt = 0.0;\n            DefoliatedN = 0.0;\n            HarvestedWt = 0.0;\n            HarvestedN = 0.0;\n            RemovedWt = 0.0;\n            RemovedN = 0.0;\n            ReturnedWt = 0.0;\n            ReturnedN = 0.0;\n            NReturnedInDung = 0.0;\n            NReturnedInUrine = 0.0;\n        }\n\n        // Description: Perform the basic calculations for defoliation\n        public void Graze(double amountDM, string amountType, int duration)\n        {\n            // Get the existing plant amount\n            PreHarvestDM = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                PreHarvestDM += species.Standing.Wt;\n            \n            // Check the amount to remove and print some info\n            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))\n            {\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = amountDM / duration;\n            }\n            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))\n            {\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\n            }\n            else\n            {\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);\n                if (intervalType == \"Fixed\")\n                    DaysAfterCut = -duration;\n                return;\n            }\n\n            cuttingDuration = duration;\n            // Preform first defoliation\n            removeDM(herbageToRemove);\n            returnExcreta();\n            daysCutting = 1;\n            DaysAfterCut = 0;\n            if (daysCutting == cuttingDuration)\n            {\n                PostHarvestDM = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    PostHarvestDM += species.Standing.Wt;\n            }\n        }\n\n        // Do the DM removal\n        private void removeDM(double removeAmount)\n        {\n            double existingWt = 0.0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                existingWt += species.Harvestable.Wt;\n\n\n            // Check whether we harvest anything\n            if (existingWt >= removeAmount)\n            {\n                foreach (AgPasture.PastureSpecies species in Pasture)\n                {\n                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;\n                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\n                }\n                \n                // get total harvested\n                DefoliatedWt = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedWt += species.HarvestedWt;\n                DefoliatedN = 0.0;\n                foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                    DefoliatedN += species.HarvestedN;\n                HarvestedWt = DefoliatedWt;\n                HarvestedN = DefoliatedN;\n\n                // get amounts actually removed from field and that to be returned (dung/urine)\n                if (DMRemoveType == removeDMTypes.RemoveAll)\n                    fractionDM2Remove = 1.0;\n                else if (DMRemoveType == removeDMTypes.RemoveNone)\n                    fractionDM2Remove = 0.0;\n                else\n                {\n                    fractionDM2Remove = 0.0;\n                    foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n                        fractionDM2Remove += species.HarvestedDigestibility * species.HarvestedWt;\n                    fractionDM2Remove /= removeAmount;\n                }\n                \n                RemovedWt = HarvestedWt * fractionDM2Remove;\n                RemovedN = HarvestedN * FractionN2Remove;\n                ReturnedWt = HarvestedWt - RemovedWt;\n                ReturnedN = HarvestedN - RemovedN;\n                NReturnedInDung = ReturnedN * ProportionN2Dung;\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\n            }\n        }\n\n        // Return dung and urine\n        private void returnExcreta()\n        {\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\n            {\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\n                float[] dltdm = new float[] { (Single)ReturnedWt };\n                float[] dltn = new float[] { (Single)NReturnedInDung };\n                float[] dltp = new float[] { 0 };\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\n\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\n                BiomassDung.dm_type = type;\n                BiomassDung.dlt_crop_dm = dltdm;\n                BiomassDung.dlt_dm_n = dltn;\n                BiomassDung.dlt_dm_p = dltp;\n                BiomassDung.fraction_to_residue = fraction;\n                BiomassRemoved.Invoke(BiomassDung);\n            }\n\n            if (NReturnedInUrine > 0.0)\n            {\n                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "rotationAllowed",
                                  "Value": "True"
                                },
                                {
                                  "Key": "CutRotationStartDate",
                                  "Value": "07/01/1900 00:00:00"
                                },
                                {
                                  "Key": "CutRotationEndDate",
                                  "Value": "12/31/2100 00:00:00"
                                },
                                {
                                  "Key": "CutInterval",
                                  "Value": "1"
                                },
                                {
                                  "Key": "IntervalType",
                                  "Value": "FixedInterval"
                                },
                                {
                                  "Key": "DurationOfCut",
                                  "Value": "1"
                                },
                                {
                                  "Key": "RemoveAmountType",
                                  "Value": "ResidualDM"
                                },
                                {
                                  "Key": "AmountGiven",
                                  "Value": "2250"
                                },
                                {
                                  "Key": "DMRemoveType",
                                  "Value": "RemoveAll"
                                },
                                {
                                  "Key": "FractionN2Remove",
                                  "Value": "1"
                                },
                                {
                                  "Key": "ProportionN2Dung",
                                  "Value": "0"
                                }
                              ],
                              "Name": "CutRotation",
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 1.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "ResourceName": "Fertiliser",
                          "Name": "Fertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 0.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "ResourceName": "SurfaceOrganicMatter",
                          "Name": "SurfaceOrganicMatter",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": "Stores lots of water",
                          "Site": "Made up",
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "NO3N": [
                                15.0,
                                15.0,
                                15.0,
                                15.0
                              ],
                              "NH4N": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "CL": null,
                              "EC": null,
                              "ESP": null,
                              "LabileP": null,
                              "UnavailableP": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "ParticleSizeClay": [
                                60.0,
                                60.0,
                                60.0,
                                60.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.3,
                                1.3,
                                1.3
                              ],
                              "AirDry": [
                                0.05,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "DUL": [
                                0.45,
                                0.45,
                                0.45,
                                0.45
                              ],
                              "SAT": [
                                0.5,
                                0.5,
                                0.5,
                                0.5
                              ],
                              "KS": [
                                500.0,
                                500.0,
                                500.0,
                                500.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 6.0,
                              "WinterCona": 3.5,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "SWCON": [
                                0.3,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "ResourceName": "WaterBalance",
                              "Name": "SoilWater",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogen, Models",
                              "fom_types": [
                                "default",
                                "manure",
                                "mucuna",
                                "lablab",
                                "shemp",
                                "stable"
                              ],
                              "fract_carb": [
                                0.2,
                                0.3,
                                0.54,
                                0.57,
                                0.45,
                                0.0
                              ],
                              "fract_cell": [
                                0.7,
                                0.3,
                                0.37,
                                0.37,
                                0.47,
                                0.1
                              ],
                              "fract_lign": [
                                0.1,
                                0.4,
                                0.09,
                                0.06,
                                0.08,
                                0.9
                              ],
                              "NPartitionApproach": 0,
                              "Name": "SoilNitrogen",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilNitrogenNO3, Models",
                                  "Name": "NO3",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenNH4, Models",
                                  "Name": "NH4",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenUrea, Models",
                                  "Name": "Urea",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "Carbon": [
                                0.01,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FOM": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.InitialWater, Models",
                              "PercentMethod": 1,
                              "FractionFull": 0.95,
                              "DepthWetSoil": "NaN",
                              "RelativeTo": null,
                              "Name": "Initial water",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.AgPasture.PastureSpecies, Models",
                          "InitialShootDM": 1500.0,
                          "InitialRootDM": 450.0,
                          "InitialRootDepth": 750.0,
                          "ResourceName": "AGPRyegrass",
                          "Name": "AGPRyegrass",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "[AGPRyegrass].AboveGroundWt as PlantMass",
                            "[AGPRyegrass].HarvestedWt as Harvested",
                            "[AGPRyegrass].WaterDemand as SW_Demand",
                            "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                            "[AGPRyegrass].GlfWaterSupply as glfWater",
                            "[AGPRyegrass].GlfNSupply as glfNitrogen",
                            "sum([Soil].SoilWater.SWmm) as SoilWater",
                            "sum([Soil].SoilNitrogen.NH4.kgha)+sum([Soil].SoilNitrogen.NO3.kgha) as SoilNitrogen",
                            "[Irrigation].IrrigationApplied as Irrigation",
                            "[Fertiliser].NitrogenApplied as Fertiliser"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "TestWithNitrogenStress",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Core.Zone, Models",
                      "Area": 1.0,
                      "Slope": 0.0,
                      "AspectAngle": 0.0,
                      "Altitude": 50.0,
                      "Name": "Zone1",
                      "Children": [
                        {
                          "$type": "Models.Core.Folder, Models",
                          "ShowInDocs": true,
                          "GraphsPerPage": 6,
                          "Name": "Managers",
                          "Children": [
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn ferliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "AllowFertiliser",
                                  "Value": "no"
                                },
                                {
                                  "Key": "Depth2SoilN",
                                  "Value": "600"
                                },
                                {
                                  "Key": "CriticalSoilN",
                                  "Value": "100"
                                },
                                {
                                  "Key": "FertNAmount",
                                  "Value": "50"
                                },
                                {
                                  "Key": "FertType",
                                  "Value": "UreaN"
                                },
                                {
                                  "Key": "FertApplicationDepth",
                                  "Value": "1"
                                },
                                {
                                  "Key": "FertMinimumDays",
                                  "Value": "1"
                                }
                              ],
                              "Name": "AutomaticFertiliser",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Manager, Models",
                              "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }\n        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool IrrigationIsAlwaysAllowed { get; set; }\n        \n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n            if (allowIrrigationAll == answerType.yes)\n                IrrigationIsAlwaysAllowed = true; \n\n\n\n\n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if (IrrigationIsAlwaysAllowed)\n                CropIsActive = true;  // might not be but we don't care\n            else if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                              "Parameters": [
                                {
                                  "Key": "allowIrrigation",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "allowIrrigationAll",
                                  "Value": "yes"
                                },
                                {
                                  "Key": "seasonStart",
                                  "Value": "1-Jan"
                                },
                                {
                                  "Key": "seasonEnd",
                                  "Value": "31-Dec"
                                },
                                {
                                  "Key": "seasonsAllocation",
                                  "Value": "10000"
                                },
                                {
                                  "Key": "triggerDeficit",
                                  "Value": "99"
                                },
                                {
                                  "Key": "targetDeficit",
                                  "Value": "100"
                                },
                                {
                                  "Key": "returndays",
                                  "Value": "1"
                                },
                                {
                                  "Key": "maximumAmount",
                                  "Value": "5"
                                },
                                {
                                  "Key": "depthPAWC",
                                  "Value": "600"
                                }
                              ],
                              "Name": "AutomaticIrrigation",
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.MicroClimate, Models",
                          "a_interception": 0.0,
                          "b_interception": 1.0,
                          "c_interception": 0.0,
                          "d_interception": 0.0,
                          "SoilHeatFluxFraction": 0.4,
                          "MinimumHeightDiffForNewLayer": 0.0,
                          "NightInterceptionFraction": 0.5,
                          "ReferenceHeight": 2.0,
                          "Name": "MicroClimate",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Irrigation, Models",
                          "Name": "Irrigation",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Fertiliser, Models",
                          "ResourceName": "Fertiliser",
                          "Name": "Fertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                          "InitialResidueName": "Sward",
                          "InitialResidueType": "grass",
                          "InitialResidueMass": 0.0,
                          "InitialStandingFraction": 0.0,
                          "InitialCPR": 0.0,
                          "InitialCNR": 15.0,
                          "ResourceName": "SurfaceOrganicMatter",
                          "Name": "SurfaceOrganicMatter",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Soil, Models",
                          "RecordNumber": 0,
                          "ASCOrder": null,
                          "ASCSubOrder": null,
                          "SoilType": null,
                          "LocalName": "Stores lots of water",
                          "Site": "Made up",
                          "NearestTown": null,
                          "Region": null,
                          "State": null,
                          "Country": null,
                          "NaturalVegetation": null,
                          "ApsoilNumber": null,
                          "Latitude": 0.0,
                          "Longitude": 0.0,
                          "LocationAccuracy": null,
                          "YearOfSampling": null,
                          "DataSource": null,
                          "Comments": null,
                          "Name": "Soil",
                          "Children": [
                            {
                              "$type": "Models.Soils.Chemical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "NO3N": [
                                15.0,
                                15.0,
                                15.0,
                                15.0
                              ],
                              "NH4N": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "PH": [
                                6.0,
                                6.0,
                                6.0,
                                6.0
                              ],
                              "CL": null,
                              "EC": null,
                              "ESP": null,
                              "LabileP": null,
                              "UnavailableP": null,
                              "ECMetadata": null,
                              "CLMetadata": null,
                              "ESPMetadata": null,
                              "PHMetadata": null,
                              "Name": "Chemical",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Physical, Models",
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "ParticleSizeClay": [
                                60.0,
                                60.0,
                                60.0,
                                60.0
                              ],
                              "ParticleSizeSand": null,
                              "ParticleSizeSilt": null,
                              "Rocks": null,
                              "Texture": null,
                              "BD": [
                                1.3,
                                1.3,
                                1.3,
                                1.3
                              ],
                              "AirDry": [
                                0.05,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "LL15": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "DUL": [
                                0.45,
                                0.45,
                                0.45,
                                0.45
                              ],
                              "SAT": [
                                0.5,
                                0.5,
                                0.5,
                                0.5
                              ],
                              "KS": [
                                500.0,
                                500.0,
                                500.0,
                                500.0
                              ],
                              "BDMetadata": null,
                              "AirDryMetadata": null,
                              "LL15Metadata": null,
                              "DULMetadata": null,
                              "SATMetadata": null,
                              "KSMetadata": null,
                              "RocksMetadata": null,
                              "TextureMetadata": null,
                              "ParticleSizeSandMetadata": null,
                              "ParticleSizeSiltMetadata": null,
                              "ParticleSizeClayMetadata": null,
                              "Name": "Physical",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPRyegrassSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilCrop, Models",
                                  "LL": [
                                    0.1,
                                    0.1,
                                    0.1,
                                    0.1
                                  ],
                                  "KL": [
                                    0.05,
                                    0.05,
                                    0.05,
                                    0.05
                                  ],
                                  "XF": [
                                    1.0,
                                    1.0,
                                    1.0,
                                    1.0
                                  ],
                                  "LLMetadata": null,
                                  "KLMetadata": null,
                                  "XFMetadata": null,
                                  "Name": "AGPWhiteCloverSoil",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.WaterModel.WaterBalance, Models",
                              "SummerDate": "1-Nov",
                              "SummerU": 6.0,
                              "SummerCona": 3.5,
                              "WinterDate": "1-apr",
                              "WinterU": 6.0,
                              "WinterCona": 3.5,
                              "DiffusConst": 88.0,
                              "DiffusSlope": 35.0,
                              "Salb": 0.13,
                              "CN2Bare": 73.0,
                              "CNRed": 20.0,
                              "CNCov": 0.8,
                              "DischargeWidth": 0.0,
                              "CatchmentArea": 0.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "SWCON": [
                                0.3,
                                0.3,
                                0.3,
                                0.3
                              ],
                              "KLAT": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "ResourceName": "WaterBalance",
                              "Name": "SoilWater",
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogen, Models",
                              "fom_types": [
                                "default",
                                "manure",
                                "mucuna",
                                "lablab",
                                "shemp",
                                "stable"
                              ],
                              "fract_carb": [
                                0.2,
                                0.3,
                                0.54,
                                0.57,
                                0.45,
                                0.0
                              ],
                              "fract_cell": [
                                0.7,
                                0.3,
                                0.37,
                                0.37,
                                0.47,
                                0.1
                              ],
                              "fract_lign": [
                                0.1,
                                0.4,
                                0.09,
                                0.06,
                                0.08,
                                0.9
                              ],
                              "NPartitionApproach": 0,
                              "Name": "SoilNitrogen",
                              "Children": [
                                {
                                  "$type": "Models.Soils.SoilNitrogenNO3, Models",
                                  "Name": "NO3",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenNH4, Models",
                                  "Name": "NH4",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                },
                                {
                                  "$type": "Models.Soils.SoilNitrogenUrea, Models",
                                  "Name": "Urea",
                                  "Children": [],
                                  "Enabled": true,
                                  "ReadOnly": false
                                }
                              ],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.Organic, Models",
                              "FOMCNRatio": 40.0,
                              "Thickness": [
                                150.0,
                                150.0,
                                150.0,
                                150.0
                              ],
                              "Carbon": [
                                0.01,
                                0.01,
                                0.01,
                                0.01
                              ],
                              "SoilCNRatio": [
                                12.0,
                                12.0,
                                12.0,
                                12.0
                              ],
                              "FBiom": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FInert": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "FOM": [
                                0.0,
                                0.0,
                                0.0,
                                0.0
                              ],
                              "CarbonMetadata": null,
                              "FOMMetadata": null,
                              "Name": "Organic",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.InitialWater, Models",
                              "PercentMethod": 1,
                              "FractionFull": 0.95,
                              "DepthWetSoil": "NaN",
                              "RelativeTo": null,
                              "Name": "Initial water",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.CERESSoilTemperature, Models",
                              "Name": "Temperature",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Report, Models",
                          "VariableNames": [
                            "[Clock].Today as Date",
                            "sum([Soil].SoilWater.SWmm) as SoilWater",
                            "sum([Soil].SoilNitrogen.NH4.kgha)+sum([Soil].SoilNitrogen.NO3.kgha) as SoilNitrogen",
                            "[Irrigation].IrrigationApplied as Irrigation",
                            "[Fertiliser].NitrogenApplied as Fertiliser"
                          ],
                          "EventNames": [
                            "[Clock].EndOfDay"
                          ],
                          "GroupByVariableName": null,
                          "Name": "TestWithNitrogenStress",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "Conceptual Three Zone Simulation with Initial Uniform Soil N",
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "In this simulation, which is largely based on the one above, there are three zones with a ryegrass, lots of irrigation but no fertiliser and about 35 kg mineral N in the soil at initialisation.  The roots from the ryegrass in Zone1 has roots on Zone0 and Zone2 but the ryegrasses in Zone0 and Zone2 only have roots in their own zone.  As expected:\r\n\r\n•\tthe ryegrass in Zone1 grows more (note that Zone0 and Zone2 are mostly plotting on top of each other), \r\n\r\n•\twater demand and uptake is higher, \r\n\r\n•\tN stress is lower for longer because the plant has access to some of the N in Zone 0 and 2, \r\n\r\n•\tsoil N storage declines more slowly, and \r\n\r\n•\tmore irrigation is required in Zones 0 and 2 because of the additional water uptake from the Sone1 ryegrass and its spreading roots.  \r\n",
              "Name": "Memo ThreeZoneSimulationInitialUniformSoilN",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2600.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PlantWt",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "PlantMass",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Harvested",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "Harvested",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterDemand",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Demand",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Demand",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterUptake",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Uptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Uptake",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStress",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "glfWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NStress",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "glfNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWater",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Water",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogen",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Nitrogen",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationApplied",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Irrigation",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserApplied",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialUniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Fertiliser",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Simulation, Models",
              "IsRunning": false,
              "Descriptors": null,
              "Name": "ThreeZoneSimulationInitialUniformSoilN",
              "Children": [
                {
                  "$type": "Models.Clock, Models",
                  "Start": "2000-01-01T00:00:00",
                  "End": "2000-03-31T00:00:00",
                  "Name": "Clock",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Climate.ControlledEnvironment, Models",
                  "MaxT": 25.0,
                  "MinT": 15.0,
                  "Rain": 0.0,
                  "Radn": 25.0,
                  "PanEvap": 0.0,
                  "VP": 17.0,
                  "Wind": 3.0,
                  "CO2": 350.0,
                  "AirPressure": 1010.0,
                  "DiffuseFraction": 0.0,
                  "Latitude": 0.0,
                  "Longitude": 0.0,
                  "DayLength": 12.0,
                  "SunRise": 0.0,
                  "SunSet": 0.0,
                  "Name": "ControlledEnvironment",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                  "Name": "SoilArbitrator",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Summary, Models",
                  "Verbosity": 100,
                  "Name": "Summary",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Zone0",
                  "Children": [
                    {
                      "$type": "Models.Core.Folder, Models",
                      "ShowInDocs": true,
                      "GraphsPerPage": 6,
                      "Name": "Managers",
                      "Children": [
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing System.Linq;\nusing System;\nusing System.Collections.Generic;\nusing System.Xml.Serialization;\nusing Models.Core;\nusing Models.PMF;\nusing APSIM.Shared.Utilities;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Root depth in the plant's zone (mm): \")]  public double RootDepth { get; set; }\n        [Description(\"Root mass  in the plant's zone (mm): \")]  public double RootMass { get; set; }\n\n        [Description(\"Name of zone ot the left: \")] public string Zone0Name { get; set; }\n        [Description(\"Proportionate depth and mass in zone to the left (-): \")]  public double Zone0Prop { get; set; }\n\n        [Description(\"Name of zone ot the right: \")] public string Zone2Name { get; set; }\n        [Description(\"Proportionate depth and mass in zone to the right (-): \")]  public double Zone2Prop { get; set; }\n\n        // - Outputs from this manager\n\n        // - Internal variables\n\n        [EventSubscribe(\"FinalInitialise\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            int SpeciesNum = 0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                SpeciesNum += 1;\n                if (SpeciesNum == 1)\n                {\n                    if (Zone0Prop > 0)\n                        species.AddZone(zoneName: Zone0Name, rootDepth: Zone0Prop * RootDepth, rootDM: Zone0Prop * RootMass);\n                    if (Zone2Prop > 0)\n                        species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass);\n                }\n            }\n\n            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);\n            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "RootDepth",
                              "Value": "600"
                            },
                            {
                              "Key": "RootMass",
                              "Value": "500"
                            },
                            {
                              "Key": "Zone0Name",
                              "Value": "Zone0"
                            },
                            {
                              "Key": "Zone0Prop",
                              "Value": "0"
                            },
                            {
                              "Key": "Zone2Name",
                              "Value": "Zone1"
                            },
                            {
                              "Key": "Zone2Prop",
                              "Value": "0"
                            }
                          ],
                          "Name": "DoRootsThreeZone",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Date to begin the rotation: \")]\n        public DateTime CutRotationStartDate { get; set; }\n\n        [Description(\"Date to finish the rotation: \")]\n        public DateTime CutRotationEndDate { get; set; }\n\n        [Description(\"Rotation interval (days): \")]\n        public int CutInterval { get; set; }\n\n        [Description(\"How the interval is defined: \")]\n        public rotationIntervalTypes IntervalType { get; set; }\n\n        [Description(\"Duration of each event (days): \")]\n        public int DurationOfCut { get; set; }\n\n        [Description(\"What amount is being defined: \")]\n        public removeAmountTypes RemoveAmountType { get; set; }\n\n        [Description(\"Amount to use (kg/ha): \")]\n        public double AmountGiven { get; set; }\n\n        [Description(\"Fraction of DM that is removed from the field:\")]\n        public removeDMTypes DMRemoveType { get; set; }\n\n        [Description(\"Fraction of N that is removed from the field (0-1):\")]\n        public double FractionN2Remove { get; set; }\n\n        [Description(\"Proportion of N returned in dung (0-1):\")]\n        public double ProportionN2Dung { get; set; }\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today\n        public double DefoliatedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today\n        public double DefoliatedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today\n        public double HarvestedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today\n        public double HarvestedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field\n        public double RemovedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field\n        public double RemovedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field\n        public double ReturnedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field\n        public double ReturnedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)\n        public double NReturnedInDung { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)\n        public double NReturnedInUrine { get; set; }\n        [JsonIgnore][Units(\"day\")]// Description: Number of days after last defoliation\n        public int DaysAfterCut { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut\n        public double PreHarvestDM { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut\n        public double PostHarvestDM { get; set; }\n        \n        // - Internal variables\n        // fraction of harvested Dm to actually remove from field\n        private double fractionDM2Remove = 1.0;\n        // flag whether defoliation is allowed\n        private bool rotationAllowed = true;\n        // number of days for each defoliation event\n        private int cuttingDuration = 0;\n        // counter for day within each defoliation\n        private int daysCutting = 0;\n        // type of interval (Fixed or target)\n        private string intervalType;\n        // total herbage to remove in g/m2 per day\n        private double herbageToRemove;\n        // type of DM amount (ResidualDM or DMToRemove)\n        private string amountType;\n        // auxiliary flag for defoliation\n        private bool aCutHasHappened = false;\n\n        // - Event to add residue or dung to surface OM\n        public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n\n            // reset variables\n            DaysAfterCut = 0;\n            resetVariables();\n            cuttingDuration = DurationOfCut;\n            \n            // get the type of amount given\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\n                amountType = \"SetResidueAmount\";\n            else\n                amountType = \"SetRemoveAmount\";\n\n            // get the type of amount given\n            if (IntervalType == rotationIntervalTypes.FixedInterval)\n                intervalType = \"Fixed\";\n            else\n                intervalType = \"Target\";\n\n            // make sure that rotation start when startDate < simulationStartDay\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\n                CutRotationStartDate = Clock.Today;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (rotationAllowed)\n            {\n                if (Clock.Today == CutRotationStartDate)\n                    DaysAfterCut = CutInterval;\n\n                // Check whether we can defoliate\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))\n                {\n                    // Check whether we should start a defoliation\n                    if (DaysAfterCut >= (CutInterval - 1))\n                    {\n                        Graze(AmountGiven, amountType, DurationOfCut);\n                    }\n                }\n            }\n\n            // Check whether we need to continue cutting\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\n            {\n                // reset outputs\n                resetVariables();\n\n                removeDM(herbageToRemove);\n                returnExcreta();\n                daysCutting += 1;\n                if (daysCutting == cuttingDuration)\n                    PostHarvestDM = Pasture[0].Standing.Wt; //+ Pasture[1].Standing.Wt\n            }\n\n            // reset outputs\n            if (daysCutting < 0)\n            {\n                resetVariables();\n                daysCutting = 0;\n            }\n        }\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            // Check whether a cutting has finished\n            if (daysCutting == cuttingDuration)\n            {\n                aCutHasHappened = true;\n                daysCutting = -1;\n            }\n\n            // Increase the counter for days after cutting\n            if (aCutHasHappened && (daysCutting == 0))\n                DaysAfterCut += 1;\n        }\n\n        public enum removeAmountTypes\n        {\n            /// <summary>Setting DM amount to remove</summary>\n            DMToRemove,\n            /// <summary>Setting residual DM amount</summary>\n            ResidualDM\n        }\n\n        public enum rotationIntervalTypes\n        {\n            /// <summary>Setting a fixed interval</summary>\n            FixedInterval,\n            /// <summary>Setting a target (minimum) inteval</summary>\n            TargetInterval\n        }\n\n        public enum removeDMTypes\n        {\n            /// <summary>Remove all DM</summary>\n            RemoveAll,\n            /// <summary>Remove no DM</summary>\n            RemoveNone,\n            /// <summary>Remove a fraction based on digestibility</summary>\n            BasedOnDigestibility\n        }\n\n        // Resets the values of all outputs\n        private void resetVariables()\n        {\n            DefoliatedWt = 0.0;\n            DefoliatedN = 0.0;\n            HarvestedWt = 0.0;\n            HarvestedN = 0.0;\n            RemovedWt = 0.0;\n            RemovedN = 0.0;\n            ReturnedWt = 0.0;\n            ReturnedN = 0.0;\n            NReturnedInDung = 0.0;\n            NReturnedInUrine = 0.0;\n        }\n\n        // Description: Perform the basic calculations for defoliation\n        public void Graze(double amountDM, string amountType, int duration)\n        {\n            // Get the existing plant amount\n            PreHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt\n            \n            // Check the amount to remove and print some info\n            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))\n            {\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = amountDM / duration;\n            }\n            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))\n            {\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\n            }\n            else\n            {\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);\n                if (intervalType == \"Fixed\")\n                    DaysAfterCut = -duration;\n                return;\n            }\n\n            cuttingDuration = duration;\n            // Preform first defoliation\n            removeDM(herbageToRemove);\n            returnExcreta();\n            daysCutting = 1;\n            DaysAfterCut = 0;\n            if (daysCutting == cuttingDuration)\n                PostHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt\n        }\n\n        // Do the DM removal\n        private void removeDM(double removeAmount)\n        {\n            double existingWt = Pasture[0].Harvestable.Wt;  // + Pasture[1].Harvestable.Wt\n\n            // Check whether we harvest anything\n            if (existingWt >= removeAmount)\n            {\n                foreach (AgPasture.PastureSpecies species in Pasture)\n                {\n                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;\n                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\n                }\n                \n                // get total harvested\n                DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt\n                DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN\n                HarvestedWt = DefoliatedWt;\n                HarvestedN = DefoliatedN;\n\n                // get amounts actually removed from field and that to be returned (dung/urine)\n                if (DMRemoveType == removeDMTypes.RemoveAll)\n                    fractionDM2Remove = 1.0;\n                else if (DMRemoveType == removeDMTypes.RemoveNone)\n                    fractionDM2Remove = 0.0;\n                else\n                {\n                    fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt\n                    fractionDM2Remove /= removeAmount;\n                }\n                \n                RemovedWt = HarvestedWt * fractionDM2Remove;\n                RemovedN = HarvestedN * FractionN2Remove;\n                ReturnedWt = HarvestedWt - RemovedWt;\n                ReturnedN = HarvestedN - RemovedN;\n                NReturnedInDung = ReturnedN * ProportionN2Dung;\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\n            }\n        }\n\n        // Return dung and urine\n        private void returnExcreta()\n        {\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\n            {\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\n                float[] dltdm = new float[] { (Single)ReturnedWt };\n                float[] dltn = new float[] { (Single)NReturnedInDung };\n                float[] dltp = new float[] { 0 };\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\n\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\n                BiomassDung.dm_type = type;\n                BiomassDung.dlt_crop_dm = dltdm;\n                BiomassDung.dlt_dm_n = dltn;\n                BiomassDung.dlt_dm_p = dltp;\n                BiomassDung.fraction_to_residue = fraction;\n                BiomassRemoved.Invoke(BiomassDung);\n            }\n\n            if (NReturnedInUrine > 0.0)\n            {\n                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\n            }\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "CutRotationStartDate",
                              "Value": "1900-07-01"
                            },
                            {
                              "Key": "CutRotationEndDate",
                              "Value": "2100-12-31"
                            },
                            {
                              "Key": "CutInterval",
                              "Value": "1"
                            },
                            {
                              "Key": "IntervalType",
                              "Value": "FixedInterval"
                            },
                            {
                              "Key": "DurationOfCut",
                              "Value": "1"
                            },
                            {
                              "Key": "RemoveAmountType",
                              "Value": "ResidualDM"
                            },
                            {
                              "Key": "AmountGiven",
                              "Value": "2250"
                            },
                            {
                              "Key": "DMRemoveType",
                              "Value": "RemoveAll"
                            },
                            {
                              "Key": "FractionN2Remove",
                              "Value": "1"
                            },
                            {
                              "Key": "ProportionN2Dung",
                              "Value": "0"
                            }
                          ],
                          "Name": "CutRotationSingle",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn ferliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "AllowFertiliser",
                              "Value": "no"
                            },
                            {
                              "Key": "Depth2SoilN",
                              "Value": "500"
                            },
                            {
                              "Key": "CriticalSoilN",
                              "Value": "50"
                            },
                            {
                              "Key": "FertNAmount",
                              "Value": "25"
                            },
                            {
                              "Key": "FertType",
                              "Value": "UreaN"
                            },
                            {
                              "Key": "FertApplicationDepth",
                              "Value": "1"
                            },
                            {
                              "Key": "FertMinimumDays",
                              "Value": "1"
                            }
                          ],
                          "Name": "AutomaticFertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }\n        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool IrrigationIsAlwaysAllowed { get; set; }\n        \n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n            if (allowIrrigationAll == answerType.yes)\n                IrrigationIsAlwaysAllowed = true; \n\n\n\n\n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if (IrrigationIsAlwaysAllowed)\n                CropIsActive = true;  // might not be but we don't care\n            else if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "allowIrrigation",
                              "Value": "yes"
                            },
                            {
                              "Key": "allowIrrigationAll",
                              "Value": "yes"
                            },
                            {
                              "Key": "seasonStart",
                              "Value": "15-Aug"
                            },
                            {
                              "Key": "seasonEnd",
                              "Value": "30-May"
                            },
                            {
                              "Key": "seasonsAllocation",
                              "Value": "10000"
                            },
                            {
                              "Key": "triggerDeficit",
                              "Value": "99"
                            },
                            {
                              "Key": "targetDeficit",
                              "Value": "100"
                            },
                            {
                              "Key": "returndays",
                              "Value": "1"
                            },
                            {
                              "Key": "maximumAmount",
                              "Value": "5"
                            },
                            {
                              "Key": "depthPAWC",
                              "Value": "600"
                            }
                          ],
                          "Name": "AutomaticIrrigation",
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "ResourceName": "Fertiliser",
                      "Name": "Fertiliser",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "InitialResidueName": "Sward",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 0.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": null,
                      "LocalName": "Stores lots of water",
                      "Site": "Made up",
                      "NearestTown": null,
                      "Region": null,
                      "State": null,
                      "Country": null,
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "YearOfSampling": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "NO3N": [
                            5.0,
                            5.0,
                            5.0,
                            5.0
                          ],
                          "NH4N": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PH": [
                            6.0,
                            6.0,
                            6.0,
                            6.0
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "LabileP": null,
                          "UnavailableP": null,
                          "ECMetadata": null,
                          "CLMetadata": null,
                          "ESPMetadata": null,
                          "PHMetadata": null,
                          "Name": "Chemical",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "ParticleSizeClay": [
                            60.0,
                            60.0,
                            60.0,
                            60.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "Rocks": null,
                          "Texture": null,
                          "BD": [
                            1.3,
                            1.3,
                            1.3,
                            1.3
                          ],
                          "AirDry": [
                            0.05,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "LL15": [
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "DUL": [
                            0.45,
                            0.45,
                            0.45,
                            0.45
                          ],
                          "SAT": [
                            0.5,
                            0.5,
                            0.5,
                            0.5
                          ],
                          "KS": [
                            500.0,
                            500.0,
                            500.0,
                            500.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "RocksMetadata": null,
                          "TextureMetadata": null,
                          "ParticleSizeSandMetadata": null,
                          "ParticleSizeSiltMetadata": null,
                          "ParticleSizeClayMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 6.0,
                          "WinterCona": 3.5,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "DischargeWidth": 0.0,
                          "CatchmentArea": 0.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "SWCON": [
                            0.3,
                            0.3,
                            0.3,
                            0.3
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "ResourceName": "WaterBalance",
                          "Name": "SoilWater",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "NPartitionApproach": 0,
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "Carbon": [
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FOM": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "CarbonMetadata": null,
                          "FOMMetadata": null,
                          "Name": "Organic",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 1,
                          "FractionFull": 0.95,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "Temperature",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[AGPRyegrass].AboveGroundWt as PlantMass",
                        "[AGPRyegrass].HarvestedWt as Harvested",
                        "[AGPRyegrass].WaterDemand as SW_Demand",
                        "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                        "[AGPRyegrass].GlfWaterSupply as glfWater",
                        "[AGPRyegrass].GlfNSupply as glfNitrogen",
                        "sum([Soil].SoilWater.SWmm) as SoilWater",
                        "sum([Soil].SoilNitrogen.NH4.kgha)+sum([Soil].SoilNitrogen.NO3.kgha) as SoilNitrogen",
                        "[Irrigation].IrrigationApplied as Irrigation",
                        "[Fertiliser].NitrogenApplied as Fertiliser"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ThreeZoneSimulationInitialUniformSoilN",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Zone1",
                  "Children": [
                    {
                      "$type": "Models.Core.Folder, Models",
                      "ShowInDocs": true,
                      "GraphsPerPage": 6,
                      "Name": "Managers",
                      "Children": [
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing System.Linq;\nusing System;\nusing System.Collections.Generic;\nusing System.Xml.Serialization;\nusing Models.Core;\nusing Models.PMF;\nusing APSIM.Shared.Utilities;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Root depth in the plant's zone (mm): \")]  public double RootDepth { get; set; }\n        [Description(\"Root mass  in the plant's zone (mm): \")]  public double RootMass { get; set; }\n\n        [Description(\"Name of zone ot the left: \")] public string Zone0Name { get; set; }\n        [Description(\"Proportionate depth and mass in zone to the left (-): \")]  public double Zone0Prop { get; set; }\n\n        [Description(\"Name of zone ot the right: \")] public string Zone2Name { get; set; }\n        [Description(\"Proportionate depth and mass in zone to the right (-): \")]  public double Zone2Prop { get; set; }\n\n        // - Outputs from this manager\n\n        // - Internal variables\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            int SpeciesNum = 0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                SpeciesNum += 1;\n                if (SpeciesNum == 1)\n                {\n                    if (Zone0Prop > 0)\n                        species.AddZone(zoneName: Zone0Name, rootDepth: Zone0Prop * RootDepth, rootDM: Zone0Prop * RootMass);\n                    if (Zone2Prop > 0)\n                        species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass);\n                }\n            }\n\n            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);\n            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "RootDepth",
                              "Value": "600"
                            },
                            {
                              "Key": "RootMass",
                              "Value": "500"
                            },
                            {
                              "Key": "Zone0Name",
                              "Value": "Zone0"
                            },
                            {
                              "Key": "Zone0Prop",
                              "Value": "0.3"
                            },
                            {
                              "Key": "Zone2Name",
                              "Value": "Zone2"
                            },
                            {
                              "Key": "Zone2Prop",
                              "Value": "0.3"
                            }
                          ],
                          "Name": "DoRootsThreeZone",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Date to begin the rotation: \")]\n        public DateTime CutRotationStartDate { get; set; }\n\n        [Description(\"Date to finish the rotation: \")]\n        public DateTime CutRotationEndDate { get; set; }\n\n        [Description(\"Rotation interval (days): \")]\n        public int CutInterval { get; set; }\n\n        [Description(\"How the interval is defined: \")]\n        public rotationIntervalTypes IntervalType { get; set; }\n\n        [Description(\"Duration of each event (days): \")]\n        public int DurationOfCut { get; set; }\n\n        [Description(\"What amount is being defined: \")]\n        public removeAmountTypes RemoveAmountType { get; set; }\n\n        [Description(\"Amount to use (kg/ha): \")]\n        public double AmountGiven { get; set; }\n\n        [Description(\"Fraction of DM that is removed from the field:\")]\n        public removeDMTypes DMRemoveType { get; set; }\n\n        [Description(\"Fraction of N that is removed from the field (0-1):\")]\n        public double FractionN2Remove { get; set; }\n\n        [Description(\"Proportion of N returned in dung (0-1):\")]\n        public double ProportionN2Dung { get; set; }\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today\n        public double DefoliatedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today\n        public double DefoliatedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today\n        public double HarvestedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today\n        public double HarvestedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field\n        public double RemovedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field\n        public double RemovedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field\n        public double ReturnedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field\n        public double ReturnedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)\n        public double NReturnedInDung { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)\n        public double NReturnedInUrine { get; set; }\n        [JsonIgnore][Units(\"day\")]// Description: Number of days after last defoliation\n        public int DaysAfterCut { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut\n        public double PreHarvestDM { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut\n        public double PostHarvestDM { get; set; }\n        \n        // - Internal variables\n        // fraction of harvested Dm to actually remove from field\n        private double fractionDM2Remove = 1.0;\n        // flag whether defoliation is allowed\n        private bool rotationAllowed = true;\n        // number of days for each defoliation event\n        private int cuttingDuration = 0;\n        // counter for day within each defoliation\n        private int daysCutting = 0;\n        // type of interval (Fixed or target)\n        private string intervalType;\n        // total herbage to remove in g/m2 per day\n        private double herbageToRemove;\n        // type of DM amount (ResidualDM or DMToRemove)\n        private string amountType;\n        // auxiliary flag for defoliation\n        private bool aCutHasHappened = false;\n\n        // - Event to add residue or dung to surface OM\n        public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n\n            // reset variables\n            DaysAfterCut = 0;\n            resetVariables();\n            cuttingDuration = DurationOfCut;\n            \n            // get the type of amount given\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\n                amountType = \"SetResidueAmount\";\n            else\n                amountType = \"SetRemoveAmount\";\n\n            // get the type of amount given\n            if (IntervalType == rotationIntervalTypes.FixedInterval)\n                intervalType = \"Fixed\";\n            else\n                intervalType = \"Target\";\n\n            // make sure that rotation start when startDate < simulationStartDay\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\n                CutRotationStartDate = Clock.Today;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (rotationAllowed)\n            {\n                if (Clock.Today == CutRotationStartDate)\n                    DaysAfterCut = CutInterval;\n\n                // Check whether we can defoliate\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))\n                {\n                    // Check whether we should start a defoliation\n                    if (DaysAfterCut >= (CutInterval - 1))\n                    {\n                        Graze(AmountGiven, amountType, DurationOfCut);\n                    }\n                }\n            }\n\n            // Check whether we need to continue cutting\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\n            {\n                // reset outputs\n                resetVariables();\n\n                removeDM(herbageToRemove);\n                returnExcreta();\n                daysCutting += 1;\n                if (daysCutting == cuttingDuration)\n                    PostHarvestDM = Pasture[0].Standing.Wt; //+ Pasture[1].Standing.Wt\n            }\n\n            // reset outputs\n            if (daysCutting < 0)\n            {\n                resetVariables();\n                daysCutting = 0;\n            }\n        }\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            // Check whether a cutting has finished\n            if (daysCutting == cuttingDuration)\n            {\n                aCutHasHappened = true;\n                daysCutting = -1;\n            }\n\n            // Increase the counter for days after cutting\n            if (aCutHasHappened && (daysCutting == 0))\n                DaysAfterCut += 1;\n        }\n\n        public enum removeAmountTypes\n        {\n            /// <summary>Setting DM amount to remove</summary>\n            DMToRemove,\n            /// <summary>Setting residual DM amount</summary>\n            ResidualDM\n        }\n\n        public enum rotationIntervalTypes\n        {\n            /// <summary>Setting a fixed interval</summary>\n            FixedInterval,\n            /// <summary>Setting a target (minimum) inteval</summary>\n            TargetInterval\n        }\n\n        public enum removeDMTypes\n        {\n            /// <summary>Remove all DM</summary>\n            RemoveAll,\n            /// <summary>Remove no DM</summary>\n            RemoveNone,\n            /// <summary>Remove a fraction based on digestibility</summary>\n            BasedOnDigestibility\n        }\n\n        // Resets the values of all outputs\n        private void resetVariables()\n        {\n            DefoliatedWt = 0.0;\n            DefoliatedN = 0.0;\n            HarvestedWt = 0.0;\n            HarvestedN = 0.0;\n            RemovedWt = 0.0;\n            RemovedN = 0.0;\n            ReturnedWt = 0.0;\n            ReturnedN = 0.0;\n            NReturnedInDung = 0.0;\n            NReturnedInUrine = 0.0;\n        }\n\n        // Description: Perform the basic calculations for defoliation\n        public void Graze(double amountDM, string amountType, int duration)\n        {\n            // Get the existing plant amount\n            PreHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt\n            \n            // Check the amount to remove and print some info\n            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))\n            {\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = amountDM / duration;\n            }\n            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))\n            {\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\n            }\n            else\n            {\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);\n                if (intervalType == \"Fixed\")\n                    DaysAfterCut = -duration;\n                return;\n            }\n\n            cuttingDuration = duration;\n            // Preform first defoliation\n            removeDM(herbageToRemove);\n            returnExcreta();\n            daysCutting = 1;\n            DaysAfterCut = 0;\n            if (daysCutting == cuttingDuration)\n                PostHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt\n        }\n\n        // Do the DM removal\n        private void removeDM(double removeAmount)\n        {\n            double existingWt = Pasture[0].Harvestable.Wt;  // + Pasture[1].Harvestable.Wt\n\n            // Check whether we harvest anything\n            if (existingWt >= removeAmount)\n            {\n                foreach (AgPasture.PastureSpecies species in Pasture)\n                {\n                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;\n                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\n                }\n                \n                // get total harvested\n                DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt\n                DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN\n                HarvestedWt = DefoliatedWt;\n                HarvestedN = DefoliatedN;\n\n                // get amounts actually removed from field and that to be returned (dung/urine)\n                if (DMRemoveType == removeDMTypes.RemoveAll)\n                    fractionDM2Remove = 1.0;\n                else if (DMRemoveType == removeDMTypes.RemoveNone)\n                    fractionDM2Remove = 0.0;\n                else\n                {\n                    fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt\n                    fractionDM2Remove /= removeAmount;\n                }\n                \n                RemovedWt = HarvestedWt * fractionDM2Remove;\n                RemovedN = HarvestedN * FractionN2Remove;\n                ReturnedWt = HarvestedWt - RemovedWt;\n                ReturnedN = HarvestedN - RemovedN;\n                NReturnedInDung = ReturnedN * ProportionN2Dung;\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\n            }\n        }\n\n        // Return dung and urine\n        private void returnExcreta()\n        {\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\n            {\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\n                float[] dltdm = new float[] { (Single)ReturnedWt };\n                float[] dltn = new float[] { (Single)NReturnedInDung };\n                float[] dltp = new float[] { 0 };\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\n\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\n                BiomassDung.dm_type = type;\n                BiomassDung.dlt_crop_dm = dltdm;\n                BiomassDung.dlt_dm_n = dltn;\n                BiomassDung.dlt_dm_p = dltp;\n                BiomassDung.fraction_to_residue = fraction;\n                BiomassRemoved.Invoke(BiomassDung);\n            }\n\n            if (NReturnedInUrine > 0.0)\n            {\n                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\n            }\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "CutRotationStartDate",
                              "Value": "1900-07-01"
                            },
                            {
                              "Key": "CutRotationEndDate",
                              "Value": "2100-12-31"
                            },
                            {
                              "Key": "CutInterval",
                              "Value": "1"
                            },
                            {
                              "Key": "IntervalType",
                              "Value": "FixedInterval"
                            },
                            {
                              "Key": "DurationOfCut",
                              "Value": "1"
                            },
                            {
                              "Key": "RemoveAmountType",
                              "Value": "ResidualDM"
                            },
                            {
                              "Key": "AmountGiven",
                              "Value": "2250"
                            },
                            {
                              "Key": "DMRemoveType",
                              "Value": "RemoveAll"
                            },
                            {
                              "Key": "FractionN2Remove",
                              "Value": "1"
                            },
                            {
                              "Key": "ProportionN2Dung",
                              "Value": "0"
                            }
                          ],
                          "Name": "CutRotationSingle",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn ferliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "AllowFertiliser",
                              "Value": "no"
                            },
                            {
                              "Key": "Depth2SoilN",
                              "Value": "500"
                            },
                            {
                              "Key": "CriticalSoilN",
                              "Value": "50"
                            },
                            {
                              "Key": "FertNAmount",
                              "Value": "25"
                            },
                            {
                              "Key": "FertType",
                              "Value": "UreaN"
                            },
                            {
                              "Key": "FertApplicationDepth",
                              "Value": "1"
                            },
                            {
                              "Key": "FertMinimumDays",
                              "Value": "1"
                            }
                          ],
                          "Name": "AutomaticFertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }\n        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool IrrigationIsAlwaysAllowed { get; set; }\n        \n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n            if (allowIrrigationAll == answerType.yes)\n                IrrigationIsAlwaysAllowed = true; \n\n\n\n\n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if (IrrigationIsAlwaysAllowed)\n                CropIsActive = true;  // might not be but we don't care\n            else if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "allowIrrigation",
                              "Value": "yes"
                            },
                            {
                              "Key": "allowIrrigationAll",
                              "Value": "yes"
                            },
                            {
                              "Key": "seasonStart",
                              "Value": "15-Aug"
                            },
                            {
                              "Key": "seasonEnd",
                              "Value": "30-May"
                            },
                            {
                              "Key": "seasonsAllocation",
                              "Value": "10000"
                            },
                            {
                              "Key": "triggerDeficit",
                              "Value": "99"
                            },
                            {
                              "Key": "targetDeficit",
                              "Value": "100"
                            },
                            {
                              "Key": "returndays",
                              "Value": "1"
                            },
                            {
                              "Key": "maximumAmount",
                              "Value": "5"
                            },
                            {
                              "Key": "depthPAWC",
                              "Value": "600"
                            }
                          ],
                          "Name": "AutomaticIrrigation",
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "ResourceName": "Fertiliser",
                      "Name": "Fertiliser",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "InitialResidueName": "Sward",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 0.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": null,
                      "LocalName": "Stores lots of water",
                      "Site": "Made up",
                      "NearestTown": null,
                      "Region": null,
                      "State": null,
                      "Country": null,
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "YearOfSampling": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "NO3N": [
                            5.0,
                            5.0,
                            5.0,
                            5.0
                          ],
                          "NH4N": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PH": [
                            6.0,
                            6.0,
                            6.0,
                            6.0
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "LabileP": null,
                          "UnavailableP": null,
                          "ECMetadata": null,
                          "CLMetadata": null,
                          "ESPMetadata": null,
                          "PHMetadata": null,
                          "Name": "Chemical",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "ParticleSizeClay": [
                            60.0,
                            60.0,
                            60.0,
                            60.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "Rocks": null,
                          "Texture": null,
                          "BD": [
                            1.3,
                            1.3,
                            1.3,
                            1.3
                          ],
                          "AirDry": [
                            0.05,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "LL15": [
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "DUL": [
                            0.45,
                            0.45,
                            0.45,
                            0.45
                          ],
                          "SAT": [
                            0.5,
                            0.5,
                            0.5,
                            0.5
                          ],
                          "KS": [
                            500.0,
                            500.0,
                            500.0,
                            500.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "RocksMetadata": null,
                          "TextureMetadata": null,
                          "ParticleSizeSandMetadata": null,
                          "ParticleSizeSiltMetadata": null,
                          "ParticleSizeClayMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 6.0,
                          "WinterCona": 3.5,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "DischargeWidth": 0.0,
                          "CatchmentArea": 0.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "SWCON": [
                            0.3,
                            0.3,
                            0.3,
                            0.3
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "ResourceName": "WaterBalance",
                          "Name": "SoilWater",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "NPartitionApproach": 0,
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "Carbon": [
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FOM": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "CarbonMetadata": null,
                          "FOMMetadata": null,
                          "Name": "Organic",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 1,
                          "FractionFull": 0.95,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "Temperature",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[AGPRyegrass].AboveGroundWt as PlantMass",
                        "[AGPRyegrass].HarvestedWt as Harvested",
                        "[AGPRyegrass].WaterDemand as SW_Demand",
                        "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                        "[AGPRyegrass].GlfWaterSupply as glfWater",
                        "[AGPRyegrass].GlfNSupply as glfNitrogen",
                        "sum([Soil].SoilWater.SWmm) as SoilWater",
                        "sum([Soil].SoilNitrogen.NH4.kgha)+sum([Soil].SoilNitrogen.NO3.kgha) as SoilNitrogen",
                        "[Irrigation].IrrigationApplied as Irrigation",
                        "[Fertiliser].NitrogenApplied as Fertiliser"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ThreeZoneSimulationInitialUniformSoilN",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Zone2",
                  "Children": [
                    {
                      "$type": "Models.Core.Folder, Models",
                      "ShowInDocs": true,
                      "GraphsPerPage": 6,
                      "Name": "Managers",
                      "Children": [
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing System.Linq;\nusing System;\nusing System.Collections.Generic;\nusing System.Xml.Serialization;\nusing Models.Core;\nusing Models.PMF;\nusing APSIM.Shared.Utilities;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Root depth in the plant's zone (mm): \")]  public double RootDepth { get; set; }\n        [Description(\"Root mass  in the plant's zone (mm): \")]  public double RootMass { get; set; }\n\n        [Description(\"Name of zone ot the left: \")] public string Zone0Name { get; set; }\n        [Description(\"Proportionate depth and mass in zone to the left (-): \")]  public double Zone0Prop { get; set; }\n\n        [Description(\"Name of zone ot the right: \")] public string Zone2Name { get; set; }\n        [Description(\"Proportionate depth and mass in zone to the right (-): \")]  public double Zone2Prop { get; set; }\n\n        // - Outputs from this manager\n\n        // - Internal variables\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            int SpeciesNum = 0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                SpeciesNum += 1;\n                if (SpeciesNum == 1)\n                {\n                    if (Zone0Prop > 0)\n                        species.AddZone(zoneName: Zone0Name, rootDepth: Zone0Prop * RootDepth, rootDM: Zone0Prop * RootMass);\n                    if (Zone2Prop > 0)\n                        species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass);\n                }\n            }\n\n            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);\n            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "RootDepth",
                              "Value": "600"
                            },
                            {
                              "Key": "RootMass",
                              "Value": "500"
                            },
                            {
                              "Key": "Zone0Name",
                              "Value": "Zone1"
                            },
                            {
                              "Key": "Zone0Prop",
                              "Value": "0"
                            },
                            {
                              "Key": "Zone2Name",
                              "Value": "Zone2"
                            },
                            {
                              "Key": "Zone2Prop",
                              "Value": "0"
                            }
                          ],
                          "Name": "DoRootsThreeZone",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Date to begin the rotation: \")]\n        public DateTime CutRotationStartDate { get; set; }\n\n        [Description(\"Date to finish the rotation: \")]\n        public DateTime CutRotationEndDate { get; set; }\n\n        [Description(\"Rotation interval (days): \")]\n        public int CutInterval { get; set; }\n\n        [Description(\"How the interval is defined: \")]\n        public rotationIntervalTypes IntervalType { get; set; }\n\n        [Description(\"Duration of each event (days): \")]\n        public int DurationOfCut { get; set; }\n\n        [Description(\"What amount is being defined: \")]\n        public removeAmountTypes RemoveAmountType { get; set; }\n\n        [Description(\"Amount to use (kg/ha): \")]\n        public double AmountGiven { get; set; }\n\n        [Description(\"Fraction of DM that is removed from the field:\")]\n        public removeDMTypes DMRemoveType { get; set; }\n\n        [Description(\"Fraction of N that is removed from the field (0-1):\")]\n        public double FractionN2Remove { get; set; }\n\n        [Description(\"Proportion of N returned in dung (0-1):\")]\n        public double ProportionN2Dung { get; set; }\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today\n        public double DefoliatedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today\n        public double DefoliatedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today\n        public double HarvestedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today\n        public double HarvestedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field\n        public double RemovedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field\n        public double RemovedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field\n        public double ReturnedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field\n        public double ReturnedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)\n        public double NReturnedInDung { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)\n        public double NReturnedInUrine { get; set; }\n        [JsonIgnore][Units(\"day\")]// Description: Number of days after last defoliation\n        public int DaysAfterCut { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut\n        public double PreHarvestDM { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut\n        public double PostHarvestDM { get; set; }\n        \n        // - Internal variables\n        // fraction of harvested Dm to actually remove from field\n        private double fractionDM2Remove = 1.0;\n        // flag whether defoliation is allowed\n        private bool rotationAllowed = true;\n        // number of days for each defoliation event\n        private int cuttingDuration = 0;\n        // counter for day within each defoliation\n        private int daysCutting = 0;\n        // type of interval (Fixed or target)\n        private string intervalType;\n        // total herbage to remove in g/m2 per day\n        private double herbageToRemove;\n        // type of DM amount (ResidualDM or DMToRemove)\n        private string amountType;\n        // auxiliary flag for defoliation\n        private bool aCutHasHappened = false;\n\n        // - Event to add residue or dung to surface OM\n        public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n\n            // reset variables\n            DaysAfterCut = 0;\n            resetVariables();\n            cuttingDuration = DurationOfCut;\n            \n            // get the type of amount given\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\n                amountType = \"SetResidueAmount\";\n            else\n                amountType = \"SetRemoveAmount\";\n\n            // get the type of amount given\n            if (IntervalType == rotationIntervalTypes.FixedInterval)\n                intervalType = \"Fixed\";\n            else\n                intervalType = \"Target\";\n\n            // make sure that rotation start when startDate < simulationStartDay\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\n                CutRotationStartDate = Clock.Today;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (rotationAllowed)\n            {\n                if (Clock.Today == CutRotationStartDate)\n                    DaysAfterCut = CutInterval;\n\n                // Check whether we can defoliate\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))\n                {\n                    // Check whether we should start a defoliation\n                    if (DaysAfterCut >= (CutInterval - 1))\n                    {\n                        Graze(AmountGiven, amountType, DurationOfCut);\n                    }\n                }\n            }\n\n            // Check whether we need to continue cutting\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\n            {\n                // reset outputs\n                resetVariables();\n\n                removeDM(herbageToRemove);\n                returnExcreta();\n                daysCutting += 1;\n                if (daysCutting == cuttingDuration)\n                    PostHarvestDM = Pasture[0].Standing.Wt; //+ Pasture[1].Standing.Wt\n            }\n\n            // reset outputs\n            if (daysCutting < 0)\n            {\n                resetVariables();\n                daysCutting = 0;\n            }\n        }\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            // Check whether a cutting has finished\n            if (daysCutting == cuttingDuration)\n            {\n                aCutHasHappened = true;\n                daysCutting = -1;\n            }\n\n            // Increase the counter for days after cutting\n            if (aCutHasHappened && (daysCutting == 0))\n                DaysAfterCut += 1;\n        }\n\n        public enum removeAmountTypes\n        {\n            /// <summary>Setting DM amount to remove</summary>\n            DMToRemove,\n            /// <summary>Setting residual DM amount</summary>\n            ResidualDM\n        }\n\n        public enum rotationIntervalTypes\n        {\n            /// <summary>Setting a fixed interval</summary>\n            FixedInterval,\n            /// <summary>Setting a target (minimum) inteval</summary>\n            TargetInterval\n        }\n\n        public enum removeDMTypes\n        {\n            /// <summary>Remove all DM</summary>\n            RemoveAll,\n            /// <summary>Remove no DM</summary>\n            RemoveNone,\n            /// <summary>Remove a fraction based on digestibility</summary>\n            BasedOnDigestibility\n        }\n\n        // Resets the values of all outputs\n        private void resetVariables()\n        {\n            DefoliatedWt = 0.0;\n            DefoliatedN = 0.0;\n            HarvestedWt = 0.0;\n            HarvestedN = 0.0;\n            RemovedWt = 0.0;\n            RemovedN = 0.0;\n            ReturnedWt = 0.0;\n            ReturnedN = 0.0;\n            NReturnedInDung = 0.0;\n            NReturnedInUrine = 0.0;\n        }\n\n        // Description: Perform the basic calculations for defoliation\n        public void Graze(double amountDM, string amountType, int duration)\n        {\n            // Get the existing plant amount\n            PreHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt\n            \n            // Check the amount to remove and print some info\n            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))\n            {\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = amountDM / duration;\n            }\n            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))\n            {\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\n            }\n            else\n            {\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);\n                if (intervalType == \"Fixed\")\n                    DaysAfterCut = -duration;\n                return;\n            }\n\n            cuttingDuration = duration;\n            // Preform first defoliation\n            removeDM(herbageToRemove);\n            returnExcreta();\n            daysCutting = 1;\n            DaysAfterCut = 0;\n            if (daysCutting == cuttingDuration)\n                PostHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt\n        }\n\n        // Do the DM removal\n        private void removeDM(double removeAmount)\n        {\n            double existingWt = Pasture[0].Harvestable.Wt;  // + Pasture[1].Harvestable.Wt\n\n            // Check whether we harvest anything\n            if (existingWt >= removeAmount)\n            {\n                foreach (AgPasture.PastureSpecies species in Pasture)\n                {\n                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;\n                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\n                }\n                \n                // get total harvested\n                DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt\n                DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN\n                HarvestedWt = DefoliatedWt;\n                HarvestedN = DefoliatedN;\n\n                // get amounts actually removed from field and that to be returned (dung/urine)\n                if (DMRemoveType == removeDMTypes.RemoveAll)\n                    fractionDM2Remove = 1.0;\n                else if (DMRemoveType == removeDMTypes.RemoveNone)\n                    fractionDM2Remove = 0.0;\n                else\n                {\n                    fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt\n                    fractionDM2Remove /= removeAmount;\n                }\n                \n                RemovedWt = HarvestedWt * fractionDM2Remove;\n                RemovedN = HarvestedN * FractionN2Remove;\n                ReturnedWt = HarvestedWt - RemovedWt;\n                ReturnedN = HarvestedN - RemovedN;\n                NReturnedInDung = ReturnedN * ProportionN2Dung;\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\n            }\n        }\n\n        // Return dung and urine\n        private void returnExcreta()\n        {\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\n            {\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\n                float[] dltdm = new float[] { (Single)ReturnedWt };\n                float[] dltn = new float[] { (Single)NReturnedInDung };\n                float[] dltp = new float[] { 0 };\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\n\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\n                BiomassDung.dm_type = type;\n                BiomassDung.dlt_crop_dm = dltdm;\n                BiomassDung.dlt_dm_n = dltn;\n                BiomassDung.dlt_dm_p = dltp;\n                BiomassDung.fraction_to_residue = fraction;\n                BiomassRemoved.Invoke(BiomassDung);\n            }\n\n            if (NReturnedInUrine > 0.0)\n            {\n                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\n            }\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "CutRotationStartDate",
                              "Value": "1900-07-01"
                            },
                            {
                              "Key": "CutRotationEndDate",
                              "Value": "2100-12-31"
                            },
                            {
                              "Key": "CutInterval",
                              "Value": "1"
                            },
                            {
                              "Key": "IntervalType",
                              "Value": "FixedInterval"
                            },
                            {
                              "Key": "DurationOfCut",
                              "Value": "1"
                            },
                            {
                              "Key": "RemoveAmountType",
                              "Value": "ResidualDM"
                            },
                            {
                              "Key": "AmountGiven",
                              "Value": "2250"
                            },
                            {
                              "Key": "DMRemoveType",
                              "Value": "RemoveAll"
                            },
                            {
                              "Key": "FractionN2Remove",
                              "Value": "1"
                            },
                            {
                              "Key": "ProportionN2Dung",
                              "Value": "0"
                            }
                          ],
                          "Name": "CutRotationSingle",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn ferliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "AllowFertiliser",
                              "Value": "no"
                            },
                            {
                              "Key": "Depth2SoilN",
                              "Value": "500"
                            },
                            {
                              "Key": "CriticalSoilN",
                              "Value": "50"
                            },
                            {
                              "Key": "FertNAmount",
                              "Value": "25"
                            },
                            {
                              "Key": "FertType",
                              "Value": "UreaN"
                            },
                            {
                              "Key": "FertApplicationDepth",
                              "Value": "1"
                            },
                            {
                              "Key": "FertMinimumDays",
                              "Value": "1"
                            }
                          ],
                          "Name": "AutomaticFertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }\n        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool IrrigationIsAlwaysAllowed { get; set; }\n        \n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n            if (allowIrrigationAll == answerType.yes)\n                IrrigationIsAlwaysAllowed = true; \n\n\n\n\n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if (IrrigationIsAlwaysAllowed)\n                CropIsActive = true;  // might not be but we don't care\n            else if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "allowIrrigation",
                              "Value": "yes"
                            },
                            {
                              "Key": "allowIrrigationAll",
                              "Value": "yes"
                            },
                            {
                              "Key": "seasonStart",
                              "Value": "15-Aug"
                            },
                            {
                              "Key": "seasonEnd",
                              "Value": "30-May"
                            },
                            {
                              "Key": "seasonsAllocation",
                              "Value": "10000"
                            },
                            {
                              "Key": "triggerDeficit",
                              "Value": "99"
                            },
                            {
                              "Key": "targetDeficit",
                              "Value": "100"
                            },
                            {
                              "Key": "returndays",
                              "Value": "1"
                            },
                            {
                              "Key": "maximumAmount",
                              "Value": "5"
                            },
                            {
                              "Key": "depthPAWC",
                              "Value": "600"
                            }
                          ],
                          "Name": "AutomaticIrrigation",
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "ResourceName": "Fertiliser",
                      "Name": "Fertiliser",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "InitialResidueName": "Sward",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 0.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": null,
                      "LocalName": "Stores lots of water",
                      "Site": "Made up",
                      "NearestTown": null,
                      "Region": null,
                      "State": null,
                      "Country": null,
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "YearOfSampling": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "NO3N": [
                            5.0,
                            5.0,
                            5.0,
                            5.0
                          ],
                          "NH4N": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PH": [
                            6.0,
                            6.0,
                            6.0,
                            6.0
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "LabileP": null,
                          "UnavailableP": null,
                          "ECMetadata": null,
                          "CLMetadata": null,
                          "ESPMetadata": null,
                          "PHMetadata": null,
                          "Name": "Chemical",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "ParticleSizeClay": [
                            60.0,
                            60.0,
                            60.0,
                            60.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "Rocks": null,
                          "Texture": null,
                          "BD": [
                            1.3,
                            1.3,
                            1.3,
                            1.3
                          ],
                          "AirDry": [
                            0.05,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "LL15": [
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "DUL": [
                            0.45,
                            0.45,
                            0.45,
                            0.45
                          ],
                          "SAT": [
                            0.5,
                            0.5,
                            0.5,
                            0.5
                          ],
                          "KS": [
                            500.0,
                            500.0,
                            500.0,
                            500.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "RocksMetadata": null,
                          "TextureMetadata": null,
                          "ParticleSizeSandMetadata": null,
                          "ParticleSizeSiltMetadata": null,
                          "ParticleSizeClayMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 6.0,
                          "WinterCona": 3.5,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "DischargeWidth": 0.0,
                          "CatchmentArea": 0.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "SWCON": [
                            0.3,
                            0.3,
                            0.3,
                            0.3
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "ResourceName": "WaterBalance",
                          "Name": "SoilWater",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "NPartitionApproach": 0,
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "Carbon": [
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FOM": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "CarbonMetadata": null,
                          "FOMMetadata": null,
                          "Name": "Organic",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 1,
                          "FractionFull": 0.95,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "Temperature",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[AGPRyegrass].AboveGroundWt as PlantMass",
                        "[AGPRyegrass].HarvestedWt as Harvested",
                        "[AGPRyegrass].WaterDemand as SW_Demand",
                        "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                        "[AGPRyegrass].GlfWaterSupply as glfWater",
                        "[AGPRyegrass].GlfNSupply as glfNitrogen",
                        "sum([Soil].SoilWater.SWmm) as SoilWater",
                        "sum([Soil].SoilNitrogen.NH4.kgha)+sum([Soil].SoilNitrogen.NO3.kgha) as SoilNitrogen",
                        "[Irrigation].IrrigationApplied as Irrigation",
                        "[Fertiliser].NitrogenApplied as Fertiliser"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ThreeZoneSimulationInitialUniformSoilN",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        },
        {
          "$type": "Models.Core.Folder, Models",
          "ShowInDocs": true,
          "GraphsPerPage": 6,
          "Name": "Conceptual Three Zone Simulation with Initial Nonuniform Soil N",
          "Children": [
            {
              "$type": "Models.Memo, Models",
              "Text": "This simulation differs from the previous only in that Zone0 initially starts with 100 kg of mineral N in the soil. This results in the expected changes in plant performance and depletion of soil N and water.\r\n",
              "Name": "Memo ThreeZoneSimulationInitialNonuniformSoilN",
              "Children": [],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 2600.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "PlantWt",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "PlantMass",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "Harvested",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "Harvested",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterDemand",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Demand",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Demand",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 5.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterUptake",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -1663232,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SW_Uptake",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Uptake",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "WaterStress",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "glfWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": 1.05,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "NStress",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "glfNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Ryegrass",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 50.0,
                  "Maximum": 275.0,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilWater",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SoilWater",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Water",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "SoilNitrogen",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "SoilNitrogen",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": false,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Nitrogen",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "IrrigationApplied",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "Irrigation",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Irrigation",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Graph, Models",
              "Caption": null,
              "Axis": [
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 0,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": 0.0,
                  "Maximum": null,
                  "Interval": null
                },
                {
                  "$type": "APSIM.Shared.Graphing.Axis, APSIM.Shared",
                  "Title": null,
                  "Position": 3,
                  "Inverted": false,
                  "CrossesAtZero": false,
                  "Minimum": null,
                  "Maximum": null,
                  "Interval": null
                }
              ],
              "LegendPosition": 1,
              "LegendOrientation": 0,
              "AnnotationLocation": 0,
              "DisabledSeries": [],
              "LegendOutsideGraph": false,
              "Name": "FertiliserApplied",
              "Children": [
                {
                  "$type": "Models.Series, Models",
                  "Type": 1,
                  "XAxis": 3,
                  "YAxis": 0,
                  "ColourArgb": -16736653,
                  "FactorToVaryColours": "Zone",
                  "FactorToVaryMarkers": null,
                  "FactorToVaryLines": null,
                  "Marker": 11,
                  "MarkerSize": 0,
                  "Line": 0,
                  "LineThickness": 0,
                  "TableName": "ThreeZoneSimulationInitialNonuniformSoilN",
                  "XFieldName": "Date",
                  "YFieldName": "Fertiliser",
                  "X2FieldName": "",
                  "Y2FieldName": "",
                  "ShowInLegend": true,
                  "IncludeSeriesNameInLegend": false,
                  "Cumulative": true,
                  "CumulativeX": false,
                  "Filter": null,
                  "Name": "Fertiliser",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            },
            {
              "$type": "Models.Core.Simulation, Models",
              "IsRunning": false,
              "Descriptors": null,
              "Name": "ThreeZoneSimulationInitialNonuniformSoilN",
              "Children": [
                {
                  "$type": "Models.Clock, Models",
                  "Start": "2000-01-01T00:00:00",
                  "End": "2000-03-31T00:00:00",
                  "Name": "Clock",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Climate.ControlledEnvironment, Models",
                  "MaxT": 25.0,
                  "MinT": 15.0,
                  "Rain": 0.0,
                  "Radn": 25.0,
                  "PanEvap": 0.0,
                  "VP": 17.0,
                  "Wind": 3.0,
                  "CO2": 350.0,
                  "AirPressure": 1010.0,
                  "DiffuseFraction": 0.0,
                  "Latitude": 0.0,
                  "Longitude": 0.0,
                  "DayLength": 12.0,
                  "SunRise": 0.0,
                  "SunSet": 0.0,
                  "Name": "ControlledEnvironment",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Soils.Arbitrator.SoilArbitrator, Models",
                  "Name": "SoilArbitrator",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Summary, Models",
                  "Verbosity": 100,
                  "Name": "Summary",
                  "Children": [],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Zone0",
                  "Children": [
                    {
                      "$type": "Models.Core.Folder, Models",
                      "ShowInDocs": true,
                      "GraphsPerPage": 6,
                      "Name": "Managers",
                      "Children": [
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing System.Linq;\nusing System;\nusing System.Collections.Generic;\nusing System.Xml.Serialization;\nusing Models.Core;\nusing Models.PMF;\nusing APSIM.Shared.Utilities;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Root depth in the plant's zone (mm): \")]  public double RootDepth { get; set; }\n        [Description(\"Root mass  in the plant's zone (mm): \")]  public double RootMass { get; set; }\n\n        [Description(\"Name of zone ot the left: \")] public string Zone0Name { get; set; }\n        [Description(\"Proportionate depth and mass in zone to the left (-): \")]  public double Zone0Prop { get; set; }\n\n        [Description(\"Name of zone ot the right: \")] public string Zone2Name { get; set; }\n        [Description(\"Proportionate depth and mass in zone to the right (-): \")]  public double Zone2Prop { get; set; }\n\n        // - Outputs from this manager\n\n        // - Internal variables\n\n        [EventSubscribe(\"FinalInitialise\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            int SpeciesNum = 0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                SpeciesNum += 1;\n                if (SpeciesNum == 1)\n                {\n                    if (Zone0Prop > 0)\n                        species.AddZone(zoneName: Zone0Name, rootDepth: Zone0Prop * RootDepth, rootDM: Zone0Prop * RootMass);\n                    if (Zone2Prop > 0)\n                        species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass);\n                }\n            }\n\n            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);\n            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "RootDepth",
                              "Value": "600"
                            },
                            {
                              "Key": "RootMass",
                              "Value": "500"
                            },
                            {
                              "Key": "Zone0Name",
                              "Value": "Zone0"
                            },
                            {
                              "Key": "Zone0Prop",
                              "Value": "0"
                            },
                            {
                              "Key": "Zone2Name",
                              "Value": "Zone1"
                            },
                            {
                              "Key": "Zone2Prop",
                              "Value": "0"
                            }
                          ],
                          "Name": "DoRootsThreeZone",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Date to begin the rotation: \")]\n        public DateTime CutRotationStartDate { get; set; }\n\n        [Description(\"Date to finish the rotation: \")]\n        public DateTime CutRotationEndDate { get; set; }\n\n        [Description(\"Rotation interval (days): \")]\n        public int CutInterval { get; set; }\n\n        [Description(\"How the interval is defined: \")]\n        public rotationIntervalTypes IntervalType { get; set; }\n\n        [Description(\"Duration of each event (days): \")]\n        public int DurationOfCut { get; set; }\n\n        [Description(\"What amount is being defined: \")]\n        public removeAmountTypes RemoveAmountType { get; set; }\n\n        [Description(\"Amount to use (kg/ha): \")]\n        public double AmountGiven { get; set; }\n\n        [Description(\"Fraction of DM that is removed from the field:\")]\n        public removeDMTypes DMRemoveType { get; set; }\n\n        [Description(\"Fraction of N that is removed from the field (0-1):\")]\n        public double FractionN2Remove { get; set; }\n\n        [Description(\"Proportion of N returned in dung (0-1):\")]\n        public double ProportionN2Dung { get; set; }\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today\n        public double DefoliatedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today\n        public double DefoliatedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today\n        public double HarvestedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today\n        public double HarvestedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field\n        public double RemovedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field\n        public double RemovedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field\n        public double ReturnedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field\n        public double ReturnedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)\n        public double NReturnedInDung { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)\n        public double NReturnedInUrine { get; set; }\n        [JsonIgnore][Units(\"day\")]// Description: Number of days after last defoliation\n        public int DaysAfterCut { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut\n        public double PreHarvestDM { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut\n        public double PostHarvestDM { get; set; }\n        \n        // - Internal variables\n        // fraction of harvested Dm to actually remove from field\n        private double fractionDM2Remove = 1.0;\n        // flag whether defoliation is allowed\n        private bool rotationAllowed = true;\n        // number of days for each defoliation event\n        private int cuttingDuration = 0;\n        // counter for day within each defoliation\n        private int daysCutting = 0;\n        // type of interval (Fixed or target)\n        private string intervalType;\n        // total herbage to remove in g/m2 per day\n        private double herbageToRemove;\n        // type of DM amount (ResidualDM or DMToRemove)\n        private string amountType;\n        // auxiliary flag for defoliation\n        private bool aCutHasHappened = false;\n\n        // - Event to add residue or dung to surface OM\n        public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n\n            // reset variables\n            DaysAfterCut = 0;\n            resetVariables();\n            cuttingDuration = DurationOfCut;\n            \n            // get the type of amount given\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\n                amountType = \"SetResidueAmount\";\n            else\n                amountType = \"SetRemoveAmount\";\n\n            // get the type of amount given\n            if (IntervalType == rotationIntervalTypes.FixedInterval)\n                intervalType = \"Fixed\";\n            else\n                intervalType = \"Target\";\n\n            // make sure that rotation start when startDate < simulationStartDay\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\n                CutRotationStartDate = Clock.Today;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (rotationAllowed)\n            {\n                if (Clock.Today == CutRotationStartDate)\n                    DaysAfterCut = CutInterval;\n\n                // Check whether we can defoliate\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))\n                {\n                    // Check whether we should start a defoliation\n                    if (DaysAfterCut >= (CutInterval - 1))\n                    {\n                        Graze(AmountGiven, amountType, DurationOfCut);\n                    }\n                }\n            }\n\n            // Check whether we need to continue cutting\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\n            {\n                // reset outputs\n                resetVariables();\n\n                removeDM(herbageToRemove);\n                returnExcreta();\n                daysCutting += 1;\n                if (daysCutting == cuttingDuration)\n                    PostHarvestDM = Pasture[0].Standing.Wt; //+ Pasture[1].Standing.Wt\n            }\n\n            // reset outputs\n            if (daysCutting < 0)\n            {\n                resetVariables();\n                daysCutting = 0;\n            }\n        }\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            // Check whether a cutting has finished\n            if (daysCutting == cuttingDuration)\n            {\n                aCutHasHappened = true;\n                daysCutting = -1;\n            }\n\n            // Increase the counter for days after cutting\n            if (aCutHasHappened && (daysCutting == 0))\n                DaysAfterCut += 1;\n        }\n\n        public enum removeAmountTypes\n        {\n            /// <summary>Setting DM amount to remove</summary>\n            DMToRemove,\n            /// <summary>Setting residual DM amount</summary>\n            ResidualDM\n        }\n\n        public enum rotationIntervalTypes\n        {\n            /// <summary>Setting a fixed interval</summary>\n            FixedInterval,\n            /// <summary>Setting a target (minimum) inteval</summary>\n            TargetInterval\n        }\n\n        public enum removeDMTypes\n        {\n            /// <summary>Remove all DM</summary>\n            RemoveAll,\n            /// <summary>Remove no DM</summary>\n            RemoveNone,\n            /// <summary>Remove a fraction based on digestibility</summary>\n            BasedOnDigestibility\n        }\n\n        // Resets the values of all outputs\n        private void resetVariables()\n        {\n            DefoliatedWt = 0.0;\n            DefoliatedN = 0.0;\n            HarvestedWt = 0.0;\n            HarvestedN = 0.0;\n            RemovedWt = 0.0;\n            RemovedN = 0.0;\n            ReturnedWt = 0.0;\n            ReturnedN = 0.0;\n            NReturnedInDung = 0.0;\n            NReturnedInUrine = 0.0;\n        }\n\n        // Description: Perform the basic calculations for defoliation\n        public void Graze(double amountDM, string amountType, int duration)\n        {\n            // Get the existing plant amount\n            PreHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt\n            \n            // Check the amount to remove and print some info\n            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))\n            {\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = amountDM / duration;\n            }\n            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))\n            {\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\n            }\n            else\n            {\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);\n                if (intervalType == \"Fixed\")\n                    DaysAfterCut = -duration;\n                return;\n            }\n\n            cuttingDuration = duration;\n            // Preform first defoliation\n            removeDM(herbageToRemove);\n            returnExcreta();\n            daysCutting = 1;\n            DaysAfterCut = 0;\n            if (daysCutting == cuttingDuration)\n                PostHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt\n        }\n\n        // Do the DM removal\n        private void removeDM(double removeAmount)\n        {\n            double existingWt = Pasture[0].Harvestable.Wt;  // + Pasture[1].Harvestable.Wt\n\n            // Check whether we harvest anything\n            if (existingWt >= removeAmount)\n            {\n                foreach (AgPasture.PastureSpecies species in Pasture)\n                {\n                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;\n                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\n                }\n                \n                // get total harvested\n                DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt\n                DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN\n                HarvestedWt = DefoliatedWt;\n                HarvestedN = DefoliatedN;\n\n                // get amounts actually removed from field and that to be returned (dung/urine)\n                if (DMRemoveType == removeDMTypes.RemoveAll)\n                    fractionDM2Remove = 1.0;\n                else if (DMRemoveType == removeDMTypes.RemoveNone)\n                    fractionDM2Remove = 0.0;\n                else\n                {\n                    fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt\n                    fractionDM2Remove /= removeAmount;\n                }\n                \n                RemovedWt = HarvestedWt * fractionDM2Remove;\n                RemovedN = HarvestedN * FractionN2Remove;\n                ReturnedWt = HarvestedWt - RemovedWt;\n                ReturnedN = HarvestedN - RemovedN;\n                NReturnedInDung = ReturnedN * ProportionN2Dung;\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\n            }\n        }\n\n        // Return dung and urine\n        private void returnExcreta()\n        {\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\n            {\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\n                float[] dltdm = new float[] { (Single)ReturnedWt };\n                float[] dltn = new float[] { (Single)NReturnedInDung };\n                float[] dltp = new float[] { 0 };\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\n\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\n                BiomassDung.dm_type = type;\n                BiomassDung.dlt_crop_dm = dltdm;\n                BiomassDung.dlt_dm_n = dltn;\n                BiomassDung.dlt_dm_p = dltp;\n                BiomassDung.fraction_to_residue = fraction;\n                BiomassRemoved.Invoke(BiomassDung);\n            }\n\n            if (NReturnedInUrine > 0.0)\n            {\n                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\n            }\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "CutRotationStartDate",
                              "Value": "1900-07-01"
                            },
                            {
                              "Key": "CutRotationEndDate",
                              "Value": "2100-12-31"
                            },
                            {
                              "Key": "CutInterval",
                              "Value": "1"
                            },
                            {
                              "Key": "IntervalType",
                              "Value": "FixedInterval"
                            },
                            {
                              "Key": "DurationOfCut",
                              "Value": "1"
                            },
                            {
                              "Key": "RemoveAmountType",
                              "Value": "ResidualDM"
                            },
                            {
                              "Key": "AmountGiven",
                              "Value": "2250"
                            },
                            {
                              "Key": "DMRemoveType",
                              "Value": "RemoveAll"
                            },
                            {
                              "Key": "FractionN2Remove",
                              "Value": "1"
                            },
                            {
                              "Key": "ProportionN2Dung",
                              "Value": "0"
                            }
                          ],
                          "Name": "CutRotationSingle",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn ferliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "AllowFertiliser",
                              "Value": "no"
                            },
                            {
                              "Key": "Depth2SoilN",
                              "Value": "500"
                            },
                            {
                              "Key": "CriticalSoilN",
                              "Value": "50"
                            },
                            {
                              "Key": "FertNAmount",
                              "Value": "25"
                            },
                            {
                              "Key": "FertType",
                              "Value": "UreaN"
                            },
                            {
                              "Key": "FertApplicationDepth",
                              "Value": "1"
                            },
                            {
                              "Key": "FertMinimumDays",
                              "Value": "1"
                            }
                          ],
                          "Name": "AutomaticFertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }\n        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool IrrigationIsAlwaysAllowed { get; set; }\n        \n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n            if (allowIrrigationAll == answerType.yes)\n                IrrigationIsAlwaysAllowed = true; \n\n\n\n\n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if (IrrigationIsAlwaysAllowed)\n                CropIsActive = true;  // might not be but we don't care\n            else if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "allowIrrigation",
                              "Value": "yes"
                            },
                            {
                              "Key": "allowIrrigationAll",
                              "Value": "yes"
                            },
                            {
                              "Key": "seasonStart",
                              "Value": "15-Aug"
                            },
                            {
                              "Key": "seasonEnd",
                              "Value": "30-May"
                            },
                            {
                              "Key": "seasonsAllocation",
                              "Value": "10000"
                            },
                            {
                              "Key": "triggerDeficit",
                              "Value": "99"
                            },
                            {
                              "Key": "targetDeficit",
                              "Value": "100"
                            },
                            {
                              "Key": "returndays",
                              "Value": "1"
                            },
                            {
                              "Key": "maximumAmount",
                              "Value": "5"
                            },
                            {
                              "Key": "depthPAWC",
                              "Value": "600"
                            }
                          ],
                          "Name": "AutomaticIrrigation",
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "ResourceName": "Fertiliser",
                      "Name": "Fertiliser",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "InitialResidueName": "Sward",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 0.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": null,
                      "LocalName": "Stores lots of water",
                      "Site": "Made up",
                      "NearestTown": null,
                      "Region": null,
                      "State": null,
                      "Country": null,
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "YearOfSampling": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "NO3N": [
                            15.0,
                            15.0,
                            15.0,
                            15.0
                          ],
                          "NH4N": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PH": [
                            6.0,
                            6.0,
                            6.0,
                            6.0
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "LabileP": null,
                          "UnavailableP": null,
                          "ECMetadata": null,
                          "CLMetadata": null,
                          "ESPMetadata": null,
                          "PHMetadata": null,
                          "Name": "Chemical",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "ParticleSizeClay": [
                            60.0,
                            60.0,
                            60.0,
                            60.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "Rocks": null,
                          "Texture": null,
                          "BD": [
                            1.3,
                            1.3,
                            1.3,
                            1.3
                          ],
                          "AirDry": [
                            0.05,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "LL15": [
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "DUL": [
                            0.45,
                            0.45,
                            0.45,
                            0.45
                          ],
                          "SAT": [
                            0.5,
                            0.5,
                            0.5,
                            0.5
                          ],
                          "KS": [
                            500.0,
                            500.0,
                            500.0,
                            500.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "RocksMetadata": null,
                          "TextureMetadata": null,
                          "ParticleSizeSandMetadata": null,
                          "ParticleSizeSiltMetadata": null,
                          "ParticleSizeClayMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 6.0,
                          "WinterCona": 3.5,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "DischargeWidth": 0.0,
                          "CatchmentArea": 0.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "SWCON": [
                            0.3,
                            0.3,
                            0.3,
                            0.3
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "ResourceName": "WaterBalance",
                          "Name": "SoilWater",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "NPartitionApproach": 0,
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "Carbon": [
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FOM": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "CarbonMetadata": null,
                          "FOMMetadata": null,
                          "Name": "Organic",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 1,
                          "FractionFull": 0.95,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "Temperature",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[AGPRyegrass].AboveGroundWt as PlantMass",
                        "[AGPRyegrass].HarvestedWt as Harvested",
                        "[AGPRyegrass].WaterDemand as SW_Demand",
                        "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                        "[AGPRyegrass].GlfWaterSupply as glfWater",
                        "[AGPRyegrass].GlfNSupply as glfNitrogen",
                        "sum([Soil].SoilWater.SWmm) as SoilWater",
                        "sum([Soil].SoilNitrogen.NH4.kgha)+sum([Soil].SoilNitrogen.NO3.kgha) as SoilNitrogen",
                        "[Irrigation].IrrigationApplied as Irrigation",
                        "[Fertiliser].NitrogenApplied as Fertiliser"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ThreeZoneSimulationInitialNonuniformSoilN",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Zone1",
                  "Children": [
                    {
                      "$type": "Models.Core.Folder, Models",
                      "ShowInDocs": true,
                      "GraphsPerPage": 6,
                      "Name": "Managers",
                      "Children": [
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing System.Linq;\nusing System;\nusing System.Collections.Generic;\nusing System.Xml.Serialization;\nusing Models.Core;\nusing Models.PMF;\nusing APSIM.Shared.Utilities;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Root depth in the plant's zone (mm): \")]  public double RootDepth { get; set; }\n        [Description(\"Root mass  in the plant's zone (mm): \")]  public double RootMass { get; set; }\n\n        [Description(\"Name of zone ot the left: \")] public string Zone0Name { get; set; }\n        [Description(\"Proportionate depth and mass in zone to the left (-): \")]  public double Zone0Prop { get; set; }\n\n        [Description(\"Name of zone ot the right: \")] public string Zone2Name { get; set; }\n        [Description(\"Proportionate depth and mass in zone to the right (-): \")]  public double Zone2Prop { get; set; }\n\n        // - Outputs from this manager\n\n        // - Internal variables\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            int SpeciesNum = 0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                SpeciesNum += 1;\n                if (SpeciesNum == 1)\n                {\n                    if (Zone0Prop > 0)\n                        species.AddZone(zoneName: Zone0Name, rootDepth: Zone0Prop * RootDepth, rootDM: Zone0Prop * RootMass);\n                    if (Zone2Prop > 0)\n                        species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass);\n                }\n            }\n\n            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);\n            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "RootDepth",
                              "Value": "600"
                            },
                            {
                              "Key": "RootMass",
                              "Value": "500"
                            },
                            {
                              "Key": "Zone0Name",
                              "Value": "Zone0"
                            },
                            {
                              "Key": "Zone0Prop",
                              "Value": "0.3"
                            },
                            {
                              "Key": "Zone2Name",
                              "Value": "Zone2"
                            },
                            {
                              "Key": "Zone2Prop",
                              "Value": "0.3"
                            }
                          ],
                          "Name": "DoRootsThreeZone",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Date to begin the rotation: \")]\n        public DateTime CutRotationStartDate { get; set; }\n\n        [Description(\"Date to finish the rotation: \")]\n        public DateTime CutRotationEndDate { get; set; }\n\n        [Description(\"Rotation interval (days): \")]\n        public int CutInterval { get; set; }\n\n        [Description(\"How the interval is defined: \")]\n        public rotationIntervalTypes IntervalType { get; set; }\n\n        [Description(\"Duration of each event (days): \")]\n        public int DurationOfCut { get; set; }\n\n        [Description(\"What amount is being defined: \")]\n        public removeAmountTypes RemoveAmountType { get; set; }\n\n        [Description(\"Amount to use (kg/ha): \")]\n        public double AmountGiven { get; set; }\n\n        [Description(\"Fraction of DM that is removed from the field:\")]\n        public removeDMTypes DMRemoveType { get; set; }\n\n        [Description(\"Fraction of N that is removed from the field (0-1):\")]\n        public double FractionN2Remove { get; set; }\n\n        [Description(\"Proportion of N returned in dung (0-1):\")]\n        public double ProportionN2Dung { get; set; }\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today\n        public double DefoliatedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today\n        public double DefoliatedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today\n        public double HarvestedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today\n        public double HarvestedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field\n        public double RemovedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field\n        public double RemovedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field\n        public double ReturnedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field\n        public double ReturnedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)\n        public double NReturnedInDung { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)\n        public double NReturnedInUrine { get; set; }\n        [JsonIgnore][Units(\"day\")]// Description: Number of days after last defoliation\n        public int DaysAfterCut { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut\n        public double PreHarvestDM { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut\n        public double PostHarvestDM { get; set; }\n        \n        // - Internal variables\n        // fraction of harvested Dm to actually remove from field\n        private double fractionDM2Remove = 1.0;\n        // flag whether defoliation is allowed\n        private bool rotationAllowed = true;\n        // number of days for each defoliation event\n        private int cuttingDuration = 0;\n        // counter for day within each defoliation\n        private int daysCutting = 0;\n        // type of interval (Fixed or target)\n        private string intervalType;\n        // total herbage to remove in g/m2 per day\n        private double herbageToRemove;\n        // type of DM amount (ResidualDM or DMToRemove)\n        private string amountType;\n        // auxiliary flag for defoliation\n        private bool aCutHasHappened = false;\n\n        // - Event to add residue or dung to surface OM\n        public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n\n            // reset variables\n            DaysAfterCut = 0;\n            resetVariables();\n            cuttingDuration = DurationOfCut;\n            \n            // get the type of amount given\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\n                amountType = \"SetResidueAmount\";\n            else\n                amountType = \"SetRemoveAmount\";\n\n            // get the type of amount given\n            if (IntervalType == rotationIntervalTypes.FixedInterval)\n                intervalType = \"Fixed\";\n            else\n                intervalType = \"Target\";\n\n            // make sure that rotation start when startDate < simulationStartDay\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\n                CutRotationStartDate = Clock.Today;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (rotationAllowed)\n            {\n                if (Clock.Today == CutRotationStartDate)\n                    DaysAfterCut = CutInterval;\n\n                // Check whether we can defoliate\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))\n                {\n                    // Check whether we should start a defoliation\n                    if (DaysAfterCut >= (CutInterval - 1))\n                    {\n                        Graze(AmountGiven, amountType, DurationOfCut);\n                    }\n                }\n            }\n\n            // Check whether we need to continue cutting\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\n            {\n                // reset outputs\n                resetVariables();\n\n                removeDM(herbageToRemove);\n                returnExcreta();\n                daysCutting += 1;\n                if (daysCutting == cuttingDuration)\n                    PostHarvestDM = Pasture[0].Standing.Wt; //+ Pasture[1].Standing.Wt\n            }\n\n            // reset outputs\n            if (daysCutting < 0)\n            {\n                resetVariables();\n                daysCutting = 0;\n            }\n        }\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            // Check whether a cutting has finished\n            if (daysCutting == cuttingDuration)\n            {\n                aCutHasHappened = true;\n                daysCutting = -1;\n            }\n\n            // Increase the counter for days after cutting\n            if (aCutHasHappened && (daysCutting == 0))\n                DaysAfterCut += 1;\n        }\n\n        public enum removeAmountTypes\n        {\n            /// <summary>Setting DM amount to remove</summary>\n            DMToRemove,\n            /// <summary>Setting residual DM amount</summary>\n            ResidualDM\n        }\n\n        public enum rotationIntervalTypes\n        {\n            /// <summary>Setting a fixed interval</summary>\n            FixedInterval,\n            /// <summary>Setting a target (minimum) inteval</summary>\n            TargetInterval\n        }\n\n        public enum removeDMTypes\n        {\n            /// <summary>Remove all DM</summary>\n            RemoveAll,\n            /// <summary>Remove no DM</summary>\n            RemoveNone,\n            /// <summary>Remove a fraction based on digestibility</summary>\n            BasedOnDigestibility\n        }\n\n        // Resets the values of all outputs\n        private void resetVariables()\n        {\n            DefoliatedWt = 0.0;\n            DefoliatedN = 0.0;\n            HarvestedWt = 0.0;\n            HarvestedN = 0.0;\n            RemovedWt = 0.0;\n            RemovedN = 0.0;\n            ReturnedWt = 0.0;\n            ReturnedN = 0.0;\n            NReturnedInDung = 0.0;\n            NReturnedInUrine = 0.0;\n        }\n\n        // Description: Perform the basic calculations for defoliation\n        public void Graze(double amountDM, string amountType, int duration)\n        {\n            // Get the existing plant amount\n            PreHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt\n            \n            // Check the amount to remove and print some info\n            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))\n            {\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = amountDM / duration;\n            }\n            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))\n            {\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\n            }\n            else\n            {\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);\n                if (intervalType == \"Fixed\")\n                    DaysAfterCut = -duration;\n                return;\n            }\n\n            cuttingDuration = duration;\n            // Preform first defoliation\n            removeDM(herbageToRemove);\n            returnExcreta();\n            daysCutting = 1;\n            DaysAfterCut = 0;\n            if (daysCutting == cuttingDuration)\n                PostHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt\n        }\n\n        // Do the DM removal\n        private void removeDM(double removeAmount)\n        {\n            double existingWt = Pasture[0].Harvestable.Wt;  // + Pasture[1].Harvestable.Wt\n\n            // Check whether we harvest anything\n            if (existingWt >= removeAmount)\n            {\n                foreach (AgPasture.PastureSpecies species in Pasture)\n                {\n                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;\n                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\n                }\n                \n                // get total harvested\n                DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt\n                DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN\n                HarvestedWt = DefoliatedWt;\n                HarvestedN = DefoliatedN;\n\n                // get amounts actually removed from field and that to be returned (dung/urine)\n                if (DMRemoveType == removeDMTypes.RemoveAll)\n                    fractionDM2Remove = 1.0;\n                else if (DMRemoveType == removeDMTypes.RemoveNone)\n                    fractionDM2Remove = 0.0;\n                else\n                {\n                    fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt\n                    fractionDM2Remove /= removeAmount;\n                }\n                \n                RemovedWt = HarvestedWt * fractionDM2Remove;\n                RemovedN = HarvestedN * FractionN2Remove;\n                ReturnedWt = HarvestedWt - RemovedWt;\n                ReturnedN = HarvestedN - RemovedN;\n                NReturnedInDung = ReturnedN * ProportionN2Dung;\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\n            }\n        }\n\n        // Return dung and urine\n        private void returnExcreta()\n        {\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\n            {\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\n                float[] dltdm = new float[] { (Single)ReturnedWt };\n                float[] dltn = new float[] { (Single)NReturnedInDung };\n                float[] dltp = new float[] { 0 };\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\n\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\n                BiomassDung.dm_type = type;\n                BiomassDung.dlt_crop_dm = dltdm;\n                BiomassDung.dlt_dm_n = dltn;\n                BiomassDung.dlt_dm_p = dltp;\n                BiomassDung.fraction_to_residue = fraction;\n                BiomassRemoved.Invoke(BiomassDung);\n            }\n\n            if (NReturnedInUrine > 0.0)\n            {\n                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\n            }\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "CutRotationStartDate",
                              "Value": "1900-07-01"
                            },
                            {
                              "Key": "CutRotationEndDate",
                              "Value": "2100-12-31"
                            },
                            {
                              "Key": "CutInterval",
                              "Value": "1"
                            },
                            {
                              "Key": "IntervalType",
                              "Value": "FixedInterval"
                            },
                            {
                              "Key": "DurationOfCut",
                              "Value": "1"
                            },
                            {
                              "Key": "RemoveAmountType",
                              "Value": "ResidualDM"
                            },
                            {
                              "Key": "AmountGiven",
                              "Value": "2250"
                            },
                            {
                              "Key": "DMRemoveType",
                              "Value": "RemoveAll"
                            },
                            {
                              "Key": "FractionN2Remove",
                              "Value": "1"
                            },
                            {
                              "Key": "ProportionN2Dung",
                              "Value": "0"
                            }
                          ],
                          "Name": "CutRotationSingle",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn ferliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "AllowFertiliser",
                              "Value": "no"
                            },
                            {
                              "Key": "Depth2SoilN",
                              "Value": "500"
                            },
                            {
                              "Key": "CriticalSoilN",
                              "Value": "50"
                            },
                            {
                              "Key": "FertNAmount",
                              "Value": "25"
                            },
                            {
                              "Key": "FertType",
                              "Value": "UreaN"
                            },
                            {
                              "Key": "FertApplicationDepth",
                              "Value": "1"
                            },
                            {
                              "Key": "FertMinimumDays",
                              "Value": "1"
                            }
                          ],
                          "Name": "AutomaticFertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }\n        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool IrrigationIsAlwaysAllowed { get; set; }\n        \n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n            if (allowIrrigationAll == answerType.yes)\n                IrrigationIsAlwaysAllowed = true; \n\n\n\n\n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if (IrrigationIsAlwaysAllowed)\n                CropIsActive = true;  // might not be but we don't care\n            else if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "allowIrrigation",
                              "Value": "yes"
                            },
                            {
                              "Key": "allowIrrigationAll",
                              "Value": "yes"
                            },
                            {
                              "Key": "seasonStart",
                              "Value": "15-Aug"
                            },
                            {
                              "Key": "seasonEnd",
                              "Value": "30-May"
                            },
                            {
                              "Key": "seasonsAllocation",
                              "Value": "10000"
                            },
                            {
                              "Key": "triggerDeficit",
                              "Value": "99"
                            },
                            {
                              "Key": "targetDeficit",
                              "Value": "100"
                            },
                            {
                              "Key": "returndays",
                              "Value": "1"
                            },
                            {
                              "Key": "maximumAmount",
                              "Value": "5"
                            },
                            {
                              "Key": "depthPAWC",
                              "Value": "600"
                            }
                          ],
                          "Name": "AutomaticIrrigation",
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "ResourceName": "Fertiliser",
                      "Name": "Fertiliser",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "InitialResidueName": "Sward",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 0.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": null,
                      "LocalName": "Stores lots of water",
                      "Site": "Made up",
                      "NearestTown": null,
                      "Region": null,
                      "State": null,
                      "Country": null,
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "YearOfSampling": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "NO3N": [
                            5.0,
                            5.0,
                            5.0,
                            5.0
                          ],
                          "NH4N": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PH": [
                            6.0,
                            6.0,
                            6.0,
                            6.0
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "LabileP": null,
                          "UnavailableP": null,
                          "ECMetadata": null,
                          "CLMetadata": null,
                          "ESPMetadata": null,
                          "PHMetadata": null,
                          "Name": "Chemical",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "ParticleSizeClay": [
                            60.0,
                            60.0,
                            60.0,
                            60.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "Rocks": null,
                          "Texture": null,
                          "BD": [
                            1.3,
                            1.3,
                            1.3,
                            1.3
                          ],
                          "AirDry": [
                            0.05,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "LL15": [
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "DUL": [
                            0.45,
                            0.45,
                            0.45,
                            0.45
                          ],
                          "SAT": [
                            0.5,
                            0.5,
                            0.5,
                            0.5
                          ],
                          "KS": [
                            500.0,
                            500.0,
                            500.0,
                            500.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "RocksMetadata": null,
                          "TextureMetadata": null,
                          "ParticleSizeSandMetadata": null,
                          "ParticleSizeSiltMetadata": null,
                          "ParticleSizeClayMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 6.0,
                          "WinterCona": 3.5,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "DischargeWidth": 0.0,
                          "CatchmentArea": 0.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "SWCON": [
                            0.3,
                            0.3,
                            0.3,
                            0.3
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "ResourceName": "WaterBalance",
                          "Name": "SoilWater",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "NPartitionApproach": 0,
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "Carbon": [
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FOM": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "CarbonMetadata": null,
                          "FOMMetadata": null,
                          "Name": "Organic",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 1,
                          "FractionFull": 0.95,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "Temperature",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[AGPRyegrass].AboveGroundWt as PlantMass",
                        "[AGPRyegrass].HarvestedWt as Harvested",
                        "[AGPRyegrass].WaterDemand as SW_Demand",
                        "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                        "[AGPRyegrass].GlfWaterSupply as glfWater",
                        "[AGPRyegrass].GlfNSupply as glfNitrogen",
                        "sum([Soil].SoilWater.SWmm) as SoilWater",
                        "sum([Soil].SoilNitrogen.NH4.kgha)+sum([Soil].SoilNitrogen.NO3.kgha) as SoilNitrogen",
                        "[Irrigation].IrrigationApplied as Irrigation",
                        "[Fertiliser].NitrogenApplied as Fertiliser"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ThreeZoneSimulationInitialNonuniformSoilN",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                },
                {
                  "$type": "Models.Core.Zone, Models",
                  "Area": 1.0,
                  "Slope": 0.0,
                  "AspectAngle": 0.0,
                  "Altitude": 50.0,
                  "Name": "Zone2",
                  "Children": [
                    {
                      "$type": "Models.Core.Folder, Models",
                      "ShowInDocs": true,
                      "GraphsPerPage": 6,
                      "Name": "Managers",
                      "Children": [
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing System.Linq;\nusing System;\nusing System.Collections.Generic;\nusing System.Xml.Serialization;\nusing Models.Core;\nusing Models.PMF;\nusing APSIM.Shared.Utilities;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Root depth in the plant's zone (mm): \")]  public double RootDepth { get; set; }\n        [Description(\"Root mass  in the plant's zone (mm): \")]  public double RootMass { get; set; }\n\n        [Description(\"Name of zone ot the left: \")] public string Zone0Name { get; set; }\n        [Description(\"Proportionate depth and mass in zone to the left (-): \")]  public double Zone0Prop { get; set; }\n\n        [Description(\"Name of zone ot the right: \")] public string Zone2Name { get; set; }\n        [Description(\"Proportionate depth and mass in zone to the right (-): \")]  public double Zone2Prop { get; set; }\n\n        // - Outputs from this manager\n\n        // - Internal variables\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            int SpeciesNum = 0;\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                SpeciesNum += 1;\n                if (SpeciesNum == 1)\n                {\n                    if (Zone0Prop > 0)\n                        species.AddZone(zoneName: Zone0Name, rootDepth: Zone0Prop * RootDepth, rootDM: Zone0Prop * RootMass);\n                    if (Zone2Prop > 0)\n                        species.AddZone(zoneName: Zone2Name, rootDepth: Zone2Prop * RootDepth, rootDM: Zone2Prop * RootMass);\n                }\n            }\n\n            //Pasture[1].AddZone(zoneName: \"Zone1\", rootDepth: 100, rootDM: 1000);\n            //Pasture[1].AddZone(zoneName: \"Zone2\", rootDepth: 50, rootDM: 500);\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "RootDepth",
                              "Value": "600"
                            },
                            {
                              "Key": "RootMass",
                              "Value": "500"
                            },
                            {
                              "Key": "Zone0Name",
                              "Value": "Zone1"
                            },
                            {
                              "Key": "Zone0Prop",
                              "Value": "0"
                            },
                            {
                              "Key": "Zone2Name",
                              "Value": "Zone2"
                            },
                            {
                              "Key": "Zone2Prop",
                              "Value": "0"
                            }
                          ],
                          "Name": "DoRootsThreeZone",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "// Defoliates AgPasture on a regular rotation or one-off via a schedule\n// currenty defoliates the amount specified by spreading evenly over the specified period\n\nusing Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing Models.PMF;\nusing Models.Core;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing System;\nusing System.Linq;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        // - Links to APSIM models\n        [Link] Zone myZone;\n        [Link] Clock Clock;\n        [Link] Fertiliser fertiliser;\n        [Link] ISummary summary = null;\n        \n        List<AgPasture.PastureSpecies> Pasture = new List<AgPasture.PastureSpecies>();\n        \n        // - Paramters for this manager\n        [Description(\"Date to begin the rotation: \")]\n        public DateTime CutRotationStartDate { get; set; }\n\n        [Description(\"Date to finish the rotation: \")]\n        public DateTime CutRotationEndDate { get; set; }\n\n        [Description(\"Rotation interval (days): \")]\n        public int CutInterval { get; set; }\n\n        [Description(\"How the interval is defined: \")]\n        public rotationIntervalTypes IntervalType { get; set; }\n\n        [Description(\"Duration of each event (days): \")]\n        public int DurationOfCut { get; set; }\n\n        [Description(\"What amount is being defined: \")]\n        public removeAmountTypes RemoveAmountType { get; set; }\n\n        [Description(\"Amount to use (kg/ha): \")]\n        public double AmountGiven { get; set; }\n\n        [Description(\"Fraction of DM that is removed from the field:\")]\n        public removeDMTypes DMRemoveType { get; set; }\n\n        [Description(\"Fraction of N that is removed from the field (0-1):\")]\n        public double FractionN2Remove { get; set; }\n\n        [Description(\"Proportion of N returned in dung (0-1):\")]\n        public double ProportionN2Dung { get; set; }\n\n        // - Outputs from this manager\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM defoliated today\n        public double DefoliatedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N defoliate today\n        public double DefoliatedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM harvested today\n        public double HarvestedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N harvested today\n        public double HarvestedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture DM removed from the field\n        public double RemovedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Pasture N removed from the field\n        public double RemovedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Residue DM returned to the field\n        public double ReturnedWt { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Residue N returned to the field\n        public double ReturnedN { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as dung (SurfaceOM)\n        public double NReturnedInDung { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Harvested N returned as urine (urea)\n        public double NReturnedInUrine { get; set; }\n        [JsonIgnore][Units(\"day\")]// Description: Number of days after last defoliation\n        public int DaysAfterCut { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) before cut\n        public double PreHarvestDM { get; set; }\n        [JsonIgnore][Units(\"g/m2\")]// Description: Total standing DM (Leaf + Stem/Sheath) after cut\n        public double PostHarvestDM { get; set; }\n        \n        // - Internal variables\n        // fraction of harvested Dm to actually remove from field\n        private double fractionDM2Remove = 1.0;\n        // flag whether defoliation is allowed\n        private bool rotationAllowed = true;\n        // number of days for each defoliation event\n        private int cuttingDuration = 0;\n        // counter for day within each defoliation\n        private int daysCutting = 0;\n        // type of interval (Fixed or target)\n        private string intervalType;\n        // total herbage to remove in g/m2 per day\n        private double herbageToRemove;\n        // type of DM amount (ResidualDM or DMToRemove)\n        private string amountType;\n        // auxiliary flag for defoliation\n        private bool aCutHasHappened = false;\n\n        // - Event to add residue or dung to surface OM\n        public event BiomassRemovedDelegate BiomassRemoved;\n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnSimulationCommencing(object sender, EventArgs e)\n        {\n            foreach (AgPasture.PastureSpecies species in myZone.FindAllChildren<AgPasture.PastureSpecies>().OfType<IModel>().ToList())\n            {\n                Pasture.Add(species);\n            }\n\n            // reset variables\n            DaysAfterCut = 0;\n            resetVariables();\n            cuttingDuration = DurationOfCut;\n            \n            // get the type of amount given\n            if (RemoveAmountType == removeAmountTypes.ResidualDM)\n                amountType = \"SetResidueAmount\";\n            else\n                amountType = \"SetRemoveAmount\";\n\n            // get the type of amount given\n            if (IntervalType == rotationIntervalTypes.FixedInterval)\n                intervalType = \"Fixed\";\n            else\n                intervalType = \"Target\";\n\n            // make sure that rotation start when startDate < simulationStartDay\n            if ((Clock.Today > CutRotationStartDate) && (Clock.Today < CutRotationEndDate))\n                CutRotationStartDate = Clock.Today;\n        }\n        \n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            if (rotationAllowed)\n            {\n                if (Clock.Today == CutRotationStartDate)\n                    DaysAfterCut = CutInterval;\n\n                // Check whether we can defoliate\n                if ((Clock.Today >= CutRotationStartDate) && (Clock.Today <= CutRotationEndDate) && (Pasture[0].IsAlive))\n                {\n                    // Check whether we should start a defoliation\n                    if (DaysAfterCut >= (CutInterval - 1))\n                    {\n                        Graze(AmountGiven, amountType, DurationOfCut);\n                    }\n                }\n            }\n\n            // Check whether we need to continue cutting\n            if ((daysCutting > 0) && (daysCutting < cuttingDuration))\n            {\n                // reset outputs\n                resetVariables();\n\n                removeDM(herbageToRemove);\n                returnExcreta();\n                daysCutting += 1;\n                if (daysCutting == cuttingDuration)\n                    PostHarvestDM = Pasture[0].Standing.Wt; //+ Pasture[1].Standing.Wt\n            }\n\n            // reset outputs\n            if (daysCutting < 0)\n            {\n                resetVariables();\n                daysCutting = 0;\n            }\n        }\n\n        [EventSubscribe(\"DoManagementCalculations\")]\n        private void OnDoManagementCalculations(object sender, EventArgs e)\n        {\n            // Check whether a cutting has finished\n            if (daysCutting == cuttingDuration)\n            {\n                aCutHasHappened = true;\n                daysCutting = -1;\n            }\n\n            // Increase the counter for days after cutting\n            if (aCutHasHappened && (daysCutting == 0))\n                DaysAfterCut += 1;\n        }\n\n        public enum removeAmountTypes\n        {\n            /// <summary>Setting DM amount to remove</summary>\n            DMToRemove,\n            /// <summary>Setting residual DM amount</summary>\n            ResidualDM\n        }\n\n        public enum rotationIntervalTypes\n        {\n            /// <summary>Setting a fixed interval</summary>\n            FixedInterval,\n            /// <summary>Setting a target (minimum) inteval</summary>\n            TargetInterval\n        }\n\n        public enum removeDMTypes\n        {\n            /// <summary>Remove all DM</summary>\n            RemoveAll,\n            /// <summary>Remove no DM</summary>\n            RemoveNone,\n            /// <summary>Remove a fraction based on digestibility</summary>\n            BasedOnDigestibility\n        }\n\n        // Resets the values of all outputs\n        private void resetVariables()\n        {\n            DefoliatedWt = 0.0;\n            DefoliatedN = 0.0;\n            HarvestedWt = 0.0;\n            HarvestedN = 0.0;\n            RemovedWt = 0.0;\n            RemovedN = 0.0;\n            ReturnedWt = 0.0;\n            ReturnedN = 0.0;\n            NReturnedInDung = 0.0;\n            NReturnedInUrine = 0.0;\n        }\n\n        // Description: Perform the basic calculations for defoliation\n        public void Graze(double amountDM, string amountType, int duration)\n        {\n            // Get the existing plant amount\n            PreHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt\n            \n            // Check the amount to remove and print some info\n            if ((amountType == \"SetRemoveAmount\") && (PreHarvestDM >= amountDM / duration))\n            {\n                summary.WriteMessage(this, \"   Defoliating \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = amountDM / duration;\n            }\n            else if ((amountType == \"SetResidueAmount\") && (PreHarvestDM >= amountDM))\n            {\n                summary.WriteMessage(this, \"   Defoliating down to approximately \" + (10 * amountDM).ToString(\"#0.0\") + \"kg/ha over \" + duration + \" days\", MessageType.Diagnostic);\n                herbageToRemove = (PreHarvestDM - amountDM) / duration;\n            }\n            else\n            {\n                summary.WriteMessage(this, \"   Defoliation will not happend because there is not enough plant material\", MessageType.Diagnostic);\n                if (intervalType == \"Fixed\")\n                    DaysAfterCut = -duration;\n                return;\n            }\n\n            cuttingDuration = duration;\n            // Preform first defoliation\n            removeDM(herbageToRemove);\n            returnExcreta();\n            daysCutting = 1;\n            DaysAfterCut = 0;\n            if (daysCutting == cuttingDuration)\n                PostHarvestDM = Pasture[0].Standing.Wt;  //+ Pasture[1].Standing.Wt\n        }\n\n        // Do the DM removal\n        private void removeDM(double removeAmount)\n        {\n            double existingWt = Pasture[0].Harvestable.Wt;  // + Pasture[1].Harvestable.Wt\n\n            // Check whether we harvest anything\n            if (existingWt >= removeAmount)\n            {\n                foreach (AgPasture.PastureSpecies species in Pasture)\n                {\n                    double amountToRemove = removeAmount * species.Harvestable.Wt / existingWt;\n                    species.RemoveBiomass(amount: amountToRemove, type: \"SetRemoveAmount\");\n                }\n                \n                // get total harvested\n                DefoliatedWt = Pasture[0].HarvestedWt;  // + Pasture[1].HarvestedWt\n                DefoliatedN = Pasture[0].HarvestedN;  //+ Pasture[1].HarvestedN\n                HarvestedWt = DefoliatedWt;\n                HarvestedN = DefoliatedN;\n\n                // get amounts actually removed from field and that to be returned (dung/urine)\n                if (DMRemoveType == removeDMTypes.RemoveAll)\n                    fractionDM2Remove = 1.0;\n                else if (DMRemoveType == removeDMTypes.RemoveNone)\n                    fractionDM2Remove = 0.0;\n                else\n                {\n                    fractionDM2Remove = Pasture[0].HarvestedDigestibility * Pasture[0].HarvestedWt;  //+ Pasture[1].HarvestedDigestibility * Pasture[1].HarvestedWt\n                    fractionDM2Remove /= removeAmount;\n                }\n                \n                RemovedWt = HarvestedWt * fractionDM2Remove;\n                RemovedN = HarvestedN * FractionN2Remove;\n                ReturnedWt = HarvestedWt - RemovedWt;\n                ReturnedN = HarvestedN - RemovedN;\n                NReturnedInDung = ReturnedN * ProportionN2Dung;\n                NReturnedInUrine = ReturnedN - NReturnedInDung;\n            }\n        }\n\n        // Return dung and urine\n        private void returnExcreta()\n        {\n            if ((ReturnedWt > 0.0) || (NReturnedInDung > 0.0))\n            {\n                PMF.BiomassRemovedType BiomassDung = new PMF.BiomassRemovedType();\n                string[] type = new string[] { \"RuminantDung_PastureFed\" };\n                float[] dltdm = new float[] { (Single)ReturnedWt };\n                float[] dltn = new float[] { (Single)NReturnedInDung };\n                float[] dltp = new float[] { 0 };\n                float[] fraction = new float[] { 1 };     // fraction is always 1.0 here\n\n                BiomassDung.crop_type = \"RuminantDung_PastureFed\";\n                BiomassDung.dm_type = type;\n                BiomassDung.dlt_crop_dm = dltdm;\n                BiomassDung.dlt_dm_n = dltn;\n                BiomassDung.dlt_dm_p = dltp;\n                BiomassDung.fraction_to_residue = fraction;\n                BiomassRemoved.Invoke(BiomassDung);\n            }\n\n            if (NReturnedInUrine > 0.0)\n            {\n                fertiliser.Apply(NReturnedInUrine * 10, Fertiliser.Types.UreaN, 1.0);\n            }\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "CutRotationStartDate",
                              "Value": "1900-07-01"
                            },
                            {
                              "Key": "CutRotationEndDate",
                              "Value": "2100-12-31"
                            },
                            {
                              "Key": "CutInterval",
                              "Value": "1"
                            },
                            {
                              "Key": "IntervalType",
                              "Value": "FixedInterval"
                            },
                            {
                              "Key": "DurationOfCut",
                              "Value": "1"
                            },
                            {
                              "Key": "RemoveAmountType",
                              "Value": "ResidualDM"
                            },
                            {
                              "Key": "AmountGiven",
                              "Value": "2250"
                            },
                            {
                              "Key": "DMRemoveType",
                              "Value": "RemoveAll"
                            },
                            {
                              "Key": "FractionN2Remove",
                              "Value": "1"
                            },
                            {
                              "Key": "ProportionN2Dung",
                              "Value": "0"
                            }
                          ],
                          "Name": "CutRotationSingle",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "using Newtonsoft.Json;\nusing Models.Soils.Nutrients;\nusing Models.Interfaces;\nusing System.Xml.Serialization;\nusing APSIM.Shared.Utilities;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\n\nnamespace Models\n{\n    [Serializable]\n    public class Script : Model\n    {\n        [Link] private Clock Clock;\n        [Link] private Fertiliser fertiliser;\n        [Link] private ISummary summary;\n        [Link] private Soil Soil;\n        private DateTime lastApplicationDate;\n        private bool fertiliserIsAllowed;\n        private int nLayers;\n        [Link(ByName = true)]\n        private ISolute NO3;\n        [Link(ByName = true)]\n        private ISolute NH4;\n        [Link(ByName = true)]\n        private ISolute Urea;\n        [Link]\n        private IPhysical soilPhysical;\n\n        //User inputs from properties tab\n        [Description(\"Turn ferliser applications on? \")]\n        public yesnoType AllowFertiliser { get; set; }\n        \n        [Description(\"Depth to calculate available soil N (mm): \")]\n        public double Depth2SoilN { get; set; }\n\n        [Description(\"Minimum available N, triggers an application (kgN/ha): \")]\n        public double CriticalSoilN { get; set; }\n\n        [Description(\"Amount of N fertiliser for each application (kgN/ha): \")]\n        public double FertNAmount { get; set; }\n\n        [Description(\"Type of N fertiliser to apply: \")]\n        public Fertiliser.Types FertType { get; set; }\n\n        [Description(\"Depth at which to apply the fertiliser (mm): \")]\n        public double FertApplicationDepth { get; set; }\n       \n        [Description(\"Minimum period between applications (days): \")]\n        public double FertMinimumDays { get; set; }\n       \n        public enum yesnoType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        [JsonIgnore] public double TopMineralN { get; set; }\n        \n\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {\n            fertiliserIsAllowed = (AllowFertiliser == yesnoType.yes);\n            nLayers = soilPhysical.Thickness.Length;\n        }\n\n        [EventSubscribe(\"DoManagement\")]\n        private void OnDoManagement(object sender, EventArgs e)\n        {\n            double daysSinceLastApplication = (Clock.Today - lastApplicationDate).TotalDays;\n            \n            // get the N stored in the soil\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopMineralN = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (Depth2SoilN - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopMineralN += (NO3.kgha[layer]\n                + NH4.kgha[layer]\n                + Urea.kgha[layer])\n                * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= Depth2SoilN)\n                    layer = nLayers;\n            }\n\n            if (fertiliserIsAllowed && (daysSinceLastApplication >= FertMinimumDays) && (TopMineralN <= CriticalSoilN))\n            {\n                fertiliser.Apply(FertNAmount, FertType, FertApplicationDepth);\n                lastApplicationDate = Clock.Today;\n            }\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "AllowFertiliser",
                              "Value": "no"
                            },
                            {
                              "Key": "Depth2SoilN",
                              "Value": "500"
                            },
                            {
                              "Key": "CriticalSoilN",
                              "Value": "50"
                            },
                            {
                              "Key": "FertNAmount",
                              "Value": "25"
                            },
                            {
                              "Key": "FertType",
                              "Value": "UreaN"
                            },
                            {
                              "Key": "FertApplicationDepth",
                              "Value": "1"
                            },
                            {
                              "Key": "FertMinimumDays",
                              "Value": "1"
                            }
                          ],
                          "Name": "AutomaticFertiliser",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Manager, Models",
                          "Code": "using Newtonsoft.Json;\nusing APSIM.Shared.Utilities;\nusing System.Xml.Serialization;\nusing Models.Soils;\nusing Models.PMF;\nusing Models.Core;\nusing System;\nusing Models.Interfaces;\n\n        \nnamespace Models\n{\n    [Serializable] \n    [System.Xml.Serialization.XmlInclude(typeof(Model))]\n    public class Script : Model\n    {\n        [Link] private ISummary summary;\n        [Link] private Irrigation Irrigation;\n        [Link] private Clock Clock;\n        [Link] private Soil Soil;\n        [Link(IsOptional = true)] private IPlant existingCrop;\n        private DateTime StartDate;\n        private DateTime EndDate;\n        private double TopDUL;\n        private double TopLL;\n        private int nLayers;\n        [Link]\n        private IPhysical soilPhysical;\n        [Link]\n        private ISoilWater waterBalance;\n        //Communication to other modules\n       \n        //User inputs from properties tab\n        [Description(\"Turn irrigation on?\")] public answerType allowIrrigation { get; set; }\n        [Description(\"Irrigate regardless of crop state?\")] public answerType allowIrrigationAll { get; set; }\n        [Description(\"Start of irrigation season (dd-MMM)\")]\n        public string seasonStart { get; set; }\n        [Description(\"End of irrigation season (dd-MMM)\")]\n        public string seasonEnd { get; set; }\n        [Description(\"Season allocation (mm)\")]\n        public double seasonsAllocation { get; set; }\n        [Description(\"Deficit to trigger irrigation (% PAWC)\")]\n        public double triggerDeficit { get; set; }\n        [Description(\"Deficit to stop irrigaton (% PAWC)\")]\n        public double targetDeficit { get; set; }\n        [Description(\"Minimum days for irrigation to return\")]\n        public double returndays { get; set; }\n        [Description(\"Maximum irrigation application (mm/day)\")]\n        public double maximumAmount { get; set; }\n        [Description(\"Depth to calculate PAWC (mm)\")]\n        public double depthPAWC { get; set; }\n       \n        public enum answerType\n        {\n            /// <summary>a positive answer</summary>\n            yes,\n            /// <summary>a negative answer</summary>\n            no\n        }\n\n        //Class members\n        [JsonIgnore] public double TopSWdeficit { get; set; }\n        [JsonIgnore] public double TopSWC { get; set; }\n        [JsonIgnore] public double DaysSinceIrrigation { get; set; }\n        [JsonIgnore] public double AmountToApply { get; set; }\n        [JsonIgnore] public double SeasonAppliedAmount { get; set; }\n        \n        private bool IrrigationIsAllowed { get; set; }\n        private bool IrrigationIsAlwaysAllowed { get; set; }\n        \n        private bool SeasonIsOpen { get; set; }\n        private bool CropIsActive { get; set; }\n        private bool IrrigatorIsAvailable { get; set; }\n        private bool SoilIsDry { get; set; }\n\n    \n        //Calculate static soil variables\n        [EventSubscribe(\"StartOfSimulation\")]\n        private void OnStartOfSimulation(object sender, EventArgs e)\n        {   \n            //Set the season dates\n            StartDate = DateTime.Parse(seasonStart + \"-\" + Clock.Today.Year.ToString());\n            EndDate = DateTime.Parse(seasonEnd + \"-\" + Clock.Today.Year.ToString());\n            \n            //Can we irrigate at all?\n            IrrigationIsAllowed = false; \n            if (allowIrrigation == answerType.yes)\n                IrrigationIsAllowed = true; \n            if (allowIrrigationAll == answerType.yes)\n                IrrigationIsAlwaysAllowed = true; \n\n\n\n\n\n            //Calculate soil water variables\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            nLayers = soilPhysical.Thickness.Length;\n            for (int layer = 0; layer < nLayers; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopLL += soilPhysical.LL15mm[layer] * fracLayer;\n                TopDUL += soilPhysical.DULmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n        }\n             \n        //Determine daily requirement for irrigation\n        [EventSubscribe(\"StartOfDay\")]\n        private void OnStartOfDay(object sender, EventArgs e)\n        {\n            //Can we irrigate today?          \n            SeasonIsOpen = isBetween(Clock.Today, StartDate, EndDate);\n\n            //Is there a crop in the ground that needs irrigation?\n            CropIsActive = false;\n            if (IrrigationIsAlwaysAllowed)\n                CropIsActive = true;  // might not be but we don't care\n            else if ((existingCrop != null) && (existingCrop.IsAlive))\n                CropIsActive = true;\n            //if ((existingCrop.Phenology.Stage >= 3.0) && (existingCrop.Phenology.Stage < 6.0))\n          \n            //Is the irrigator available?\n            IrrigatorIsAvailable = false;\n            DaysSinceIrrigation += 1;\n            if (DaysSinceIrrigation >= returndays)\n                IrrigatorIsAvailable = true;\n          \n            //Is the soil dry enough to require irrigation?\n            SoilIsDry = false;\n            double depthFromSurface = 0.0;\n            double fracLayer = 0.0;\n            TopSWC = 0.0;\n            for (int layer = 0; layer < nLayers; layer++)\n            //for (int layer = 0; depthFromSurface < depthPAWC + soilPhysical.Thickness[layer]; layer++)\n            {\n                fracLayer = Math.Min(1.0, (depthPAWC - depthFromSurface) / soilPhysical.Thickness[layer]);\n                TopSWC += waterBalance.SWmm[layer] * fracLayer;\n                depthFromSurface += soilPhysical.Thickness[layer];\n                if (depthFromSurface >= depthPAWC)\n                    layer = nLayers;\n            }\n            \n            TopSWdeficit = TopSWC - TopDUL;\n            if (Math.Max(0.0, -TopSWdeficit) >= (TopDUL - TopLL) * (100 - triggerDeficit) / 100)\n                SoilIsDry = true;\n                \n            //Are all the conditions ratifying irrigation\n            if (IrrigationIsAllowed && SeasonIsOpen && CropIsActive && IrrigatorIsAvailable && SoilIsDry)\n            {\n                //Lets bloody well irrigate then!!!!\n                AmountToApply = TopDUL * targetDeficit / 100 - TopSWC;\n                AmountToApply = Math.Max(0.0, Math.Min(AmountToApply, seasonsAllocation - SeasonAppliedAmount));\n                Irrigation.Apply(AmountToApply);\n                DaysSinceIrrigation = 0;\n                SeasonAppliedAmount += AmountToApply;\n            }\n        }\n        \n        ///Checks whether theDate is between iniDate and endDate (non-year specific)\n        private bool isBetween(DateTime theDay, DateTime iniDate, DateTime endDate)\n        {\n            bool result = false;\n            if (iniDate.DayOfYear < endDate.DayOfYear)\n            {\n                // period is within one year, ex: summer in the northern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) && (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            else\n            {\n                // period goes over the end of the year, ex: summer in the southern hemisphere\n                if ((theDay.DayOfYear >= iniDate.DayOfYear) || (theDay.DayOfYear <= endDate.DayOfYear))\n                    result = true;\n            }\n            \n            return result;\n        }\n    }\n}\n",
                          "Parameters": [
                            {
                              "Key": "allowIrrigation",
                              "Value": "yes"
                            },
                            {
                              "Key": "allowIrrigationAll",
                              "Value": "yes"
                            },
                            {
                              "Key": "seasonStart",
                              "Value": "15-Aug"
                            },
                            {
                              "Key": "seasonEnd",
                              "Value": "30-May"
                            },
                            {
                              "Key": "seasonsAllocation",
                              "Value": "10000"
                            },
                            {
                              "Key": "triggerDeficit",
                              "Value": "99"
                            },
                            {
                              "Key": "targetDeficit",
                              "Value": "100"
                            },
                            {
                              "Key": "returndays",
                              "Value": "1"
                            },
                            {
                              "Key": "maximumAmount",
                              "Value": "5"
                            },
                            {
                              "Key": "depthPAWC",
                              "Value": "600"
                            }
                          ],
                          "Name": "AutomaticIrrigation",
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.MicroClimate, Models",
                      "a_interception": 0.0,
                      "b_interception": 1.0,
                      "c_interception": 0.0,
                      "d_interception": 0.0,
                      "SoilHeatFluxFraction": 0.4,
                      "MinimumHeightDiffForNewLayer": 0.0,
                      "NightInterceptionFraction": 0.5,
                      "ReferenceHeight": 2.0,
                      "Name": "MicroClimate",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Irrigation, Models",
                      "Name": "Irrigation",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Fertiliser, Models",
                      "ResourceName": "Fertiliser",
                      "Name": "Fertiliser",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Surface.SurfaceOrganicMatter, Models",
                      "InitialResidueName": "Sward",
                      "InitialResidueType": "grass",
                      "InitialResidueMass": 0.0,
                      "InitialStandingFraction": 0.0,
                      "InitialCPR": 0.0,
                      "InitialCNR": 15.0,
                      "ResourceName": "SurfaceOrganicMatter",
                      "Name": "SurfaceOrganicMatter",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Soils.Soil, Models",
                      "RecordNumber": 0,
                      "ASCOrder": null,
                      "ASCSubOrder": null,
                      "SoilType": null,
                      "LocalName": "Stores lots of water",
                      "Site": "Made up",
                      "NearestTown": null,
                      "Region": null,
                      "State": null,
                      "Country": null,
                      "NaturalVegetation": null,
                      "ApsoilNumber": null,
                      "Latitude": 0.0,
                      "Longitude": 0.0,
                      "LocationAccuracy": null,
                      "YearOfSampling": null,
                      "DataSource": null,
                      "Comments": null,
                      "Name": "Soil",
                      "Children": [
                        {
                          "$type": "Models.Soils.Chemical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "NO3N": [
                            5.0,
                            5.0,
                            5.0,
                            5.0
                          ],
                          "NH4N": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "PH": [
                            6.0,
                            6.0,
                            6.0,
                            6.0
                          ],
                          "CL": null,
                          "EC": null,
                          "ESP": null,
                          "LabileP": null,
                          "UnavailableP": null,
                          "ECMetadata": null,
                          "CLMetadata": null,
                          "ESPMetadata": null,
                          "PHMetadata": null,
                          "Name": "Chemical",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Physical, Models",
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "ParticleSizeClay": [
                            60.0,
                            60.0,
                            60.0,
                            60.0
                          ],
                          "ParticleSizeSand": null,
                          "ParticleSizeSilt": null,
                          "Rocks": null,
                          "Texture": null,
                          "BD": [
                            1.3,
                            1.3,
                            1.3,
                            1.3
                          ],
                          "AirDry": [
                            0.05,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "LL15": [
                            0.1,
                            0.1,
                            0.1,
                            0.1
                          ],
                          "DUL": [
                            0.45,
                            0.45,
                            0.45,
                            0.45
                          ],
                          "SAT": [
                            0.5,
                            0.5,
                            0.5,
                            0.5
                          ],
                          "KS": [
                            500.0,
                            500.0,
                            500.0,
                            500.0
                          ],
                          "BDMetadata": null,
                          "AirDryMetadata": null,
                          "LL15Metadata": null,
                          "DULMetadata": null,
                          "SATMetadata": null,
                          "KSMetadata": null,
                          "RocksMetadata": null,
                          "TextureMetadata": null,
                          "ParticleSizeSandMetadata": null,
                          "ParticleSizeSiltMetadata": null,
                          "ParticleSizeClayMetadata": null,
                          "Name": "Physical",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPRyegrassSoil",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilCrop, Models",
                              "LL": [
                                0.1,
                                0.1,
                                0.1,
                                0.1
                              ],
                              "KL": [
                                0.05,
                                0.05,
                                0.05,
                                0.05
                              ],
                              "XF": [
                                1.0,
                                1.0,
                                1.0,
                                1.0
                              ],
                              "LLMetadata": null,
                              "KLMetadata": null,
                              "XFMetadata": null,
                              "Name": "AGPWhiteCloverSoil",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.WaterModel.WaterBalance, Models",
                          "SummerDate": "1-Nov",
                          "SummerU": 6.0,
                          "SummerCona": 3.5,
                          "WinterDate": "1-apr",
                          "WinterU": 6.0,
                          "WinterCona": 3.5,
                          "DiffusConst": 88.0,
                          "DiffusSlope": 35.0,
                          "Salb": 0.13,
                          "CN2Bare": 73.0,
                          "CNRed": 20.0,
                          "CNCov": 0.8,
                          "DischargeWidth": 0.0,
                          "CatchmentArea": 0.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "SWCON": [
                            0.3,
                            0.3,
                            0.3,
                            0.3
                          ],
                          "KLAT": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "ResourceName": "WaterBalance",
                          "Name": "SoilWater",
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.SoilNitrogen, Models",
                          "fom_types": [
                            "default",
                            "manure",
                            "mucuna",
                            "lablab",
                            "shemp",
                            "stable"
                          ],
                          "fract_carb": [
                            0.2,
                            0.3,
                            0.54,
                            0.57,
                            0.45,
                            0.0
                          ],
                          "fract_cell": [
                            0.7,
                            0.3,
                            0.37,
                            0.37,
                            0.47,
                            0.1
                          ],
                          "fract_lign": [
                            0.1,
                            0.4,
                            0.09,
                            0.06,
                            0.08,
                            0.9
                          ],
                          "NPartitionApproach": 0,
                          "Name": "SoilNitrogen",
                          "Children": [
                            {
                              "$type": "Models.Soils.SoilNitrogenNO3, Models",
                              "Name": "NO3",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenNH4, Models",
                              "Name": "NH4",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            },
                            {
                              "$type": "Models.Soils.SoilNitrogenUrea, Models",
                              "Name": "Urea",
                              "Children": [],
                              "Enabled": true,
                              "ReadOnly": false
                            }
                          ],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.Organic, Models",
                          "FOMCNRatio": 40.0,
                          "Thickness": [
                            150.0,
                            150.0,
                            150.0,
                            150.0
                          ],
                          "Carbon": [
                            0.01,
                            0.01,
                            0.01,
                            0.01
                          ],
                          "SoilCNRatio": [
                            12.0,
                            12.0,
                            12.0,
                            12.0
                          ],
                          "FBiom": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FInert": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "FOM": [
                            0.0,
                            0.0,
                            0.0,
                            0.0
                          ],
                          "CarbonMetadata": null,
                          "FOMMetadata": null,
                          "Name": "Organic",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.InitialWater, Models",
                          "PercentMethod": 1,
                          "FractionFull": 0.95,
                          "DepthWetSoil": "NaN",
                          "RelativeTo": null,
                          "Name": "Initial water",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        },
                        {
                          "$type": "Models.Soils.CERESSoilTemperature, Models",
                          "Name": "Temperature",
                          "Children": [],
                          "Enabled": true,
                          "ReadOnly": false
                        }
                      ],
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.AgPasture.PastureSpecies, Models",
                      "InitialShootDM": 1500.0,
                      "InitialRootDM": 450.0,
                      "InitialRootDepth": 750.0,
                      "ResourceName": "AGPRyegrass",
                      "Name": "AGPRyegrass",
                      "Enabled": true,
                      "ReadOnly": false
                    },
                    {
                      "$type": "Models.Report, Models",
                      "VariableNames": [
                        "[Clock].Today as Date",
                        "[AGPRyegrass].AboveGroundWt as PlantMass",
                        "[AGPRyegrass].HarvestedWt as Harvested",
                        "[AGPRyegrass].WaterDemand as SW_Demand",
                        "sum([AGPRyegrass].WaterUptake) as SW_Uptake",
                        "[AGPRyegrass].GlfWaterSupply as glfWater",
                        "[AGPRyegrass].GlfNSupply as glfNitrogen",
                        "sum([Soil].SoilWater.SWmm) as SoilWater",
                        "sum([Soil].SoilNitrogen.NH4.kgha)+sum([Soil].SoilNitrogen.NO3.kgha) as SoilNitrogen",
                        "[Irrigation].IrrigationApplied as Irrigation",
                        "[Fertiliser].NitrogenApplied as Fertiliser"
                      ],
                      "EventNames": [
                        "[Clock].EndOfDay"
                      ],
                      "GroupByVariableName": null,
                      "Name": "ThreeZoneSimulationInitialNonuniformSoilN",
                      "Children": [],
                      "Enabled": true,
                      "ReadOnly": false
                    }
                  ],
                  "Enabled": true,
                  "ReadOnly": false
                }
              ],
              "Enabled": true,
              "ReadOnly": false
            }
          ],
          "Enabled": true,
          "ReadOnly": false
        }
      ],
      "Enabled": true,
      "ReadOnly": false
    }
  ],
  "Enabled": true,
  "ReadOnly": false
}